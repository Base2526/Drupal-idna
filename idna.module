<?php

require_once ( dirname(__FILE__) . '/includes/configs.inc');
require_once ( dirname(__FILE__) . '/includes/utility.inc');

// qrcode
require_once ( dirname(__FILE__) . '/libraries/qrcode/qrlib.php');

// libraries firebase
require ( dirname(__FILE__) . '/libraries/firebase/vendor/autoload.php'); //'firebase/autoload.php';

// require_once 'ApnsPHP/Autoload.php';

/*
  https://github.com/immobiliare/ApnsPHP
*/
// -------- ApnsPHP
require_once ( dirname(__FILE__) . '/libraries/ApnsPHP/Autoload.php');

// -------- twilio_voice
require_once ( dirname(__FILE__) . '/libraries/twilio_voice/autoload.php');

// use Twilio\Jwt\AccessToken;
// use Twilio\Jwt\Grants\VoiceGrant;

use Twilio\Twiml;
use Twilio\Rest;
use Twilio\Rest\Client;
// -------- twilio_voice

// use Twilio\Jwt\AccessToken;
// use Twilio\Jwt\Grants\VideoGrant;

use Twilio\Jwt\AccessToken;
use Twilio\Jwt\Grants\VideoGrant;

// const FIREBASE_DEFAULT_URL   = 'https://idna-614bd.firebaseio.com/';//'https://heart-id.firebaseio.com/';
// const FIREBASE_DEFAULT_PATH  = '/heart-id/';
// // const FIREBASE_REGISTER_PATH = 'user-register/';
// const FIREBASE_LOGIN_PATH = 'user-login/';
$debug;
$firebase;

function idna_init(){
  // echo "<pre>";
  // var_dump(user_password(6));
  // echo "</pre>";

  // $iPod = stripos($_SERVER['HTTP_USER_AGENT'],"iPod");
  // $iPhone = stripos($_SERVER['HTTP_USER_AGENT'],"iPhone");
  // $iPad = stripos($_SERVER['HTTP_USER_AGENT'],"iPad");
  // $Android= stripos($_SERVER['HTTP_USER_AGENT'],"Android");

  // // //check if user is using ipod, iphone or ipad...
  // if( $iPod || $iPhone || $iPad ){
  //   echo "$iPod || $iPhone || $iPad";
  // }else if($Android){
  //   echo "$Android";
  // }

  // echo $pid = pcntl_fork();

  // $pid = pcntl_fork(); // fork
  // if ($pid > 0) { // child

  //     $sid = posix_setsid();
  //     if ($sid > 0) {
  //         $daemon->run();
  //     }
  // }

  // $pid = pcntl_fork();

  // $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);
  
  // $to = config_pages_get('configure_idna', 'field_config_tag');
  // dpm($to);

  


  
  // $values = array("profiles"=>array(
  //                       "name"            => '$account->name',
  //                       "mail"            => '$account->mail',
  //                       "udid"            => 'auto-udid',
  //                       "platform"        => 'auto-platform',
  //                       "bundleidentifier"=> 'auto-bundleidentifier',
  //                       "version"         => 'auto-version',
  //                       "create"          => time(),
  //                       "update"          => time()
  //                     ));
        
  // dpm($firebase->set(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . 444 . '/', $values));
  // $vocabulary = taxonomy_vocabulary_machine_name_load('tags_friend_status');
  // $terms = entity_load('taxonomy_term', FALSE, array('vid' => $vocabulary->vid));

  // dpm($terms);
  
  // define("IS_DEBUG", 1);
  
  global $debug;

  $debug = 0;

  if ($debug) {
    define("CONFIG_PAGES_TYPE", "configure_idna_development");

    define("TAG", config_pages_get(CONFIG_PAGES_TYPE, 'field_config_tag_dev'));
    define("DEFUALT_IOS_URL_STORE_IDNA", config_pages_get(CONFIG_PAGES_TYPE, 'field_defualt_ios_url_store_dev'));
    define("DEFUALT_ANDROID_URL_STORE_IDNA", config_pages_get(CONFIG_PAGES_TYPE, 'field_android_url_store_idna_dev'));
    define("FIREBASE_URL", config_pages_get(CONFIG_PAGES_TYPE, 'field_firebase_default_url_dev'));
  }else{
    define("CONFIG_PAGES_TYPE", "configure_idna");

    define("TAG", config_pages_get(CONFIG_PAGES_TYPE, 'field_config_tag'));
    define("DEFUALT_IOS_URL_STORE_IDNA", config_pages_get(CONFIG_PAGES_TYPE, 'field_defualt_ios_url_store_idna'));
    define("DEFUALT_ANDROID_URL_STORE_IDNA", config_pages_get(CONFIG_PAGES_TYPE, 'field_android_url_store_idna'));
    define("FIREBASE_URL", config_pages_get(CONFIG_PAGES_TYPE, 'field_firebase_default_url'));
  }

  define("DEFUALT_PASSWORD", "HEARTIDNA");
  define("LENGTH_CHAT_ID", "20");
  define("QRCODE_SECRET_KEY", "aaa04b7e103a0cd8b54763051cef08bc55abe029fdebae5e1d417e2ffb2a00a3");
  define("QRCODE_SECRET_IV", "bbb04b7e103a0cd8b54763051cef08bc55abe029fdebae5e1d417e2ffb2a00a3");
  define("PATH_FOLDER_QRCODE", "sites/default/files/qrcode");

  define("FIREBASE_DEFAULT_PATH", '/idna/');
  define("FIREBASE_LOGIN_PATH", 'user/');
  define("FIREBASE_MY_APPLIPATIONS_PATH", 'my_applications/');
  define("FIREBASE_MY_APPLIPATIONS_POSTS_PATH", 'posts/');

  // comments
  define("FIREBASE_MY_APPLIPATIONS_POSTS_COMMENTS_PATH", 'comments/');

  define("FIREBASE_CENTER", 'center/'); 
  define("FIREBASE_CENTER_SLIDE", 'center-slide/'); 
  define("FIREBASE_VOIP", 'voip/'); 


  define("PATH_GROUPS", "groups");
  define("PATH_CLASSS", "classs");
  define("PATH_FOLLOWING", "following");


  // Bundle Identifier  
  // define("BI_IOS_BASIC", "heart.basic");
  
  define("BI_IOS_CHAT", "heart.chat");
  // define("BI_ANDROID_BASIC", "heart.basic");


  // define("BI_IOS_IDNA", "heart.idna");
  // define("BI_ANDROID_IDNA", "heart.idna");

  define("BUNDLE_IDENTIFIER", "heart.idna");

  // define("DEFUALT_LENGTH_CHAT_ID", 20); 

  // เป็น password ทีใช้ เข้าระบบ string uid ของ user ทีใช้สำหรับสร้าง  QRCode
  // define("QRCODE_SECRET_KEY", "aaa04b7e103a0cd8b54763051cef08bc55abe029fdebae5e1d417e2ffb2a00a3");
  // define("QRCODE_SECRET_IV", "bbb04b7e103a0cd8b54763051cef08bc55abe029fdebae5e1d417e2ffb2a00a3");

  define("FRIEND_STATUS_FRIEND", "10");
  define("FRIEND_STATUS_FRIEND_CANCEL", "13");
  define("FRIEND_STATUS_FRIEND_REQUEST", "11");  
  define("FRIEND_STATUS_WAIT_FOR_A_FRIEND", "12");  


  if ($debug) {
    /*
    mr.simajarn@gmail.com

    FRIENDLY NAME
    iDNA Development - Video

    SID
    SK620d550fb90459e6da0fe460e955d800

    KEY TYPE
    Standard

    SECRET
    seRvEwi0MvQ991iSCtq8KmxcmYr2SHk6

    */
    define("TWILIO_ACCOUNT_SID", "ACe35b4dd61ff6875ce26ee0e3ea9dd4dc");
    define("TWILIO_API_KEY", "SK620d550fb90459e6da0fe460e955d800");
    define("TWILIO_API_KEY_SECRET", "seRvEwi0MvQ991iSCtq8KmxcmYr2SHk6");
    define("TWILIO_PUSH_CREDENTIAL_SID", "");
    define("TWILIO_APP_SID", "AP5a5464cc136a4ac7877886a4f1d3df0c");
  }else{
    /*
    android.somkid@gmail.com
    */
    define("TWILIO_ACCOUNT_SID", "AC94429faf5d0c017fdde2eb9347c699e6");
    define("TWILIO_API_KEY", "SK5b11e67487ccf92915a1ede27b640dfa");
    define("TWILIO_API_KEY_SECRET", "QuGFTh7pvRKUV9VeFwC6FmIoGjXiFwcC");
    define("TWILIO_PUSH_CREDENTIAL_SID", "CR6279daf7d3f608853b78f863fd7dc995");
    define("TWILIO_APP_SID", "AP30c22ca482e1db49ceac6cd2ff19c37c");
  }

  // define("APN_CERTIFICATE", config_pages_get(CONFIG_PAGES_TYPE, 'field_apn_certificate'));
  // dpm(config_pages_get(CONFIG_PAGES_TYPE, 'field_apn_certificate'));
  // $url_apn_certificate = file_create_url(config_pages_get(CONFIG_PAGES_TYPE, 'field_apn_certificate')['uri']);
  // dpm($url_apn_certificate);

  
  global $firebase;

  /*
  เป็นการ load library firebase ในครั้งเท่านั้น
  *** การใช้งาน
    เราต้อง ประกาศ global $firebase ถึงเราจะสามารถนําไปใช้งานได้
  */
  $firebase = new \Firebase\FirebaseLib(FIREBASE_URL);
  /*
  module_load_include('module', 'opentok', 'opentok');

  $opentok_api_key = variable_get('opentok_api_key', NULL);
  $sessionId = opentok_create_session("1")->__toString();

  echo "opentok_api_key : " . $opentok_api_key . '</br>';
  echo "sessionId : " . $sessionId . '</br>';
  echo "opentok_get_token : " . opentok_get_token($sessionId);
  */

  // test_image_style_url();
}

function test_image_style_url()
{
  // /sites/default/files/20170119_213506711.png

  // public://20170119_213506711.png
  // var_dump(image_style_url('thumbnail', _load_image()->uri));

  // [7]  (null)  @"uri" : @"public:///20180406_64827038.png" 
  // var_dump(image_style_url('thumbnail', 'public:///20180406_64827038.png'));

  // [8]  (null)  @"uri" : @"public:///20180406_710453103.png"  

  // dpm(image_style_url('thumbnail','public:///20180406_710453103.png'));

  // var_dump(_load_image()->uri);

  // setDefualtClasss();

  // $profile = profile2_by_uid_load('548532', 'main');

  // dpm(_load_imag_defualt_profile());

  // $defualt_profile = (array)_load_imag_defualt_profile();

  // substr(file_create_url($defualt_profile['uri']), strlen($GLOBALS['base_url']));
          
  // $term = taxonomy_get_term_by_name('defualt_picture');

  // $term = taxonomy_vocabulary_machine_name_load('defualt_picture');

  // $term = taxonomy_get_tree_nested(taxonomy_vocabulary_machine_name_load("defualt_picture")->vid);;

  // $term = taxonomy_get_tree_nested(taxonomy_vocabulary_machine_name_load("defualt_picture")->vid);


  // $query = new EntityFieldQuery;
  // $result = $query
  //   ->entityCondition('entity_type', 'taxonomy_term')
  //   ->propertyCondition('name', 'defualt_picture')
  //   // ->propertyCondition('vid', 1)
  //   ->execute();

  // $term = taxonomy_get_tree(34);

  // var_dump($term);
  // echo "test_image_style_url";

  // $name = 'defualt_picture';
  // $myvoc = taxonomy_vocabulary_machine_name_load($name);
  // $tree = taxonomy_get_tree($myvoc->vid);
  // foreach ($tree as $term) {
  //  // echo $term->tid;
  //  $term = taxonomy_term_load($term->tid);
  //  // dpm(file_load($term->field_image[LANGUAGE_NONE][0]['fid']));

  //  dpm($term);

  //  // $item['picture']        = file_load($items->field_image[LANGUAGE_NONE][0]['fid']);
  // }


  /*
  $profile = profile2_by_uid_load('548553', 'main');

  // dpm($user_profile->field_field_my_class);

  if(isset($profile->field_field_my_class)){
    foreach ($profile->field_field_my_class[LANGUAGE_NONE] as $key => $value) {
      $items = field_collection_item_load($value['value']);     
      if (strcasecmp($items->field_class_name[LANGUAGE_NONE][0]['value'], 'friend') == 0) {
        dpm($value['value']);
        break;
      }
    } 
  }
  */
}

function get_friend_classs($profile){
  if(isset($profile->field_field_my_class)){
    foreach ($profile->field_field_my_class[LANGUAGE_NONE] as $key => $value) {
      $items = field_collection_item_load($value['value']);     
      if (strcasecmp($items->field_class_name[LANGUAGE_NONE][0]['value'], 'friend') == 0) {
        return $value['value'];
      }
    } 
  }

  return 0;
}


/*
http://learn-php-by-example.blogspot.com/2013/01/working-with-apple-push-notification.html

*/
function call(){
  /*
apn push "<ff38f7dc 0d34b6c5 82166cf5 ecbb0e31 14ca8160 b0387278 26ed306b 0e8e4a83>" -c VOIP.pem -m "Testing VoIP notifications"
  */

  // 395AA99183B9C31C2B6274DBFBBCD169C149C4F59782F4FDE9B8386866FF15F5
  $array_token_pkpush = array("ff38f7dc0d34b6c582166cf5ecbb0e3114ca8160b038727826ed306b0e8e4a83", "8597a025aae811c3c007f6c02d0864c99a0e3b081639edd2060c0968aa8b65f2");

  foreach ($array_token_pkpush as &$token_pkpush) {
    // $value = $value * 2;
    // dpm($value);

    $apnsHost = config_pages_get(CONFIG_PAGES_TYPE, 'field_apn_host');//'gateway.sandbox.push.apple.com';
    $apnsCert = $_SERVER['DOCUMENT_ROOT'] . substr(file_create_url(config_pages_get(CONFIG_PAGES_TYPE, 'field_apn_certificate')['uri']), strlen($GLOBALS['base_url']));   // dpm(dirname(__FILE__) . '/' . 'VOIP.pem');
    $apnsPort = config_pages_get(CONFIG_PAGES_TYPE, 'field_apn_port'); // 2195;

    /*
    dpm($apnsHost);
    dpm($apnsCert);
    dpm($apnsPort);
    */

    // iphone 5s
    // $token_pkpush   = '395aa99183b9c31c2b6274dbfbbcd169c149c4f59782f4fde9b8386866ff15f5';

    // ipad
    // $token_pkpush = '7094ac021bd272647aa232eddc4c5254a4913f80a4c05b2232e4103deaaffb8c';
    $streamContext = stream_context_create();
    stream_context_set_option($streamContext, 'ssl', 'local_cert', $apnsCert);
    $apns = stream_socket_client('ssl://' . $apnsHost . ':' . $apnsPort, $error, $errorString, 2, STREAM_CLIENT_CONNECT, $streamContext);
    $payload['aps'] = array('alert' => 'Oh hai!', 'hasVideo' => 1, 'sound' => 'default', 'is_audio' => '0', 'UUID' => 'BFB35180-40F3-4F11-A165-DE96977086E1', 'handle'=>'test call');
    $output = json_encode($payload);
    $token = pack('H*', str_replace(' ', '', $token_pkpush));
    $apnsMessage = chr(0) . chr(0) . chr(32) . $token . chr(0) . chr(strlen($output)) . $output;
    $result = fwrite($apns, $apnsMessage);

    // dpm($result);
    // Expiry

    if (!$result){
      // echo 'Message not delivered<br/>';
    }
    else{
      // echo 'Message successfully delivered<br/>';
    }
    socket_close($apns);
    fclose($apns);
  }
}


/*
 * hook_help()
 * */
function idna_help($path, $arg)
{
  switch ($path) {
    case 'admin/help#idna':
      return t('Module iDNA');
    default:
      break;
  }
}

/**
 * Implements hook_permission().
 */
function idna_permission() {
  return array(
    'idna_permission' => array(
      'title' => t('iDNA Permissions.'),
    ),
    'idna_reset_heart_permission' => array(
      'title' => t('Reset Heart.'),
    )
  );
}

/*
 * hook_menu()
 * */
function idna_menu() { 
  // clear_twilio_outgoing_incomming_call
  $items['idna/clear_twilio_outgoing_incomming_call'] = array(
    'title' => t('ทดสอบ function clear_twilio_outgoing_incomming_call'),
    'page callback' => 'clear_twilio_outgoing_incomming_call',
    'access arguments' => array('idna_permission'),
    // 'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );

  $items['idna/test_function'] = array(
    'title' => t('ทดสอบ function test'),
    'page callback' => 'test_function',
    'access arguments' => array('idna_permission'),
    // 'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );

  $items['idna/test_add_data'] = array(
    'title' => t('ทดสอบ function add data'),
    'page callback' => 'test_add_data',
    'access arguments' => array('idna_permission'),
    // 'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );

  $items['idna/test_create_user'] = array(
    'title' => t('ทดสอบ test create user'),
    'page callback' => 'test_create_user',
    'access arguments' => array('idna_permission'),
    // 'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );

  $items['idna/reset_heart'] = array(
    'title' => t('ทดสอบ Reset Heart'),
    'page callback' => 'reset_heart',
    'access arguments' => array('idna_reset_heart_permission'),
    // 'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['qe'] = array(
    'page callback' => 'qe',
    'access arguments' => array('idna_permission'),
    // 'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );

  $items['idna/delete_user'] = array(
    'title' => t('ทดสอบ Delete User All'),
    'page callback' => 'delete_user',
    'access arguments' => array('idna_permission'),
    // 'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['tw/voice_makeCall'] = array(
    'title' => t('Twilio Voice MakeCall : ถูกเรียกจาก twilio โดยจะ $_POST หรือ $_GET ค่ามาให้เรารองรับค่าเพือเอาไปใช้งานต่อ'),
    'page callback' => 'tw_voice_makeCall',
    'access arguments' => array('idna_permission'),
    // 'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  // incoming
  $items['tw/voice_incoming'] = array(
    'title' => t('Twilio Voice incoming : จะถูกเรียกหลักจาก โทรหาเพือนโดยใช้ api twilio( -tw_voice_placeCall()- )'),
    'page callback' => 'tw_voice_incoming',
    'access arguments' => array('idna_permission'),
    // 'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  // 
  $items['tw/parentStatusCallback'] = array(
    'title' => t('Twilio parentStatusCallback'),
    'page callback' => 'tw_parentStatusCallback',
    'access arguments' => array('idna_permission'),
    // 'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  // 
   $items['tw/clientStatusCallback'] = array(
    'title' => t('Twilio clientStatusCallback'),
    'page callback' => 'tw_clientStatusCallback',
    'access arguments' => array('idna_permission'),
    // 'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['tw/waitUrl'] = array(
    'title' => t('Twilio waitUr : เสียงรอสาย'),
    'page callback' => 'tw_waitUrl',
    'access arguments' => array('idna_permission'),
    // 'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['quickstart/twilio_client'] = array(
    'title' => t('Twilio voice - การทดสอบ TwilioClient'),
    'page callback' => 'quickstart_twilio_client',
    'access arguments' => array('idna_permission'),
    // 'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['twilio/hook_group_rooms'] = array(
    'title' => t('Twilio video - การทดสอบ webhook group rooms [https://www.twilio.com/console/video/configure]'),
    'page callback' => 'hook_group_rooms',
    'access arguments' => array('idna_permission'),
    // 'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  //  $items['idna/configs'] = array(
  //   'title' => t('หน้า Configs'),
  //   'page callback' => 'idna_configs',
  //   'access arguments' => array('idna_permission'),
  //   // 'access callback' => TRUE,
  //   'type' => MENU_CALLBACK,
  // );

  return $items;
}

// function idna_configs(){

//   $name = 'configure_idna';

//   // $settings = array();
//   // $settings = array(
//   //   'ajax' => 0,
//   //   'hide_if_empty' => 1,
//   //   'default_tab' => 0,
//   //   'title' => 'My custom quicktab',
//   //   'renderer' => 'quicktabs',
//   //   'style' => 'nostyle',
//   // );

//   $block = module_invoke('quicktabs', 'block_view', $name); // Only change the machine name here,
//   print render($block);
// }

/*
  hook_mail
  Refer : http://drupal.stackexchange.com/questions/103892/passing-variables-in-drupal-mail
*/
function idna_mail($key, &$message, $params) {
  // global $user;

  // Each message is associated with a language, which may or may not be the
  // current user's selected language, depending on the type of e-mail being
  // sent. This $options array is used later in the t() calls for subject
  // and body to ensure the proper translation takes effect.
  $options = array(
    'langcode' => LANGUAGE_NONE/*$message['language']->language*/,
  );

  switch ($key) {
    // Send a simple message from the contact form.
    case 'contact_message':{
      $message['subject'] = t('E-mail sent from @site-name', array('@site-name' => variable_get('site_name', 'Drupal')), $options);
      // Note that the message body is an array, not a string.
      $message['body'][] = t('Code verify = @key', array('@key' => $params['verify_key']), $options);
      $message['body'][] = t('Password    = @key', array('@key' => $params['verify_key']), $options);
      $message['body'][] = t('--  @site-name team', array('@site-name' => variable_get('site_name', 'Drupal')), $options);
      // Because this is just user-entered text, we do not need to translate it.
      // Since user-entered text may have unintentional HTML entities in it like
      // '<' or '>', we need to make sure these entities are properly escaped,
      // as the body will later be transformed from HTML to text, meaning
      // that a normal use of '<' will result in truncation of the message.
      $message['body'][] = check_plain($params['message']);
    }
      break;

    case 'user_forgot_password':{
      $message['subject'] = t('Replacement login information for @name at @site-name', array('@name' => $params['name'], '@site-name' => variable_get('site_name', 'Drupal')), $options);
      // Note that the message body is an array, not a string.
      $message['body'][] = t('New Password    = @key', array('@key' => $params['verify_key']), $options);
      $message['body'][] = t('--  @site-name team', array('@site-name' => variable_get('site_name', 'Drupal')), $options);
      // Because this is just user-entered text, we do not need to translate it.
      // Since user-entered text may have unintentional HTML entities in it like
      // '<' or '>', we need to make sure these entities are properly escaped,
      // as the body will later be transformed from HTML to text, meaning
      // that a normal use of '<' will result in truncation of the message.
      $message['body'][] = check_plain($params['message']);

    }
    break;
  }
}

/*
  hook_user_login()
  $bundleidentifier : heart.idna or heart.dna
  $platform         : ios, android
*/
function idna_user_login(&$edit, $account) {
  global $firebase;

  if (check_header()) {
    $getallheaders = getallheaders();

    // watchdog(TAG, 'idna_user_login header: %header', array('%header'=> serialize($getallheaders)), WATCHDOG_INFO);

    /*
    เป้น การ load friends ของ uid ขึ้นมาเช็ดว่า friend_id เป้น friend เราอยุ่หรือไม่
    */
    $profile = profile2_by_uid_load($account->uid, 'main');

    $flag = TRUE;

    if(isset($profile->field_device_access)){
      foreach ($profile->field_device_access[LANGUAGE_NONE] as $key => $value) {
        $item_load = field_collection_item_load($value['value']);

        if (strcasecmp($item_load->field_udid[LANGUAGE_NONE][0]['value'], $getallheaders['udid']) == 0) {

          $wrapper = entity_metadata_wrapper('field_collection_item', $item_load);
          if(strcasecmp($item_load->field_device_name[LANGUAGE_NONE][0]['value'], base64_decode($getallheaders['device_name'])) != 0){
            $wrapper->field_device_name->set(base64_decode($getallheaders['device_name']));
          }

          if(strcasecmp($item_load->field_device_access_version[LANGUAGE_NONE][0]['value'], $getallheaders['version_application']) != 0){
            $wrapper->field_device_access_version->set($getallheaders['version_application']);
          }

          if(strcasecmp($item_load->field_device_access_build[LANGUAGE_NONE][0]['value'], $getallheaders['build']) != 0){
            $wrapper->field_device_access_build->set($getallheaders['build']);
          }


          // field_key_token_notification
          if(strcasecmp($item_load->field_key_token_notification[LANGUAGE_NONE][0]['value'], $getallheaders['token_notification']) != 0){
            $wrapper->field_key_token_notification->set($getallheaders['token_notification']);
          }

          // field_pushkit_token
          if(strcasecmp($item_load->field_pushkit_token[LANGUAGE_NONE][0]['value'], $getallheaders['token_pushkit']) != 0){
            $wrapper->field_pushkit_token->set($getallheaders['token_pushkit']);
          }

          $wrapper->field_is_login->set("1");
          $wrapper->field_online->set("1");
          $wrapper->save();

          $val = array(
              "device_name"   => base64_decode($getallheaders['device_name']),
              "version"       => $getallheaders['version_application'],
              "build"         => $getallheaders['build'],
              "is_login"      => '1',
              "online"        => '1',
              "token_notification" => $getallheaders['token_notification'],
              "token_pushkit" => $getallheaders['token_pushkit']
            );
          $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $account->uid . '/profiles/device_access/' . $value['value'] . "/", $val);

          $flag = FALSE;
          break;
        }
      }
    }

    if ($flag) {
      $values = array();
      $values['field_name'] = 'field_device_access'; 
      $values['field_udid'][LANGUAGE_NONE][0]['value']              = $getallheaders['udid'];
      $values['field_platform'][LANGUAGE_NONE][0]['value']          = $getallheaders['platform'];
      $values['field_bundle_identifier'][LANGUAGE_NONE][0]['value'] = $getallheaders['bundle_identifier'];
      $values['field_device_name'][LANGUAGE_NONE][0]['value']       = base64_decode($getallheaders['device_name']);
      $values['field_model_number'][LANGUAGE_NONE][0]['value']      = $getallheaders['model_number'];
      $values['field_device_access_version'][LANGUAGE_NONE][0]['value']    = $getallheaders['version_application'];
      $values['field_device_access_build'][LANGUAGE_NONE][0]['value']      = $getallheaders['build'];
      $values['field_is_login'][LANGUAGE_NONE][0]['value']                 = '1';
      $values['field_online'][LANGUAGE_NONE][0]['value']                   = '1';
      $values['field_key_token_notification'][LANGUAGE_NONE][0]['value']   = $getallheaders['token_notification'];
      $values['field_pushkit_token'][LANGUAGE_NONE][0]['value']            = $getallheaders['token_pushkit'];

      // Create the field collection entry and associate it with the profile
      $field_entity = entity_create('field_collection_item', $values);
      $field_entity->setHostEntity('profile2', $profile);
      $field_entity->save();


      $values = array(
        "udid"              => $getallheaders['udid'],
        "platform"          => $getallheaders['platform'],
        "bundle_identifier" => $getallheaders['bundle_identifier'],
        "device_name"       => base64_decode($getallheaders['device_name']),
        "model_number"      => $getallheaders['model_number'],
        "version"           => $getallheaders['version_application'],
        "build"             => $getallheaders['build'],
        "is_login"          => '1',
        "online"            => '1',
        "token_notification"=> $getallheaders['token_notification'],
        "token_pushkit"     => $getallheaders['token_pushkit']
      );
      $firebase->set(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $account->uid . '/profiles/device_access/' . $field_entity->item_id . "/", $values);
      

      /*
      $chat_id = generateRandomString(config_pages_get(CONFIG_PAGES_TYPE, 'field_defualt_length_chat_id', 20));

      // เป็นการเพือนให้ตัวเรา
      $user_profile = profile2_by_uid_load($uid, 'main');

      $friend_values = array();
      $friend_values['field_name'] = 'field_profile_friends'; // field collection name

      $friend_values['field_friend_uid'][LANGUAGE_NONE][0]['value'] = $friend_id;
      $friend_values['field_change_friend_name'][LANGUAGE_NONE][0]['value'] = '';
      $friend_values['field_friend_status'][LANGUAGE_NONE][0]['tid'] = FRIEND_STATUS_WAIT_FOR_A_FRIEND;
    
      $field_entity = entity_create('field_collection_item', $friend_values);
      $field_entity->setHostEntity('profile2', $user_profile);
      $field_entity->save();

      //  $field_entity->item_id;

      $values = array(
        "status"       => FRIEND_STATUS_WAIT_FOR_A_FRIEND,
        "chat_id"      => $chat_id,
        "item_id"      => $field_entity->item_id,
        "create"       => time()
      );
      $firebase->set(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid . '/friends/' . $friend_id . "/", $values);
      */
    }
  }
}

/*
 * hook_user_insert()
 * this hook triggered when a user registered . you can implement it in your custom module.
 * กรณีมีการ add new user จะมีการเรียก hook_user_insert() เราต้องการที่จะสร้าง qrcode ให้ user ที่คนที่อยู่ในระบบ
 */
function idna_user_insert(&$edit, $account, $category) {

  global $firebase;


  if (check_header()) {
    # code...
    $getallheaders = getallheaders();

    $udid          = $getallheaders['udid'];
    $platform      = $getallheaders['platform'];
    $bundle_identifier  = $getallheaders['bundle_identifier'];
    $version_application= $getallheaders['version_application'];

    $my_id = generateMyID($account->uid);

    // module_load_include('module', 'opentok', 'opentok');
    // $opentok_session_id = opentok_create_session($account->uid)->__toString();

    switch ($platform) {
      case 'ios':
      case 'android':{

          generatorQRCode($account, $platform, $bundle_identifier);

          $profile = profile2_by_uid_load($account->uid, 'main');

          $my_id_item_id = setDefualtMyID($profile, $my_id);

          $sound_call_waiting_item_id = setDefualtSoundCallWaiting($profile);

          $url_my_qrcode = substr(file_create_url($profile->field_profile_my_qrcode[LANGUAGE_NONE][0]['uri']), strlen($GLOBALS['base_url']));

          
          // $profile->field_opentok_session_id[LANGUAGE_NONE][0]['value'] = $opentok_session_id;
          // profile2_save($profile);

          $mid_value = array();
          $mid_value[$my_id_item_id] = array("value"    => $my_id, 
                                        "is_edit"  => "1", 
                                        "enabled"  => "1");

          $sound_call_waiting_value = array();
          $sound_call_waiting_value[$sound_call_waiting_item_id] = array("nid"    => "396", 
                                                                          "title"  => "Default Sound Call waiting", 
                                                                          "sound_url"  => "/sites/default/files/sound_call_waiting/sexiest_romantic_mp3.mp3");


          $defualt_profile = (array)get_defualt_picture(30);
          $image_url = substr(file_create_url(image_style_url('medium', $defualt_profile['uri'])), strlen($GLOBALS['base_url']));

          $defualt_card_background = (array)get_defualt_picture(31);
          $bg_url = substr(file_create_url(image_style_url('medium', $defualt_card_background['uri'])), strlen($GLOBALS['base_url']));

          // add profile ให้กับ user
          $values = array("profiles"=>array(
                          "name"            => $account->name,
                          "url_my_qrcode"   => $url_my_qrcode,
                          "image_url"       => $image_url,
                          "bg_url"          => $bg_url,
                          "my_id"           => $mid_value,
                          "sound_call_waiting"  => $sound_call_waiting_value
                        ));
          
          /*
           #1 : บันทึก profile ตัวเองไว้ที่ firebase
          */
          $firebase->set(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $account->uid . '/', $values);


          setDefualtClasss($profile);

          /*
          Load เพือนทั้งหมดขึ้นมาก่อน
          *
          foreach (load_user() as $friend_id => $value){
            if (strcasecmp($account->uid, $friend_id) != 0) {

              $chat_id = generateRandomString(DEFUALT_LENGTH_CHAT_ID);

              
              // เป็นการเพือนให้ตัวเรา
              
              $user_profile = profile2_by_uid_load($account->uid, 'main');

              $friend_values = array();
              $friend_values['field_name'] = 'field_profile_friends'; // field collection name

              $friend_values['field_friend_uid'][LANGUAGE_NONE][0]['value'] = $friend_id;
              $friend_values['field_change_friend_name'][LANGUAGE_NONE][0]['value'] = '';
              $friend_values['field_friend_status'][LANGUAGE_NONE][0]['tid'] = 10;
            
              $field_entity = entity_create('field_collection_item', $friend_values);
              $field_entity->setHostEntity('profile2', $user_profile);
              $field_entity->save();

              //  $field_entity->item_id;

              $values = array(
                "status"       => 'friend',
                "chat_id"      => $chat_id,
                "item_id"      => $field_entity->item_id,
                "create"       => time()
              );
              $firebase->set(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $account->uid . '/friends/' . $friend_id . "/", $values);
              

              
              // เป็นการเพิ่มตัวเรา  ให้เพือน
              
              $friend_profile = profile2_by_uid_load($friend_id, 'main');

              $user_values = array();
              $user_values['field_name'] = 'field_profile_friends'; // field collection name

              $user_values['field_friend_uid'][LANGUAGE_NONE][0]['value'] = $account->uid;
              $user_values['field_change_friend_name'][LANGUAGE_NONE][0]['value'] = '';
              $user_values['field_friend_status'][LANGUAGE_NONE][0]['tid'] = 10;
            
              $field_entity = entity_create('field_collection_item', $user_values);
              $field_entity->setHostEntity('profile2', $friend_profile);
              $field_entity->save();

              $values = array(
                "status"       => 'friend',
                "chat_id"      => $chat_id,
                "item_id"      => $field_entity->item_id,
                "create"       => time()
              );
              $firebase->set(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $friend_id . '/friends/' . $account->uid . "/", $values);
            }
          }  
          // end foreach 
          */
          
        }
        break;
      
      default:
        # code...
        break;
    }
  }else{

      try {
    
        // เกิดจากเราใช้ระบบหลังบ้านเราสร้างขึ้น
        // $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);

        generatorQRCode($account, "ios", BUNDLE_IDENTIFIER);

        $profile = profile2_by_uid_load($account->uid, 'main');

        $my_id = generateMyID($account->uid);

        $my_id_item_id = setDefualtMyID($profile, $my_id);

        $sound_call_waiting_item_id = setDefualtSoundCallWaiting($profile);


        $url_my_qrcode = substr(file_create_url($profile->field_profile_my_qrcode[LANGUAGE_NONE][0]['uri']), strlen($GLOBALS['base_url']));

        // $profile->field_opentok_session_id[LANGUAGE_NONE][0]['value'] = $opentok_session_id;
        // profile2_save($profile);


        $mid_value = array();
        $mid_value[$my_id_item_id] = array("value"     => $my_id, 
                                      "is_edit"   => "1", 
                                      "enabled"   => "1");


        $sound_call_waiting_value = array();
        $sound_call_waiting_value[$sound_call_waiting_item_id] = array("nid"    => "396", 
                                                                       "title"  => "Default Sound Call waiting", 
                                                                       "sound_url"  => "/sites/default/files/sound_call_waiting/sexiest_romantic_mp3.mp3");


        $defualt_profile = (array)get_defualt_picture(30);
        $image_url = substr(file_create_url($defualt_profile['uri']), strlen($GLOBALS['base_url']));

        $defualt_card_background = (array)get_defualt_picture(31);
        $bg_url = substr(file_create_url($defualt_card_background['uri']), strlen($GLOBALS['base_url']));
          
        // add profile ให้กับ user
        $values = array("profiles"=>array(
                            "name"            => $account->name,
                            "url_my_qrcode"   => $url_my_qrcode,
                            "image_url"       => $image_url,
                            "bg_url"          => $bg_url,
                            "my_id"           => $mid_value,
                            "sound_call_waiting"  => $sound_call_waiting_value
                          ));
            
        $firebase->set(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $account->uid . '/', $values);


        setDefualtClasss($profile);

        // Check is Friend ?, if is not is add friend 
        /*
        foreach (load_user() as $friend_id => $value){
          if (strcasecmp($account->uid, $friend_id) != 0) {

            $chat_id = generateRandomString(DEFUALT_LENGTH_CHAT_ID);

            // เป็นการเพือนให้ตัวเรา
            $user_profile = profile2_by_uid_load($account->uid, 'main');

            $friend_values = array();
            $friend_values['field_name'] = 'field_profile_friends'; // field collection name

            $friend_values['field_friend_uid'][LANGUAGE_NONE][0]['value'] = $friend_id;
            $friend_values['field_change_friend_name'][LANGUAGE_NONE][0]['value'] = '';
            $friend_values['field_friend_status'][LANGUAGE_NONE][0]['tid'] = 10;
          
            $field_entity = entity_create('field_collection_item', $friend_values);
            $field_entity->setHostEntity('profile2', $user_profile);
            $field_entity->save();

            $values = array(
              "status"       => 'friend',
              "chat_id"      => $chat_id,
              "item_id"      => $field_entity->item_id,
              "create"       => time()
            );
            $firebase->set(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $account->uid . '/friends/' . $friend_id . "/", $values);
            

            // เป็นการเพิ่มตัวเรา  ให้เพือน
            $friend_profile = profile2_by_uid_load($friend_id, 'main');

            $user_values = array();
            $user_values['field_name'] = 'field_profile_friends'; // field collection name

            $user_values['field_friend_uid'][LANGUAGE_NONE][0]['value'] = $account->uid;
            $user_values['field_change_friend_name'][LANGUAGE_NONE][0]['value'] = '';
            $user_values['field_friend_status'][LANGUAGE_NONE][0]['tid'] = 10;
          
            $field_entity = entity_create('field_collection_item', $user_values);
            $field_entity->setHostEntity('profile2', $friend_profile);
            $field_entity->save();

            $values = array(
              "status"       => 'friend',
              "chat_id"      => $chat_id,
              "item_id"      => $field_entity->item_id,
              "create"       => time()
            );
            $firebase->set(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $friend_id . '/friends/' . $account->uid . "/", $values);
            
          }
        }  
        // end foreach
        */
      } catch (Exception $e) {
          watchdog(TAG, 'Caught exception: %message', array('%message' => $e->getMessage()), WATCHDOG_INFO);
      }
  }

  create_defualt_application($account->uid);
}

/*
 *  hook_user_delete()
 *  this hook triggered when delete user
*/
function idna_user_delete($account) {  
  watchdog('user', 'idna_user_delete : %userid deleted, Firebase Delete User', array('%userid' => $account->uid), WATCHDOG_NOTICE, $link = NULL);

  global $firebase;

  $profile = profile2_by_uid_load($account->uid, 'main');
  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    // Build array of field collection values.
    
    // ดึงเพือนมาทั้งหมด
    $data_item_load = field_collection_item_load($value['value']);

    // load uid ของ friend ที่เป็นเพือนของเรา เพือ่เราจะไปลบเรา ออกจากเพือนด้วย
    $friend_id = $data_item_load->field_friend_uid[LANGUAGE_NONE][0]['value'];
    $fprofile = profile2_by_uid_load($friend_id, 'main');

    if ($fprofile) {
      # code...
      foreach ($fprofile->field_profile_friends[LANGUAGE_NONE] as $fkey => $fvalue) {
        $fdata_item_load = field_collection_item_load($fvalue['value']);

        if($fdata_item_load->field_friend_uid[LANGUAGE_NONE][0]['value'] == $account->uid){
          $wrapper = entity_metadata_wrapper('field_collection_item', $fdata_item_load);    
          entity_delete_multiple('field_collection_item', array($wrapper->getIdentifier()));
          break;
        }
      }

      // ลบ เราที่เป้นเพือน ของเพือน ออกด้วย
      $firebase->delete(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $friend_id . '/friends/' . $account->uid);
    }
  }

  $firebase->delete(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $account->uid);
}

/*
 *  hook_user_update()
 *  this hook triggered when update user
*/
// function idna_user_update(&$edit, $account, $category) {
//   watchdog(TAG, 'User Update = %uid', array('%uid' => $account->uid), WATCHDOG_INFO);
// }

/*
 * function hook_profile2_update($profile) {
 *
*/
function idna_profile2_update($profile) {
  // watchdog(TAG, 'idna_profile2_update => %profile', array('%profile' => serialize($profile)), WATCHDOG_INFO);

  /*
  try {

    // ชื่อ
    $profile_name ="";
    if(isset($profile->field_profile_name)){
      if (!empty($profile->field_profile_name[LANGUAGE_NONE])) {
        $profile_name = $profile->field_profile_name[LANGUAGE_NONE][0]['value'];
      }
    }

    // นามสกุล
    $profile_subname ="";
    if(isset($profile->field_profile_subname)){
      if (!empty($profile->field_profile_subname[LANGUAGE_NONE])) {
        $profile_subname = $profile->field_profile_subname[LANGUAGE_NONE][0]['value'];
      }
    }

    // นามสกุล
    $profile_display_name ="";
    if(isset($profile->field_profile_display_name)){
      if (!empty($profile->field_profile_display_name[LANGUAGE_NONE])) {
        $profile_display_name = $profile->field_profile_display_name[LANGUAGE_NONE][0]['value'];
      }
    }

    // รูปโปรไฟล์
    $profile_picture = array();
    if(isset($profile->field_profile_image)){
      if (!empty($profile->field_profile_image[LANGUAGE_NONE])) {
        $profile_picture = file_load($profile->field_profile_image[LANGUAGE_NONE][0]['fid']);
      }
    }

    // My ID
    $my_id ="";
    if(isset($profile->field_profile_heart_id)){
      if (!empty($profile->field_profile_heart_id[LANGUAGE_NONE])) {
        $my_id = $profile->field_profile_heart_id[LANGUAGE_NONE][0]['value'];
      }
    }

    // เบอร์โทร
    $profile_multi_phone = array();
    if(isset($profile->field_profile_multi_phone)){
      if (!empty($profile->field_profile_multi_phone[LANGUAGE_NONE])) {
        foreach ($profile->field_profile_multi_phone[LANGUAGE_NONE] as $key => $value) {
          $item = field_collection_item_load($value['value']);

          $tmp = array();
          $tmp["name"] = $item->field_phone_number[LANGUAGE_NONE][0]['value'];

          // array_push($profile_multi_phone, $item->field_phone_number[LANGUAGE_NONE][0]['value']);

          $profile_multi_phone[$value['value']] = $tmp;
        }
      }
    }

    // email
    $profile_multi_email = array();
    if(isset($profile->field_profile_multi_email)){
      if (!empty($profile->field_profile_multi_email[LANGUAGE_NONE])) {
        foreach ($profile->field_profile_multi_email[LANGUAGE_NONE] as $key => $value) {
          $item = field_collection_item_load($value['value']);

          $tmp = array();
          $tmp["name"] = $item->field_email_text[LANGUAGE_NONE][0]['value'];

          // array_push($profile_multi_email, $item->field_email_text[LANGUAGE_NONE][0]['value']);
          $profile_multi_email[$value['value']] = $tmp;
        }
      }
    }

    $status_message ="";
    if(isset($profile->field_profile_status_message)){
      if (!empty($profile->field_profile_status_message[LANGUAGE_NONE])) {
        $status_message = $profile->field_profile_status_message[LANGUAGE_NONE][0]['value'];
      }
    }

    // อุปกรณ์ที่ User Access
    $device_access = array();
    if(isset($profile->field_device_access)){
      if (!empty($profile->field_device_access[LANGUAGE_NONE])) {
        foreach ($profile->field_device_access[LANGUAGE_NONE] as $key => $value) {
          $items = field_collection_item_load($value['value']);
          // array_push($device_access, $item->field_email_text[LANGUAGE_NONE][0]['value']);

          // field_udid
          // field_token
          // field_platform
          // field_bundle_identifier

          $item = array();
          $item['bundleidentifier'] =$items->field_bundle_identifier[LANGUAGE_NONE][0]['value'];
          $item['online'] ='1';
          $item['platform'] =$items->field_platform[LANGUAGE_NONE][0]['value'];

          $device_access[$items->field_udid[LANGUAGE_NONE][0]['value']] = $item;
        }
      }
    }

    $contacts = array();
    if(isset($profile->field_profile_friends)){
      if (!empty($profile->field_profile_friends[LANGUAGE_NONE])) {
        foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
          $items = field_collection_item_load($value['value']);
          // array_push($device_access, $item->field_email_text[LANGUAGE_NONE][0]['value']);

          // UID ของเพื่อน                       : field_friend_uid
          // จำนวน Heart ที่เราได้รับจากเพือนคนนี้ : field_heart_receive
          // เวลาที่เราได้รับจากเพือนคนนี้         : field_datetime_receive
          // จำนวน Heart ที่เราส่งถึงเพือนคนนี้    : field_heart_send
          // เวลาที่เราส่งถึงเพือนคนนี้            : field_datetime_send
          // สถานะ เพือน                        : field_heart_friend_status
          // ชื่อเพือน                           : field_friend_name
          // ชื่อของเพื่อนที่เราตั้ง                : field_display_name
          // ปิดเสียง notifications             : field_turn_off_notifications

        
          
          $item = array();
          $item['uid']            = $items->field_friend_uid[LANGUAGE_NONE][0]['value'];
          $item['friend_name']    = $items->field_friend_name[LANGUAGE_NONE][0]['value'];
          $item['default_name']   = $items->field_display_name[LANGUAGE_NONE][0]['value'];
          $item['friend_status']  = $items->field_heart_friend_status[LANGUAGE_NONE][0]['value'];
          $item['status_message'] = $items->field_profile_status_message[LANGUAGE_NONE][0]['value'];
          $item['platform']       = $items->field_platform[LANGUAGE_NONE][0]['value'];
          $item['send']           = $items->field_heart_send[LANGUAGE_NONE][0]['value'];
          $item['receive']        = $items->field_heart_receive[LANGUAGE_NONE][0]['value'];
          $item['notifications_status']  = $items->field_turn_off_notifications[LANGUAGE_NONE][0]['value'];

          // field_turn_off_notifications

          $item['picture'] = array();
          $fprofile = profile2_by_uid_load($items->field_friend_uid[LANGUAGE_NONE][0]['value'], 'main');
          if (isset($fprofile->field_profile_image)) {
            # code...
            if (!empty($fprofile->field_profile_image[LANGUAGE_NONE])) {
              $item['picture'] = $fprofile->field_profile_image[LANGUAGE_NONE][0];
            }
          }
          $contacts[$items->field_friend_uid[LANGUAGE_NONE][0]['value']] = $item;
        }
      }
    }

    $qrcodes = array();
    // My QRCode (Heart App) ios
    $profile_my_qrcode = array();
    if(isset($profile->field_profile_my_qrcode)){
      if (!empty($profile->field_profile_my_qrcode[LANGUAGE_NONE])) {
        $item = array();
        $qrcodes['ios'][str_replace('.', '_', BI_IOS_idna)] = file_load($profile->field_profile_my_qrcode[LANGUAGE_NONE][0]['fid']) ;
      }
    }

    // My QRCode (DNA App) ios 
    $profile_my_qrcode_dna = array();
    if(isset($profile->field_profile_my_qrcode_dna)){
      if (!empty($profile->field_profile_my_qrcode_dna[LANGUAGE_NONE])) {
        $item = array();

        $qrcodes['ios'][str_replace('.', '_', BI_IOS_IDNA)] = file_load($profile->field_profile_my_qrcode_dna[LANGUAGE_NONE][0]['fid']) ;
      }
    }

    // My QRCode Android (Heart app) android
    $profile_my_qrcode_android = array();
    if(isset($profile->field_profile_my_qrcode_android)){
      if (!empty($profile->field_profile_my_qrcode_android[LANGUAGE_NONE])) {
        $item = array();

        $qrcodes['android'][str_replace('.', '_', BI_ANDROID_idna)] = file_load($profile->field_profile_my_qrcode_android[LANGUAGE_NONE][0]['fid']) ;
      }
    }

    // My QRCode DNA Android (DNA App)  
    $profile_my_qrcode_dna_andr = array();
    if(isset($profile->field_profile_my_qrcode_dna_andr)){
      if (!empty($profile->field_profile_my_qrcode_dna_andr[LANGUAGE_NONE])) {
        $item = array();

        $qrcodes['android'][str_replace('.', '_', BI_ANDROID_IDNA)] = file_load($profile->field_profile_my_qrcode_dna_andr[LANGUAGE_NONE][0]['fid']) ;
      }
    }

    // My Application : field_my_application
    $my_applications = array();
    if(isset($profile->field_my_application)){
      if (!empty($profile->field_my_application[LANGUAGE_NONE])) {
        foreach ($profile->field_my_application[LANGUAGE_NONE] as $key => $value) {
          $items = field_collection_item_load($value['value']);
          
          $item = array();
          $item['item_id']        = $value['value'];
          $item['name']           = $items->field_my_app_name[LANGUAGE_NONE][0]['value'];
          $item['category']       = $items->field_my_app_category[LANGUAGE_NONE][0]['tid'];
          $item['picture']        = file_load($items->field_image[LANGUAGE_NONE][0]['fid']);

          
          $posts = array();
          if(isset($items->field_my_app_update)){
            if (!empty($items->field_my_app_update[LANGUAGE_NONE])) {
              foreach ($items->field_my_app_update[LANGUAGE_NONE] as $pkey => $pvalue) {

                  $pitems = field_collection_item_load($pvalue['value']);
                  $posts[$pvalue['value']]["title"]    = $pitems->field_my_app_title[LANGUAGE_NONE][0]['value'];
                  $posts[$pvalue['value']]["message"]  = $pitems->field_my_app_message_udate[LANGUAGE_NONE][0]['value'];
                  $posts[$pvalue['value']]['picture']  = file_load($pitems->field_image[LANGUAGE_NONE][0]['fid']);

                  $comments =array();
                  
                  if(isset($pitems->field_my_app_update_comment)){
                    if (!empty($pitems->field_my_app_update_comment[LANGUAGE_NONE])) {
                      foreach ($pitems->field_my_app_update_comment[LANGUAGE_NONE] as $ckey => $cvalue) {
                          $citems = field_collection_item_load($cvalue['value']);

                          $comments[$cvalue['value']]['message'] = $citems->field_comment_message[LANGUAGE_NONE][0]['value'];
                      }
                    }
                  }
                  
                  $posts[$pvalue['value']]['comments']  = $comments;
              }
            }
          }

          $item['posts']  = $posts;
      
          $my_applications[$value['value']] = $item;
        }
      }
    }
  
    
    $val = array();
    $val['create']        = $profile->created;
    $val['name']          = $profile_name;
    $val['subname']       = $profile_subname;
    $val['display_name']  = $profile_display_name;
    $val['devices']       = $device_access;
    $val['mails']         = $profile_multi_email;
    $val['phones']        = $profile_multi_phone;
    $val['picture']       = $profile_picture;
    $val['my_id']         = $my_id;
    $val['status_message']= $status_message;
    $val['qr']            = $qrcodes;
    $val['contacts']       = $contacts;
    $val['my_applications']       = $my_applications;
    
    $val['update']        = time();

    // $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);
    // $output = $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $profile->uid .'/data/', $val);
   

    watchdog(TAG, 'Firebase hook_node_insert = %qrcodes, %val', array('%qrcodes' => $qrcodes), WATCHDOG_INFO);

    // update image ของเราที่เราเป้นเพื่อน
    // foreach ($contacts as $key => $value) {
    //     $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $key .'/data/friends/' . $profile->uid .'/picture/', $profile_picture);
    // }
  } catch (Exception $e) {
    echo 'Caught exception: ',  $e->getMessage(), "\n";
    watchdog(TAG, 'ERROR hook_node_insert = %node', array('%node' => serialize($e->getMessage())), WATCHDOG_INFO);
  } finally {
    watchdog(TAG, 'Finally hook_node_insert', array(), WATCHDOG_INFO);
  }
  */
}

/*
  hook_profile2_delete
*/
function hook_profile2_delete($profile){

}

/*
hook_node_insert($node)
*/
function idna_node_insert($node){
  /**
   เราต้องเช็ก type = 'slide_store' และ status = 1 เท่านั้นถึงจะ ไป update ที่  firebase
  */
  if ($node->type == 'slide_store' && $node->status == 1) {

    global $firebase;

    $image_url = (array)file_load($node->field_image[LANGUAGE_NONE][0]['fid']);

    $link_url = "";
    if (isset($node->field_slide_url[LANGUAGE_NONE])) {
      $link_url = $node->field_slide_url[LANGUAGE_NONE][0]['value'];
    }

    $items = array("name"       => $node->title,
                   "url_image"  => substr(file_create_url($image_url['uri']), strlen($GLOBALS['base_url'])),
                   "link_url"   => $link_url);

    $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_CENTER_SLIDE . '/' . $node->nid, $items);
  }
}

/*
hook_node_update($node)
*/
function idna_node_update($node){
  /**
   เราต้องเช็ก type = 'slide_store' และ status = 1 เท่านั้นถึงจะ ไป update ที่  firebase
  */
  if ($node->type == 'slide_store') {

    global $firebase;
    if ($node->status == 0) {
      // ต้องลบ slide ออกจาก firebase ด้วย
      $firebase->delete(FIREBASE_DEFAULT_PATH . FIREBASE_CENTER_SLIDE . '/' . $node->nid);
    }else if($node->status == 1){
      // ต้องเพิ่ม slide ออกจาก firebase ด้วย
      $items = array();

      $image_url = (array)file_load($node->field_image[LANGUAGE_NONE][0]['fid']);

      $link_url = "";
      if (isset($node->field_slide_url[LANGUAGE_NONE])) {
        $link_url = $node->field_slide_url[LANGUAGE_NONE][0]['value'];
      }

      $items = array("name"       => $node->title,
                     "url_image"  => substr(file_create_url($image_url['uri']), strlen($GLOBALS['base_url'])),
                     "link_url"   => $link_url);

      $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_CENTER_SLIDE . '/' . $node->nid, $items);
    }
  }
}

/*
 hook_node_delete($node)
*/
function idna_node_delete($node){
  if ($node->type == 'slide_store') {
    global $firebase;
    $firebase->delete(FIREBASE_DEFAULT_PATH . FIREBASE_CENTER_SLIDE . '/' . $node->nid);
  }
}

/*
  hook_field_collection_item_insert
*/
function idna_field_collection_item_insert(FieldCollectionItemEntity $field_collection_item) {
  // watchdog(TAG, 'idna_field_collection_item_insert = %field_collection_item', array('%field_collection_item' => serialize($field_collection_item)), WATCHDOG_INFO);

  // dpm("idna_field_collection_item_insert");

  /*
  switch (mb_strtolower($field_collection_item->op)) {
    case 'save':{
      # code...
      //dpm("idna_field_collection_item_update");
      // dpm($field_collection_item);
      switch ($field_collection_item->field_name) {
        case 'field_my_application':{

          break;
        }
        case 'field_my_app_update':{
          if(!empty($_REQUEST['a_id'])) {
            
          }
          break;
        }
        case 'field_my_app_update_comment':{
          if(!empty($_REQUEST['a_id']) && !empty($_REQUEST['p_id'])) {
            
          }
          break;
        }
        
        default:
          # code...
          break;
      }

      break;
    }
    
    default:
      # code...
      break;
  }
  */
}


/*
  hook_field_collection_item_update
*/
  /*
function idna_field_collection_item_update(FieldCollectionItemEntity $field_collection_item) {
  // watchdog(TAG, 'idna_field_collection_item_update = %field_collection_item', array('%field_collection_item' => serialize($field_collection_item)), WATCHDOG_INFO);

  // dpm("idna_field_collection_item_update");

  switch (mb_strtolower($field_collection_item->op)) {
    case 'save':{
      switch ($field_collection_item->field_name) {
        case 'field_my_application':{

          break;
        }
        case 'field_my_app_update':{
          if(!empty($_REQUEST['a_id'])) {
            
          }
          break;
        }
        case 'field_my_app_update_comment':{
          if(!empty($_REQUEST['a_id']) && !empty($_REQUEST['p_id'])) {
            
          }
          break;
        }
        
        default:
          # code...
          break;
      }
      break;
    }
    
    default:
      # code...
      break;
  }
}
*/

/*
  hook_field_collection_item_delete
*/
function idna_field_collection_item_delete(FieldCollectionItemEntity $field_collection_item) {
  // watchdog(TAG, 'idna_field_collection_item_delete = %field_collection_item, $_REQUEST = %REQUEST', array('%field_collection_item' => serialize($field_collection_item), '%REQUEST' => serialize($_REQUEST)), WATCHDOG_INFO);

  // dpm("idna_field_collection_item_delete");

  switch ($field_collection_item->field_name) {
    case "field_my_application":{
      # My Application

    }
      break;
    case 'field_my_app_update':{
      # Post

    }
      break;
    case 'field_my_app_update_comment':{
      # Comment

    }
      break;
    
    default:
      # code...
      break;
  }
}

/*
 * Implemantation of hook_services_resources()
 * 
 $platform, $bundleidentifier
*/
function idna_services_resources()
{
  $services = array(
    // 
    'login'=>array(
      'create' =>array(
        'help'=>'Services : Login',
        'callback'=>'login',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),
    'logout'=>array(
      'create' =>array(
        'help'=>'Services User Logout',
        'callback'=>'logout',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),
    'annmousu'=>array(
      'create' =>array(
        'help'=>'Services : เป็น services ใช่ login แบบ annmousu(แบบไม่มี user login ใช้ device เป้นตัวยืนยันตัวตน 1 device loigin กี่ครั้งก็จะเป็นข้อมูลชุดเดียวกัน)',
        'callback'=>'annmousu',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),
    'annmousu_register'=>array(
      'create' =>array(
        'help'=>'Services Anonymous Register',
        'callback'=>'annmousu_register',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),
    // 
     'annmousu_verify'=>array(
      'create' =>array(
        'help'=>'Services Anonymous Verify',
        'callback'=>'annmousu_verify',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),
    'voip'=>array(
      'create' =>array(
        'help'=>'Services : Voip',
        'callback'=>'voip',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'twilio_voice_access_token'=>array(
      'create' =>array(
        'help'=>'Services : Twilio Voice token generated(function ทีใช้สำหรับสร้าง token และมีการส่ง voip ไปที่ client ด้วย)',
        'callback'=>'twilio_voice_access_token',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),
    'twilio_room_generation'=>array(
      'create' =>array(
        'help'=>'Services : Twilio token generated(function ทีใช้สำหรับสร้าง token และมีการส่ง voip ไปที่ client ด้วย)',
        'callback'=>'twilio_room_generation',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'twilio'=>array(
      'create' =>array(
        'help'=>'Services : twilio',
        'callback'=>'twilio',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'twilio_voice_accessToken'=>array(
      'create' =>array(
        'help'=>'Services : Twilio Voice AccessToken',
        'callback'=>'twilio_voice_accessToken',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),
    'application_category'=>array(
      'create' =>array(
        'help'=>'Services ดึง Category ของ Application',
        'callback'=>'application_category',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),
    'get_gender'=>array(
      'create' =>array(
        'help'=>'Services ดึง Category ของ Gender',
        'callback'=>'get_gender',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),
    'delete_my_application'=>array(
      'create' =>array(
        'help'=>'Services ลบ My Application',
        'callback'=>'delete_my_application',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'user_friends'=>array(
      'create' =>array(
        'help'=>'Fetch User Profile',
        'callback'=>'user_friends',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
              'name' => 'uid',
              'type' => 'string',
              'description' => 'A valid username',
              'source' => array('data' => 'uid'),
              'optional' => FALSE,
            ),
        ),
      ),
    ),
    'user_friends_heart'=>array(
      'create' =>array(
        'help'=>'Fetch User Friend heart',
        'callback'=>'user_friends_heart',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
              'name' => 'uid',
              'type' => 'string',
              'description' => 'A valid username',
              'source' => array('data' => 'uid'),
              'optional' => FALSE,
            ),
        ),
      ),
    ),
     'list_friends'=>array(
      'create' =>array(
        'help'=>'Fetch List Friends',
        'callback'=>'list_friends',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
              'name' => 'uid',
              'type' => 'string',
              'description' => 'A valid username',
              'source' => array('data' => 'uid'),
              'optional' => FALSE,
            ),
        ),
      ),
    ),

    'user_forgot_password'=>array(
      'create' =>array(
        'help'=>'Services Forgot password.',
        'callback'=>'user_forgot_password',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'add_friend'=>array(
      'create' =>array(
        'help'=>'Services เพิ่ม Friend',
        'callback'=>'add_friend',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),
    // 
    'accept_friend'=>array(
      'create' =>array(
        'help'=>'Services ตอบรับคำเชิญขอเป็นเพือน',
        'callback'=>'accept_friend',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),
    'not_accept_friend'=>array(
      'create' =>array(
        'help'=>'Services ปฎิเสธคำเชิญขอเป็นเพือน',
        'callback'=>'not_accept_friend',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'delete_friend'=>array(
      'create' =>array(
        'help'=>'Services ลบเพือน',
        'callback'=>'delete_friend',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),
     'send_heart_to_friends'=>array(
      'create' =>array(
        'help'=>'Services ส่ง heart to friend',
        'callback'=>'send_heart_to_friends',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'find_friend'=>array(
      'create' =>array(
        'help'=>'ค้นหาเพือนโดย my id, qrcode',
        'callback'=>'find_friend',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'recreate_qrcode'=>array(
      'create' =>array(
        'help'=>'สร้าง qrcode ใหม่ให้กับ user',
        'callback'=>'recreate_qrcode',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'people_you_may_know'=>array(
      'create' =>array(
        'help'=>'Services ค้นหาเพือน ที่คุณอาจรุ็จัก',
        'callback'=>'people_you_may_know',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'shby_class'=>array(
      'create' =>array(
        'help'=>'Services Send Heart by Class',
        'callback'=>'shby_class',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),
    'edit_display_name'=>array(
      'create' =>array(
        'help'=>'Services แก้ไข Display Name ของ User',
        'callback'=>'edit_display_name',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'turn_off_notifications'=>array(
      'create' =>array(
        'help'=>'Services ปิดเสียง  notication โดยสามารถแยกปิดเป็นรายบุคคล',
        'callback'=>'turn_off_notifications',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'hide_friend'=>array(
      'create' =>array(
        'help'=>'Services hide friend โดยสามารถแยกปิดเป็นรายบุคคล',
        'callback'=>'hide_friend',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'set_class_friend'=>array(
      'create' =>array(
        'help'=>'Services Class friend โดยสามารถแยกปิดเป็นรายบุคคล',
        'callback'=>'set_class_friend',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'cancel_wait_to_accept'=>array(
      'create' =>array(
        'help'=>'Services Cancel Wait to Accept โดยสามารถแยกปิดเป็นรายบุคคล',
        'callback'=>'cancel_wait_to_accept',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'edit_friend_display_name'=>array(
      'create' =>array(
        'help'=>'Services แก้ไข Display Name ของ Friend',
        'callback'=>'edit_friend_display_name',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'edit_phone_v1_0'=>array(
      'create' =>array(
        'help'=>'Services แก้ไข Phone v 1.0 ของ User',
        'callback'=>'edit_phone_v1_0',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'edit_phone'=>array(
      'create' =>array(
        'help'=>'Services แก้ไข Phone ของ User',
        'callback'=>'edit_phone',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'edit_multi_phone'=>array(
      'create' =>array(
        'help'=>'Services เพิ่ม, แก้ไข, ลบ Phone ของ User',
        'callback'=>'edit_multi_phone',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'edit_multi_email'=>array(
      'create' =>array(
        'help'=>'Services เพิ่ม, แก้ไข, ลบ Email ของ User',
        'callback'=>'edit_multi_email',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ), 
    'list_default_call_waiting'=>array(
      'create' =>array(
        'help'=>'Services list_default_call_waiting',
        'callback'=>'list_default_call_waiting',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ), 
    'add_call_waiting'=>array(
      'create' =>array(
        'help'=>'Services add_call_waiting',
        'callback'=>'add_call_waiting',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ), 
    'edit_status_message'=>array(
      'create' =>array(
        'help'=>'Services status message ของ User',
        'callback'=>'edit_status_message',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'incoming_call'=>array(
      'create' =>array(
        'help'=>'Services : จะ tigger เมือมีการกดรับสาบ ดังนั้นเราจึงจำเป้นต้องส่ง VoIP (กรณีเราเช้ดได้ว่า user {คนรับสายมีหลาย device})',
        'callback'=>'incoming_call',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

     'outgoing_call'=>array(
      'create' =>array(
        'help'=>'Services : จะ tigger เมือมีการกดรับสาบ ดังนั้นเราจึงจำเป้นต้องส่ง VoIP (กรณีเราเช้ดได้ว่า user {คนรับสายมีหลาย device})',
        'callback'=>'outgoing_call',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

/*
    'set_my_id'=>array(
      'create' =>array(
        'help'=>'Services my id ของ User',
        'callback'=>'set_my_id',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),
    */

    'update_token_notication'=>array(
      'create' =>array(
        'help'=>'Services Set Token notication',
        'callback'=>'update_token_notication',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'update_token_pushkit'=>array(
      'create' =>array(
        'help'=>'Services Set Token Pushkit',
        'callback'=>'update_token_pushkit',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),
    'get_profiles'=>array(
      'create' =>array(
        'help'=>'Services Get profiles ตาม array uid ที่ส่งมา',
        'callback'=>'get_profiles',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),
    'update_my_application_profile'=>array(
      'create' =>array(
        'help'=>'idna Update My Application Profile',
        'callback'=>'update_my_application_profile',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),
    'update_picture_profile'=>array(
      'create' =>array(
        'help'=>'idna Update Profile',
        'callback'=>'update_picture_profile',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),
    'update_picture_bg'=>array(
      'create' =>array(
        'help'=>'idna Update Profile BG',
        'callback'=>'update_picture_bg',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),
    'update_profile'=>array(
      'create' =>array(
        'help'=>'Services แก้ไข Display Name, Status ของ User',
        'callback'=>'update_profile',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'update_device_access'=>array(
      'create' =>array(
        'help'=>'Services แก้ไขข้อมูล device access ซึ่งถูก เรียกใช้งานจาก triggered firebase',
        'callback'=>'update_device_access',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'create_my_card'=>array(
      'create' =>array(
        'help'=>'idna Create My Card',
        'callback'=>'create_my_card',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),
    'create_class'=>array(
      'create' =>array(
        'help'=>'สร้าง Class ของแต่ละ account',
        'callback'=>'create_class',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),

    'create_my_application'=>array(
      'create' =>array(
        'help'=>'idna Create My Application',
        'callback'=>'create_my_application',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),

    'update_my_application_follow'=>array(
      'create' =>array(
        'help'=>'เป้น function ที่ใช้สำหรับ update follow & unfollow ของ application',
        'callback'=>'update_my_application_follow',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),

    'update_my_application_post_like'=>array(
      'create' =>array(
        'help'=>'เป้น function ที่ใช้สำหรับแก้ไข & Update Like ของ Post ของ application การที่เราสร้าง post like เพราะเราต้องการ item_id (Like Nid เพือ่เราจะวิ่งมา update ได้ถูกต้องที่ database)',
        'callback'=>'update_my_application_post_like',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),

    'center_post_comments_like'=>array(
      'create' =>array(
        'help'=>'เป้น function ที่ใช้สำหรับแก้ไข & Update Like comment ของ Post ของ application การที่เราสร้าง comment like เพราะเราต้องการ item_id (Like Nid เพือ่เราจะวิ่งมา update ได้ถูกต้องที่ database)',
        'callback'=>'center_post_comments_like',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),

    'add_comment_parent'=>array(
      'create' =>array(
        'help'=>'function ที่ใช้เพิ่ม comments ทีเป้น parent',
        'callback'=>'add_comment_parent',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),

    'edit_comment_parent'=>array(
      'create' =>array(
        'help'=>'function ที่ใช้แก้ไข comments ทีเป้น parent',
        'callback'=>'edit_comment_parent',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),


    'add_reply_comment_child'=>array(
      'create' =>array(
        'help'=>'function ที่ใช้เพิ่ม reply comments ทีเป้น parent',
        'callback'=>'add_reply_comment_child',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),

    'edit_reply_comment_child'=>array(
      'create' =>array(
        'help'=>'function ที่ใช้แก้ไข reply comments ทีเป้น parent',
        'callback'=>'edit_reply_comment_child',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),

     'center_post_update_comments'=>array(
      'create' =>array(
        'help'=>'Add Post ในส่วนของ My Application',
        'callback'=>'center_post_update_comments',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),

    // add_post
    'add_post'=>array(
      'create' =>array(
        'help'=>'Add Post ในส่วนของ My Application',
        'callback'=>'add_post',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),

     'edit_post'=>array(
      'create' =>array(
        'help'=>'Edit Post ในส่วนของ My Application',
        'callback'=>'edit_post',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),

    'like_post'=>array(
      'create' =>array(
        'help'=>'Like Post ในส่วนของ My Application',
        'callback'=>'like_post',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),


    'AED_post'=>array(
      'create' =>array(
        'help'=>'Add Edit Delete Post ในส่วนของ My Application',
        'callback'=>'AED_post',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),

    'delete_post'=>array(
      'create' =>array(
        'help'=>'Delete Post ในส่วนของ My Application',
        'callback'=>'delete_post',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),

    'center_post_delete_comments'=>array(
      'create' =>array(
        'help'=>'Delete comments',
        'callback'=>'center_post_delete_comments',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),
    // comment_post
    'comment_post'=>array(
      'create' =>array(
        'help'=>'Comment Post ในส่วนของ My Application',
        'callback'=>'comment_post',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),

    'update_new_password'=>array(
      'create' =>array(
        'help'=>'Update New Password',
        'callback'=>'update_new_password',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),

    'idna_fetch_profile'=>array(
      'create' =>array(
        'help'=>'Fetch User Profile',
        'callback'=>'idna_fetch_profile',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
              'name' => 'uid',
              'type' => 'string',
              'description' => 'A valid username',
              'source' => array('data' => 'uid'),
              'optional' => FALSE,
            ),
        ),
      ),
    ),
    'idna_update_profile'=>array(
      'create' =>array(
        'help'=>'idna Update Profile',
        'callback'=>'idna_update_profile',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),

    'get_store'=>array(
      'create' =>array(
        'help'=>'Services Get Store',
        'callback'=>'get_store',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),
    'get_app_detail'=>array(
      'create' =>array(
        'help'=>'Services detail application',
        'callback'=>'get_app_detail',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),
    'create_group_chat'=>array(
      'create' =>array(
        'help'=>'Services สร้าง Group Chat : param uid, name(ชื่อกลุ่ม),image, members(array)',
        'callback'=>'create_group_chat',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),

    'update_group_chat'=>array(
      'create' =>array(
        'help'=>'Services สร้าง Update Data : param uid, group_id, data',
        'callback'=>'update_group_chat',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),
    // 
    'user_for_friend_editupdate'=>array(
      'create' =>array(
        'help'=>'Services แก้ไข, เพิ่มเติม field friend ของ user : param uid, friend_id, data',
        'callback'=>'user_for_friend_editupdate',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),

    'user_for_friend_delete'=>array(
      'create' =>array(
        'help'=>'Services ลบ friend ของ user : param uid, friend_id',
        'callback'=>'user_for_friend_delete',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),

    'delete_group_chat'=>array(
      'create' =>array(
        'help'=>'Services ลบ Group Chat : param uid, group_id',
        'callback'=>'delete_group_chat',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),

    'delete_member_group_chat'=>array(
      'create' =>array(
        'help'=>'Services สร้าง Delete Chat : param uid, group_id',
        'callback'=>'delete_member_group_chat',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),

    'delete_classs'=>array(
      'create' =>array(
        'help'=>'Services ลบ Classs : param uid, group_id',
        'callback'=>'delete_classs',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),
    'update_picture_group'=>array(
      'create' =>array(
        'help'=>'Update Profile Group : group_id, picture',
        'callback'=>'update_picture_group',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),

    'group_invite_new_members'=>array(
      'create' =>array(
        'help'=>'Services การเพิ่ม member ใหม่ใน Group : param uid, group_id, members(array)',
        'callback'=>'group_invite_new_members',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),
  );
  
  return $services;
}

function tw_parentStatusCallback(){

  if (isset($_REQUEST['CallSid'])) {
    $CallSid              = $_REQUEST['CallSid'];
    $ConferenceSid        = $_REQUEST['ConferenceSid'];
    $StatusCallbackEvent  = $_REQUEST['StatusCallbackEvent'];

    // stutus ของ callSid 
    // $StatusCallbackEvent           = $_REQUEST['CallStatus'];

    $query  = new EntityFieldQuery();
    $entities = $query->entityCondition('entity_type', 'field_collection_item')
                  ->entityCondition('bundle', 'field_tw_voice_members')
                  ->fieldCondition('field_tw_voice_members_sid', 'value', $CallSid, '=')
                  ->execute();

    if (!empty($entities['field_collection_item'])) {
      $item_id = array_keys($entities['field_collection_item'])[0];
      // dpm($item_id);

      


      $data_item = field_collection_item_load($item_id);
      if ($data_item) {

        /*
        เป็นการ update ConferenceSid 
        */
        $node  = node_load($data_item->hostEntity()->nid);  
        $node_wrapper = entity_metadata_wrapper('node', $node);
        $node_wrapper->field_tw_voice_conferencesid->set($ConferenceSid);
        $node_wrapper->save();
        /*
        เป็นการ update ConferenceSid 
        */


        $wrapper = entity_metadata_wrapper('field_collection_item', $data_item);
        
        if (strcmp($wrapper->field_tw_voice_members_status->value(), $StatusCallbackEvent) != 0) {
          $wrapper->field_tw_voice_members_status->set($StatusCallbackEvent);
          $wrapper->save();
        }

        $values = array("status" => $StatusCallbackEvent);

        global $firebase;
        $firebase->update(FIREBASE_DEFAULT_PATH . "tw_voice/" . $data_item->hostEntity()->nid . "/members/" . $item_id , $values);

      }
    }

    // watchdog(TAG, 'tw_parentStatusCallback %params | %CallSid | %ConferenceSid | %StatusCallbackEvent | item_id > %item_id | CallStatus > %CallStatus |&| nid > %nid', array('%params'=> serialize($_REQUEST), '%CallSid'=>$CallSid, '%ConferenceSid'=>$ConferenceSid, '%StatusCallbackEvent'=>$StatusCallbackEvent, '%item_id'=> $item_id, '%CallStatus'=>$StatusCallbackEvent, '%nid'=>$data_item->hostEntity()->nid), WATCHDOG_INFO);

  }
}

function tw_clientStatusCallback(){
  watchdog(TAG, 'tw_clientStatusCallback %params', array('%params'=> serialize($_REQUEST)), WATCHDOG_INFO);

}

/*
https://www.twilio.com/docs/api/twiml/play
*/
function tw_waitUrl(){
  $response = new Twilio\Twiml();
  $response->play('http://188.166.208.70/sites/default/files/mp3/y2mate_com_g6dcTw9mGDE.mp3', ['loop' => 2]);
  echo $response;
}

function tw_voice_makeCall() {  
  $callerId = 'client:quick_start';
  $to = isset($_REQUEST["to"]) ? $_REQUEST["to"] : "";

  $response = new Twilio\Twiml();
  if (!isset($to) || empty($to)) {
    $response->say('Congratulations! You have just made your first call! Good bye.');
  } else if (is_numeric($to)) {
    $dial = $response->dial(
      array(
        'callerId' => $callerNumber
      ));
    $dial->number($to);
  } else {
    $dial = $response->dial(
      array(
         'callerId' => $callerId
      ));
    // $dial->client($to);

    $dial->conference("test");

    /*
 $name     = $profile->field_profile_display_name[LANGUAGE_NONE][0]['value'];
          $handle = array(
                  "uid"     => $uid,
                  "name"    => $name,
                  "group_id"=> $group_id
                  );
          apns_voip($uuid, $pushkit_token, $handle);
    */

    $call_sid    = $_REQUEST['CallSid']; 
    $uid        = explode("_", $_REQUEST['uid'])[1];//$_REQUEST['uid'];
    $friend_id  = explode("_", $_REQUEST['friend_id'])[1];//$_REQUEST['friend_id'];
    $group_name = $_REQUEST['group_name'];

    $name     = "Good";//$profile->field_profile_display_name[LANGUAGE_NONE][0]['value'];
    $handle = array(
                  "uid"       => $uid,
                  "name"      => $name,
                  "group_name"=> $group_name,
                  "call_sid"  => $call_sid
                  );
    // apns_voip("uuid", "8597a025aae811c3c007f6c02d0864c99a0e3b081639edd2060c0968aa8b65f2", $handle);
  }

  // print $response;
  echo $response;
}

function tw_voice_makeCall2() {  
  watchdog(TAG, 'tw_voice_makeCall %params', array('%params'=> serialize($_REQUEST)), WATCHDOG_INFO);

    $is_join    = $_REQUEST['is_join'];

    if ($is_join == 1) {
      # code...

      /*
      $twi_call_sid = $_REQUEST['twi_call_sid'];

      $query  = new EntityFieldQuery();
      $entities = $query->entityCondition('entity_type', 'field_collection_item')
                  ->entityCondition('bundle', 'field_tw_voice_members')
                  ->fieldCondition('field_tw_voice_members_sid', 'value', $twi_call_sid, '=')
                  ->execute();

      if (!empty($entities['field_collection_item'])) {
        $item_id    = array_keys($entities['field_collection_item'])[0];
        $data_item  = field_collection_item_load($item_id);

        $node  = node_load($data_item->hostEntity()->nid);
        // $node->title

        $response = new Twilio\Twiml();

        $dial = $response->dial();
        $dial->conference(
          $node->title,
          [ 'statusCallbackEvent' => 'start, end, join, leave, mute, hold',
            'statusCallback' => $GLOBALS['base_url'].'/tw/parentStatusCallback',
            'statusCallbackMethod' => 'POST', 
            'beep' => 'false', 
            // 'waitUrl' => $GLOBALS['base_url'].'/tw/waitUrl', < เสียงรอสาย 
            'startConferenceOnEnter' => 'true', 
            'endConferenceOnExit' => 'true']
        );  
      }
      */

    }else{
      $uid        = explode("_", $_REQUEST['uid'])[1];//$_REQUEST['uid'];
      $friend_id  = explode("_", $_REQUEST['friend_id'])[1];//$_REQUEST['friend_id'];
      $group_name = $_REQUEST['group_name'];
      $uuid       = $_REQUEST['uuid'];
      $callSid    = $_REQUEST['CallSid'];   // id สำหรับอ้างถึง user คนนี้
      

      /*
      $callerId = 'client:' . $uid;
      $to = isset($_POST["to"]) ? $_POST["to"] : "";
      if (!isset($to) || empty($to)) {
        $to = isset($_GET["to"]) ? $_GET["to"] : "";
      }

      // * Use a valid Twilio number by adding to your account via https://www.twilio.com/console/phone-numbers/verified

      $callerNumber = '1234567890';
      $response = new Twilio\Twiml();
      if (!isset($to) || empty($to)) {
        $response->say('Congratulations! You have just made your first call! Good bye.');
      } else if (is_numeric($to)) {
        $dial = $response->dial(
          array(
            'callerId' => $callerNumber
          ));
        $dial->number($to);
      } else {
        */
        
        /*
        $dial = $response->dial(
          array(
             'callerId' => $callerId
          ));
        $dial->client($to);
        */


        /*
          หลักการ
            1. คนทีสร้าง กลุ่ม Conference
            Parent : parentStatusCallback เอาไว้ tag status parent 
            
            2. คนที่ถูกเชิญเข้า กลุ่ม Conference
            Client : clientStatusCallback เอาไว้ tag status ของแต่ละ client 
        */
        $response = new Twilio\Twiml();

        $dial = $response->dial();
        $dial->conference(
          $group_name,
          [ 'statusCallbackEvent' => 'start, end, join, leave, mute, hold',
            'statusCallback' => $GLOBALS['base_url'].'/tw/parentStatusCallback',
            'statusCallbackMethod' => 'POST', 
            'beep' => 'false', 
            /*'waitUrl' => $GLOBALS['base_url'].'/tw/waitUrl', < เสียงรอสาย */
            'startConferenceOnEnter' => 'true', 
            'endConferenceOnExit' => 'true']
        );  



      /*
      ต้องสร้าง firebase ขึ้นมาเพือเก็บ ข้อมูล
      */

      $content_type = "twilio_voice";

      $node = new stdClass();
      $node->title = $group_name;
      $node->type  = $content_type;
      // $node->uid   = $_POST['uid'];
      // $node->field_platform[LANGUAGE_NONE][0]['value']  = $platform;
      // $node->field_pushkit_token[LANGUAGE_NONE][0]['value']    = $token;
      
      $node->language = LANGUAGE_NONE;
      $node->status   = 1;

      $node = node_submit($node);
      node_save($node);

      $values = array();
      $values['field_name'] = 'field_tw_voice_members'; 
      $values['field_tw_voice_members_sid'][LANGUAGE_NONE][0]['value'] = $callSid;
      $values['field_tw_voice_members_uid'][LANGUAGE_NONE][0]['value'] = $uid;
      $values['field_tw_voice_members_type'][LANGUAGE_NONE][0]['value']= "parent";

      $field_entity = entity_create('field_collection_item', $values);
      $field_entity->setHostEntity("node", $node);
      $field_entity->save(); 

      /*
      // 1. Load All node by nid 
      $node = node_load('342');

      $values = array();
      $values['field_name'] = 'field_my_app_update'; 
      $values['field_my_app_title'][LANGUAGE_NONE][0]['value'] = "TEST--";
      $values['field_my_app_message_update'][LANGUAGE_NONE][0]['value'] = "TEST-- u";

      $image_url =  (array)_load_image();

      $values['field_image'][LANGUAGE_NONE][0] = $image_url;

      $field_entity = entity_create('field_collection_item', $values);
      $field_entity->setHostEntity("node", $node);
      $field_entity->save(); 

      dpm($field_entity->item_id);

      $node->nid

      $values = array();
      $values['field_name'] = 'field_my_app_follower'; 
   
      $values['field_my_app_uid_follower'][LANGUAGE_NONE][0]['value'] = $friend_id;
      $values['field_status_follow'][LANGUAGE_NONE][0]['value'] = '1';
      // $val['field_image'][LANGUAGE_NONE][0] = (array)$file;
      
      $field_entity = entity_create('field_collection_item', $values);
      $field_entity->setHostEntity("field_my_app_follower", $data);
      $field_entity->save();  //  ยังมีปัญหาอยู่ ต้องแก้ใขเพราะว่าไม่ได้ return สถานะเอามาว่าสำเร็จหรือเปล่า แต่ save สำเร็จ      
      */

      global $firebase;
      $values = array(
            "group_name" => $group_name,
            "members"    => array($field_entity->item_id=>array(
                                                "type"    => 'parent',
                                                "uid"     => $uid,
                                                "call_sid"=> $callSid
                                              ),
                                  )
          );

      $firebase->update(FIREBASE_DEFAULT_PATH . "tw_voice/" . $node->nid, $values);

      /*
      การโทรหาเพือน โดยผ่าน api ของ twilio
      */
      tw_voice_placeCall($node->nid , $callSid, $_REQUEST['uid'], $_REQUEST['friend_id'], $group_name);
    }

    /*
    // $pushkit_token = "8597a025aae811c3c007f6c02d0864c99a0e3b081639edd2060c0968aa8b65f2";
    // apns_voip($uid, "name", $uuid, $pushkit_token);
    $profile = profile2_by_uid_load($uid, 'main');

    $friend_profile = profile2_by_uid_load($friend_id, 'main');
    if(isset($friend_profile->field_device_access)){
      foreach ($friend_profile->field_device_access[LANGUAGE_NONE] as $key => $value) {
        $item_load = field_collection_item_load($value['value']);

        // $result['pushkit_token']     = $item_load->field_pushkit_token[LANGUAGE_NONE][0]['value'];
        if (strcasecmp($item_load->field_pushkit_token[LANGUAGE_NONE][0]['value'], "") != 0) {
          $pushkit_token = $item_load->field_pushkit_token[LANGUAGE_NONE][0]['value'];


          $name     = $profile->field_profile_display_name[LANGUAGE_NONE][0]['value'];
          $handle = array(
                  "uid"     => $uid,
                  "name"    => $name,
                  "group_id"=> $group_id
                  );
          apns_voip($uuid, $pushkit_token, $handle);

          watchdog(TAG, 'tw_voice_makeCall > pushkit_token : %params | uid = %uid | friend_id = %friend_id', array('%params'=> $pushkit_token, '%uid'=>$uid, '%friend_id' =>$friend_id), WATCHDOG_INFO);
          
        }
      }
    }
    */

    watchdog(TAG, 'tw_voice_makeCall : uid = %uid | friend_id = %friend_id | CallSid = %callSid', array('%uid'=>$uid, '%friend_id' =>$friend_id, '%callSid'=>$callSid), WATCHDOG_INFO);
  // }

  echo $response; 
}

/*
  การโทรหาเพือนโดยใช้ api twilio
*/
function tw_voice_placeCall($nid, $callSid, $caller, $to, $group_name) { 
  $callerId = 'client:' . $caller;
  // $to = isset($_GET["to"]) ? $_GET["to"] : "";
  // if (!isset($to) || empty($to)) {
  //   $to = isset($POST["to"]) ? $_POST["to"] : "";
  // }

  $client = new Twilio\Rest\Client(TWILIO_API_KEY, TWILIO_API_KEY_SECRET, TWILIO_ACCOUNT_SID);

  $call = NULL;
  /*
  if (!isset($to) || empty($to)) {
    $call = $client->calls->create(
      'client:alice', // Call this number
      $callerId,      // From a valid Twilio number
      array(
        'url' => 'https://'.$_SERVER['HTTP_HOST'].'/incoming.php'
      )
    );
  } else if (is_numeric($to)) {
    $call = $client->calls->create(
      $to,           // Call this number
      $callerNumber, // From a valid Twilio number
      array(
        'url' => 'https://'.$_SERVER['HTTP_HOST'].'/incoming.php'
      )
    );
  } else {
    */

  // https://www.twilio.com/docs/api/voice/making-calls#url-parameter
  $call = $client->calls->create(
    'client:'.$to, // Call this number
    $callerId,     // From a valid Twilio number
    array(
      'url' => $GLOBALS['base_url'].'/tw/voice_incoming',
      "statusCallbackMethod" => "POST",
      "statusCallback" => $GLOBALS['base_url'].'/tw/clientStatusCallback',
      "statusCallbackEvent" => array(
          "initiated", "ringing", "answered", "completed"
      )
    )
  );

  $values = array();
  $values['field_name'] = 'field_tw_voice_members'; 
  $values['field_tw_voice_members_sid'][LANGUAGE_NONE][0]['value'] = $call->sid;
  $values['field_tw_voice_members_uid'][LANGUAGE_NONE][0]['value'] = explode("_", $to)[1];
  $values['field_tw_voice_members_type'][LANGUAGE_NONE][0]['value']= "client";

  $field_entity = entity_create('field_collection_item', $values);
  $field_entity->setHostEntity("node", node_load($nid));
  $field_entity->save(); 


  /*ของเพือน*/
  $values = array(
        "type"    => 'client',
        "uid"     => explode("_", $to)[1],
        "call_sid"=> $call->sid
      );

  global $firebase;
  $firebase->update(FIREBASE_DEFAULT_PATH . "tw_voice/" . $nid . "/members/" . $field_entity->item_id , $values);

  /*
      $values = array(
            "caller"      => $uid,
            "uuid"        => $uuid,
            "callSid"     => $callSid,
            "members"     => array()
          );

      // $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid . '/outgoing_call/' . $callSid . "/", $values);
      $firebase->update(FIREBASE_DEFAULT_PATH . "twilio_voice/" . $group_name, $values);
  */

  /*


  array(
        "url" => "http://demo.twilio.com/docs/voice.xml",
        "method" => "GET",
        "statusCallbackMethod" => "POST",
        "statusCallback" => "https://www.myapp.com/events",
        "statusCallbackEvent" => array(
            "initiated", "ringing", "answered", "completed"
        )
    )
  */

    /*

$group_id,
      [ 'statusCallbackEvent' => 'start, end, join, leave, mute, hold',
        'statusCallback' => $GLOBALS['base_url'].'/tw/statusCallback',
        'statusCallbackMethod' => 'POST', 
        'beep' => 'false', 
        // 'waitUrl' => $GLOBALS['base_url'].'/tw/waitUrl', < เสียงรอสาย 
        'startConferenceOnEnter' => 'true', 
        'endConferenceOnExit' => 'true']
    */


  watchdog(TAG, 'tw_voice_placeCall :  caller = %caller | to = %to | sid = %sid', array('%caller'=>$caller, '%to' =>$to, '%sid'=>$call->sid), WATCHDOG_INFO);
  // }

  // print $call;
  // print $call.sid;
}

/*
  callback for tw_voice_placeCall
*/
function tw_voice_incoming(){
  $response = new Twilio\Twiml();
  $response->say('Congratulations! You have received your first inbound call! Good bye.');

  watchdog(TAG, 'tw_voice_incoming : You have received your first inbound call! Good bye | params = %params', array('%params'=> serialize($_REQUEST)), WATCHDOG_INFO);

  print $response;
}

// https://www.twilio.com/console/video/configure
// https://www.twilio.com/docs/api/video/status-callbacks#rooms-status-callback-events

/*
  
  StatusCallbackEvent
  room-created : เริ่มสร้าง room
  track-added  : เริ่ม track add
  participant-connected : สมาชิกเชื่อมต่อเข้า room
  participant-disconnected : เมือสมาชิกยกเลิกการเชื่อมต่อ
  room-ended   : เมือไม่มีสมาชิกใน room แล้ว
*/

function hook_group_rooms(){

  if (isset($_REQUEST['StatusCallbackEvent'])) {
    switch ($_REQUEST['StatusCallbackEvent']) {
      case 'room-created':{
        if (empty($_REQUEST['RoomName']) || empty($_REQUEST['RoomSid'])) {
          return;
        }

        $RoomName = $_REQUEST['RoomName'];
        $RoomSid  = $_REQUEST['RoomSid'];

        $query    = new EntityFieldQuery();
        $entities = $query->entityCondition('entity_type', 'field_collection_item')
                      ->entityCondition('bundle', 'field_twilio_outgoing_call')
                      ->fieldCondition('field_twilio_room_name', 'value', $RoomName, '=')
                      ->execute();

        if (!empty($entities['field_collection_item'])) {
          $item_id = array_keys($entities['field_collection_item'])[0];
          $data_item = field_collection_item_load($item_id);

          $wrapper = entity_metadata_wrapper('field_collection_item', $data_item);
          $wrapper->field_twilio_room_sid->set($RoomSid);
          $wrapper->field_twilio_room_status->set($_REQUEST['StatusCallbackEvent']);
          $wrapper->save();
        }
      }
      break;
      
      case 'room-ended': {
        if (empty($_REQUEST['RoomName']) || empty($_REQUEST['RoomSid'])) {
          return;
        }

        $RoomName = $_REQUEST['RoomName'];
        $RoomSid  = $_REQUEST['RoomSid'];

        global $firebase;

        $query    = new EntityFieldQuery();
        $entities = $query->entityCondition('entity_type', 'field_collection_item')
                      ->entityCondition('bundle', 'field_twilio_outgoing_call')
                      ->fieldCondition('field_twilio_room_name', 'value', $RoomName, '=')
                      ->execute();

        if (!empty($entities['field_collection_item'])) {
          $item_id = array_keys($entities['field_collection_item'])[0];
          $data_item = field_collection_item_load($item_id);


          if(isset($data_item->field_twilio_video_members)){
            foreach ($data_item->field_twilio_video_members[LANGUAGE_NONE] as $k => $v) {

              $video_members_item_load = field_collection_item_load($v['value']);

              // เราจะได้
              $field_twv_members_friend_id = $video_members_item_load->field_twv_members_friend_id[LANGUAGE_NONE][0]['value'];
              $field_twv_members_type = $video_members_item_load->field_twv_members_type[LANGUAGE_NONE][0]['value'];
              $field_twilio_room_uuid = $data_item->field_twilio_room_uuid[LANGUAGE_NONE][0]['value'];

              
              // เราต้อง update incoming_call ของ  field_twv_members_type == 'participant' เท่านั้น
              switch ($field_twv_members_type) {
                case 'participant':{
                    $participant_query    = new EntityFieldQuery();
                    $participant_entities = $participant_query->entityCondition('entity_type', 'field_collection_item')
                                  ->entityCondition('bundle', 'field_twilio_incoming_call')
                                  ->fieldCondition('field_twilio_ic_name', 'value', $RoomName, '=')
                                  ->fieldCondition('field_twilio_room_uuid', 'value', $field_twilio_room_uuid, '=')
                                  ->execute();

                    if (!empty($participant_entities['field_collection_item'])) {
                      $participant_entities_item_id = array_keys($participant_entities['field_collection_item'])[0];

                      $participant_entities_data_item_load = field_collection_item_load($participant_entities_item_id);

                      $participant_item_load_wrapper = entity_metadata_wrapper('field_collection_item', $participant_entities_data_item_load);
                      $participant_item_load_wrapper->field_twilio_ic_status->set($_REQUEST['StatusCallbackEvent']);
                      $participant_item_load_wrapper->save();

                      // watchdog(TAG, 'StatusCallbackEvent > room-ended: %field_twv_members_friend_id - %participant_entities_item_id', array('%field_twv_members_friend_id'=> $field_twv_members_friend_id, '%participant_entities_item_id' => $participant_entities_item_id), WATCHDOG_INFO);


                      // เราต้อง update data firebase ด้วย
                      $value = array(
                                    "status"          => $_REQUEST['StatusCallbackEvent']
                                  );

                      $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $field_twv_members_friend_id .'/incoming_call/'. $field_twilio_room_uuid, $value);
                    }
                  }
                  break;
                
                default:
                  # code...
                  break;
              }
              

              $video_members_item_load_wrapper = entity_metadata_wrapper('field_collection_item', $video_members_item_load);
              $video_members_item_load_wrapper->field_twv_members_status->set($_REQUEST['StatusCallbackEvent']);
              $video_members_item_load_wrapper->save();

            }
          }

          $wrapper = entity_metadata_wrapper('field_collection_item', $data_item);
          $wrapper->field_twilio_room_sid->set($RoomSid);
          $wrapper->field_twilio_room_status->set($_REQUEST['StatusCallbackEvent']);
          $wrapper->save();
        }
      }
      break;

      /*
      เราจะ handle กรณี type user == 'caller' เท่านั้นโดยเราส่ง voip ไปหาเพือนทีเราโทรหาทั้งหมด
      */
      case 'participant-connected': {
          // uid          : ParticipantIdentity
          // room name    : RoomName
          $uid            = $_REQUEST['ParticipantIdentity']; // เป็น uid ของคนที connect เข้าห้อง
          $room_name      = $_REQUEST['RoomName'];            // ชื่อของห้อง
          $ParticipantSid = $_REQUEST['ParticipantSid'];      // id ของ uid คนนี้โดย twilio เป็นคนสร้างให้อัติโนมัติ


          global $firebase;

          
          
          $query    = new EntityFieldQuery();
          $entities = $query->entityCondition('entity_type', 'field_collection_item')
                      ->entityCondition('bundle', 'field_twilio_video_members')
                      ->fieldCondition('field_twv_members_friend_id', 'value', $uid, '=')
                      ->fieldCondition('field_twilio_room_name', 'value', $room_name, '=')
                      ->execute();

          // watchdog(TAG, 'StatusCallbackEvent > xxx: %item_id', array('%item_id'=> serialize($entities)), WATCHDOG_INFO);
          if (!empty($entities['field_collection_item'])) {
            $item_id = array_keys($entities['field_collection_item'])[0];
            // watchdog(TAG, 'StatusCallbackEvent > participant-connected : %item_id', array('%item_id'=> $item_id), WATCHDOG_INFO);



            $data_item = field_collection_item_load($item_id);
            if ($data_item) {
              $type = $data_item->field_twv_members_type[LANGUAGE_NONE][0]['value'];



              switch ($type) {
                case 'caller':{
                  // // $host_entity = $data_item->hostEntity()->item_id;

                  $host_data_item = field_collection_item_load($data_item->hostEntity()->item_id);
                  $uuid  = $host_data_item->field_twilio_room_uuid[LANGUAGE_NONE][0]['value'];
                  
                  
                  // udpate drupal & firebase
                  // udpate status status ให้กับ caller == 'connected' 
                  $wrapper = entity_metadata_wrapper('field_collection_item', $data_item);
                  if(strcasecmp($data_item->field_twv_members_status[LANGUAGE_NONE][0]['value'], 'connected') != 0){
                    $wrapper->field_twv_members_status->set('connected');
                    $wrapper->save();
                  }

                  // เป็นการ update status caller == 'connected' บอกว่ามีการรับสายแล้ว
                  $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $data_item->field_twv_members_friend_id[LANGUAGE_NONE][0]['value'] .'/outgoing_call/'. $uuid .'/members/'. $item_id, array("status"    => 'connected'));

                  // udpate drupal & firebase



                  // Outgoing Call

                  // จะได้ uid ของ caller โดยเราต้องดึงเอาข้อมูล profile
                  $uid_caller     = $data_item->field_twv_members_friend_id[LANGUAGE_NONE][0]['value'];
                  $profile_caller = profile2_by_uid_load($uid_caller, 'main');
                  $name_caller    = $profile_caller->field_profile_display_name[LANGUAGE_NONE][0]['value'];
                  // $uuid_caller    = $profile_caller->field_twilio_room_uuid[LANGUAGE_NONE][0]['value'];

                  // เป็นดึงเอา item parent ของ $data_item แล้วเราก็ load members ทั้งหมด filter เฉพาะ item_member_load_type == 'participant' แล้วก็ load profile ตาม friend_id ทีได้ เพือส่ง voip
                  //
                  // 
                  $data_item_outgoing_call = field_collection_item_load($data_item->hostEntity()->item_id);

                  $room_name = $data_item_outgoing_call->field_twilio_room_name[LANGUAGE_NONE][0]['value'];
                  $has_video = $data_item_outgoing_call->field_twilio_ic_has_video[LANGUAGE_NONE][0]['value'];
                  $uuid      = $data_item_outgoing_call->field_twilio_room_uuid[LANGUAGE_NONE][0]['value'];

                  $query    = new EntityFieldQuery();
                  $entities = $query->entityCondition('entity_type', 'field_collection_item')
                      ->entityCondition('bundle', 'field_twilio_incoming_call')
                      ->fieldCondition('field_twilio_ic_name', 'value', $room_name, '=')
                      ->fieldCondition('field_twilio_room_uuid', 'value', $uuid, '=')
                      ->execute();


                  
                  if (!empty($entities['field_collection_item'])) {
                    return;
                  }

                  // watchdog(TAG, 'StatusCallbackEvent > participant-connected: %StatusCallbackEvent', array('%StatusCallbackEvent'=> $_REQUEST['StatusCallbackEvent']), WATCHDOG_INFO);

                  // 

                  if(isset($data_item_outgoing_call->field_twilio_video_members)){


                    foreach ($data_item_outgoing_call->field_twilio_video_members[LANGUAGE_NONE] as $k => $v) {
                      $item_member_load = field_collection_item_load($v['value']);

                      $item_member_load_type = $item_member_load->field_twv_members_type[LANGUAGE_NONE][0]['value'];


                      switch ($item_member_load_type) {
                        case 'participant':{

                          // เราจะได้ friend id ของเพือนทีเราจะพร้อมส่ง voip ไปหา
                          $field_twv_members_friend_id = $item_member_load->field_twv_members_friend_id[LANGUAGE_NONE][0]['value'];
                          // watchdog(TAG, 'hook_group_rooms - field_twv_members_friend_id: %field_twv_members_friend_id ', array('%field_twv_members_friend_id'=> $field_twv_members_friend_id), WATCHDOG_INFO);


                          //////////////////////// 1 /////////////////////////////
  
                          //   เป็นการดึงข้อมูลของ friend_id ขึ้นมาเพือเอา pushkit_token โดย friend_id 1 id อาจมีมากกว่ากว่า 1 pushkit_token ก้ได้เราจึงต้อง ดึงมาทั้งเพือส่งไปแจ้ง friend_id นั้นๆ

                          $friend_id_token  = create_access_token($field_twv_members_friend_id, $room_name);
                          $friend_profile   = profile2_by_uid_load($field_twv_members_friend_id, 'main');

                          $flag = false;
                          if(isset($friend_profile->field_device_access)){

                            foreach ($friend_profile->field_device_access[LANGUAGE_NONE] as $key => $value) {
                              $item_load = field_collection_item_load($value['value']);

                              

                              if (strcasecmp($item_load->field_pushkit_token[LANGUAGE_NONE][0]['value'], "") != 0 && strcasecmp($item_load->field_is_login[LANGUAGE_NONE][0]['value'], "1") == 0) {

                                $pushkit_token  = $item_load->field_pushkit_token[LANGUAGE_NONE][0]['value'];
                                $action         = 'call';
                                $handle         = array(
                                                  "room_name" => $room_name,
                                                  "uid"       => $uid_caller, 
                                                  "name"      => $name_caller, // ชือของ caller
                                                  "uuid"      => $uuid,
                                                  "token"     => $friend_id_token,
                                                  "has_video" => $has_video,
                                                  "status"    => 'init'
                                                  );

                                try {
                                  apns_voip($pushkit_token, $action, $uuid, $handle, $has_video);  
                                } catch (Exception $e) {
                                  // echo 'Caught exception: ',  $e->getMessage(), "\n";

                                  watchdog(TAG, 'hook_group_rooms 1z : %params', array('%params'=> $e->getMessage()), WATCHDOG_INFO);
                                }
                                $flag = true;
                              }
                            }
                          }



                          if ($flag) {
                            // insert incoming call ให้กับ friend ที่เรา call ไป
                            // $friend_profile
                            $incoming_call = array();
                            $incoming_call['field_name'] = 'field_twilio_incoming_call'; 

                            $incoming_call['field_twilio_ic_name'][LANGUAGE_NONE][0]['value']     = $room_name;
                            $incoming_call['field_twilio_ic_uid'][LANGUAGE_NONE][0]['value']      = $uid_caller;     // uid caller
                            $incoming_call['field_twilio_room_uuid'][LANGUAGE_NONE][0]['value']   = $uuid;
                            $incoming_call['field_twilio_ic_token'][LANGUAGE_NONE][0]['value']    = $friend_id_token;
                            $incoming_call['field_twilio_ic_has_video'][LANGUAGE_NONE][0]['value']= $has_video;
                            $incoming_call['field_twilio_ic_status'][LANGUAGE_NONE][0]['value']   = 'init';

                            $field_entity = entity_create('field_collection_item', $incoming_call);
                            $field_entity->setHostEntity('profile2', $friend_profile);
                            $field_entity->save();

                            $value = array(
                                    "room_name"       => $room_name,
                                    "uid"             => $uid_caller,
                                    "name"            => $name_caller, // ชือของ caller
                                    "uuid"            => $uuid,
                                    "token"           => $friend_id_token,
                                    "has_video"       => $has_video,
                                    "status"          => 'init',
                                    "item_id"         => $field_entity->item_id,
                                    "outgoing_call_item_id" => $data_item->hostEntity()->item_id,
                                    "outgoing_call_member_item_id" => $v['value']
                                  );

                            $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $field_twv_members_friend_id .'/incoming_call/'. $uuid, $value);
                          }
                          //////////////////////// 1 /////////////////////////////
                        }
                          break;
                        
                        default:
                          # code...
                          break;
                      }
                    }
                  }
                  
                  /*
                      if(isset($friend_profile->field_device_access)){
                          foreach ($friend_profile->field_device_access[LANGUAGE_NONE] as $key => $value) {
                            $item_load = field_collection_item_load($value['value']);

                            if (strcasecmp($item_load->field_pushkit_token[LANGUAGE_NONE][0]['value'], "") != 0 && strcasecmp($item_load->field_is_login[LANGUAGE_NONE][0]['value'], "1") == 0) {

                              $pushkit_token  = $item_load->field_pushkit_token[LANGUAGE_NONE][0]['value'];
                              $action         = 'cancel';
                              $handle         = array();
                              $has_video      = "0";

                              watchdog(TAG, 'caller-cancel > participant-disconnected : %item_id', array('%item_id'=>$pushkit_token), WATCHDOG_INFO);
                  
                              // apns_voip($pushkit_token, $action, $uuid, $friend_id_token, $handle, $has_video); 
                              apns_voip($pushkit_token, $action, $uuid,$handle, $has_video);   
                            }
                          }
                        }
                  */

                }
                  break;

                case 'participant':{


                }
                  break;
                
                default:
                  # code...
                  break;
              }

            }
          }
        }
        break;
    }
  }

  /*
  if (isset($_REQUEST['StatusCallbackEvent'])) {
    # code...
    watchdog(TAG, 'StatusCallbackEvent: %param | %StatusCallbackEvent', array('%param'=>serialize($_REQUEST), '%StatusCallbackEvent'=> $_REQUEST['StatusCallbackEvent']), WATCHDOG_INFO);

    switch ($_REQUEST['StatusCallbackEvent']) {
      case 'room-created':{
          $RoomName = $_REQUEST['RoomName'];
          $RoomSid  = $_REQUEST['RoomSid'];

          $query    = new EntityFieldQuery();
          $entities = $query->entityCondition('entity_type', 'field_collection_item')
                        ->entityCondition('bundle', 'field_twilio_outgoing_call')
                        ->fieldCondition('field_twilio_room_name', 'value', $RoomName, '=')
                        ->execute();

          if (!empty($entities['field_collection_item'])) {
            $item_id = array_keys($entities['field_collection_item'])[0];
            $data_item = field_collection_item_load($item_id);

            $wrapper = entity_metadata_wrapper('field_collection_item', $data_item);
            $wrapper->field_twilio_room_sid->set($RoomSid);
            $wrapper->field_twilio_room_status->set($_REQUEST['StatusCallbackEvent']);
            $wrapper->save();
          }
        }
        break;
      case 'room-ended': {
          $RoomName = $_REQUEST['RoomName'];
          $RoomSid  = $_REQUEST['RoomSid'];

          $query    = new EntityFieldQuery();
          $entities = $query->entityCondition('entity_type', 'field_collection_item')
                        ->entityCondition('bundle', 'field_twilio_outgoing_call')
                        ->fieldCondition('field_twilio_room_name', 'value', $RoomName, '=')
                        ->execute();

          if (!empty($entities['field_collection_item'])) {
            $item_id = array_keys($entities['field_collection_item'])[0];
            $data_item = field_collection_item_load($item_id);

            $wrapper = entity_metadata_wrapper('field_collection_item', $data_item);
            $wrapper->field_twilio_room_sid->set($RoomSid);
            $wrapper->field_twilio_room_status->set($_REQUEST['StatusCallbackEvent']);
            $wrapper->save();
          }
        }
        break;
      case 'participant-connected':{
          // uid          : ParticipantIdentity
          // room name    : RoomName
          $uid            = $_REQUEST['ParticipantIdentity'];
          $room_name      = $_REQUEST['RoomName'];
          $ParticipantSid = $_REQUEST['ParticipantSid'];

          $query    = new EntityFieldQuery();
          $entities = $query->entityCondition('entity_type', 'field_collection_item')
                      ->entityCondition('bundle', 'field_twilio_video_members')
                      ->fieldCondition('field_twv_members_friend_id', 'value', $uid, '=')
                      ->fieldCondition('field_twilio_room_name', 'value', $room_name, '=')
                      ->execute();

          // watchdog(TAG, 'StatusCallbackEvent > xxx: %item_id', array('%item_id'=> serialize($entities)), WATCHDOG_INFO);
          if (!empty($entities['field_collection_item'])) {
            $item_id = array_keys($entities['field_collection_item'])[0];
            // watchdog(TAG, 'StatusCallbackEvent > participant-connected : %item_id', array('%item_id'=> $item_id), WATCHDOG_INFO);

            $data_item = field_collection_item_load($item_id);
            if ($data_item) {
              $type = $data_item->field_twv_members_type[LANGUAGE_NONE][0]['value'];

              switch ($type) {
                case 'caller':{
                  
                  // $wrapper = entity_metadata_wrapper('field_collection_item', $data_item);
                  // if(strcasecmp($data_item->field_twilio_ic_device_id[LANGUAGE_NONE][0]['value'], $device_id) != 0){
                  //   $wrapper->field_twilio_ic_device_id->set($device_id);
                  //   $wrapper->save();
                  // }
                  
                }
                  break;

                case 'participant':{


                }
                  break;
                
                default:
                  # code...
                  break;
              }

            }
          }
        }
        break;
      case 'participant-disconnected':{
          //   ParticipantIdentity : uid ของเพือน ยกเลิกเชือมต่อ
          $uid        = $_REQUEST['ParticipantIdentity'];
          $room_name  = $_REQUEST['RoomName'];

          $query    = new EntityFieldQuery();
          $entities = $query->entityCondition('entity_type', 'field_collection_item')
                      ->entityCondition('bundle', 'field_twilio_video_members')
                      ->fieldCondition('field_twv_members_friend_id', 'value', $uid, '=')
                      ->fieldCondition('field_twilio_room_name', 'value', $room_name, '=')
                      ->execute();

          // watchdog(TAG, 'StatusCallbackEvent > xxx: %item_id', array('%item_id'=> serialize($entities)), WATCHDOG_INFO);
          if (!empty($entities['field_collection_item'])) {
            $item_id = array_keys($entities['field_collection_item'])[0];
            // watchdog(TAG, 'StatusCallbackEvent > participant-connected : %item_id', array('%item_id'=> $item_id), WATCHDOG_INFO);

            $data_item = field_collection_item_load($item_id);
            if ($data_item) {
              $type = $data_item->field_twv_members_type[LANGUAGE_NONE][0]['value'];

              switch ($type) {
                case 'caller':{

                  // $host_entity = $data_item->hostEntity()->item_id;
                  // watchdog(TAG, 'caller > participant-disconnected : %item_id', array('%item_id'=>$host_entity), WATCHDOG_INFO);
                  
                  $parent_nid       = $data_item->hostEntity()->item_id;
                  $parent_data_item = field_collection_item_load($parent_nid);

                  // เราจะได้ uuid มาเพือส่ง(Voip)ไปบอก friend บอกว่า cancel call
                  $uuid = $parent_data_item->field_twilio_room_uuid[LANGUAGE_NONE][0]['value'];

                  if (isset($parent_data_item->field_twilio_video_members)) {
                    foreach ($parent_data_item->field_twilio_video_members[LANGUAGE_NONE] as $key => $v) {
                      $item_load = field_collection_item_load($v['value']);
                      if(strcasecmp($item_load->field_twv_members_friend_id[LANGUAGE_NONE][0]['value'], $uid) != 0){
                        // $wrapper = entity_metadata_wrapper('field_collection_item', $item_load);
                        // if(strcasecmp($item_load->field_twilio_ic_device_id[LANGUAGE_NONE][0]['value'], $device_id) != 0){
                        //   $wrapper->field_twilio_ic_device_id->set($device_id);
                        //   $wrapper->save();
                        // }

                        //break;

                        
                        // เราจะได้ friend_id มาเพือส่ง voip ไปบอก cancel call
                        
                        $friend_id = $item_load->field_twv_members_friend_id[LANGUAGE_NONE][0]['value'];
                        $friend_profile = profile2_by_uid_load($friend_id, 'main');
                        if(isset($friend_profile->field_device_access)){
                          foreach ($friend_profile->field_device_access[LANGUAGE_NONE] as $key => $value) {
                            $item_load = field_collection_item_load($value['value']);

                            if (strcasecmp($item_load->field_pushkit_token[LANGUAGE_NONE][0]['value'], "") != 0 && strcasecmp($item_load->field_is_login[LANGUAGE_NONE][0]['value'], "1") == 0) {

                              $pushkit_token  = $item_load->field_pushkit_token[LANGUAGE_NONE][0]['value'];
                              $action         = 'cancel';
                              $handle         = array();
                              $has_video      = "0";

                              watchdog(TAG, 'caller-cancel > participant-disconnected : %item_id', array('%item_id'=>$pushkit_token), WATCHDOG_INFO);
                  
                              // apns_voip($pushkit_token, $action, $uuid, $friend_id_token, $handle, $has_video); 
                              apns_voip($pushkit_token, $action, $uuid,$handle, $has_video);   
                            }
                          }
                        }
                      }
                    }
                  }
                }
                  break;

                case 'participant':{
                  $parent_nid = $data_item->hostEntity()->nid;

                }
                  break;
                
                default:
                  # code...
                  break;
              }

            }
          }

        }
        break;
      default:
        # code...
        break;
    }
  }

  */

  return "hook_group_rooms";
}

function quickstart_twilio_client()
{
  watchdog(TAG, 'quickstart_twilio_client: %params', array('%params'=> serialize($_REQUEST)), WATCHDOG_INFO);
  return "quickstart_twilio_client";
}

function clear_twilio_outgoing_incomming_call()
{

  // $uid = '548489';
  $arr_uid = array('548489', '548490');

  foreach ($arr_uid as $l => $uid) {
    $profile    = profile2_by_uid_load($uid, 'main');

    $field_collection_item_values = array();
    if(isset($profile->field_twilio_outgoing_call)){
      foreach ($profile->field_twilio_outgoing_call[LANGUAGE_NONE] as $key => $value) {
        // $item_load = field_collection_item_load($value['value']);

        // watchdog(TAG, 'idna_user_login header 0009 : %header', array('%header'=> serialize($value['value'])), WATCHDOG_INFO);

        // if (strcasecmp($item_load->field_udid[LANGUAGE_NONE][0]['value'], $getallheaders['udid']) == 0) {
        //   $val = array(
        //       "is_login"  => '0',
        //       "online"    => '0',
        //       "update"    => time()
        //     );
        //   $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid . '/profiles/device_access/' . $value['value'] . "/", $val);

        //   break;
        // }

        // Build array of field collection values.
        $field_collection_item_values[] = $value['value'];

        // Unset them.  
        unset($profile->field_twilio_outgoing_call[LANGUAGE_NONE][$key]);
      }
    }
    // Delete field collection items.
    entity_delete_multiple('field_collection_item', $field_collection_item_values);

    $field_collection_item_values = array();
    if(isset($profile->field_twilio_incoming_call)){
      foreach ($profile->field_twilio_incoming_call[LANGUAGE_NONE] as $key => $value) {
        // $item_load = field_collection_item_load($value['value']);

        // watchdog(TAG, 'idna_user_login header 0009 : %header', array('%header'=> serialize($value['value'])), WATCHDOG_INFO);

        // if (strcasecmp($item_load->field_udid[LANGUAGE_NONE][0]['value'], $getallheaders['udid']) == 0) {
        //   $val = array(
        //       "is_login"  => '0',
        //       "online"    => '0',
        //       "update"    => time()
        //     );
        //   $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid . '/profiles/device_access/' . $value['value'] . "/", $val);

        //   break;
        // }

         // Build array of field collection values.
        $field_collection_item_values[] = $value['value'];

        // Unset them.  
        unset($profile->field_twilio_outgoing_call[LANGUAGE_NONE][$key]);
      }
    }
    entity_delete_multiple('field_collection_item', $field_collection_item_values);
  }

  return 'completed';
}


function test_function()
{

/**
 * Helper method to execute a task.
 */


  // Report all PHP errors
  // error_reporting(-1);
  // Using Autoload all classes are loaded on-demand
  // require_once 'ApnsPHP/Autoload.php';
  // Instantiate a new ApnsPHP_Push object
  
  /*
  $apnsCert = $_SERVER['DOCUMENT_ROOT'] . substr(file_create_url(config_pages_get(CONFIG_PAGES_TYPE, 'field_apn_certificate')['uri']), strlen($GLOBALS['base_url'])); 
  */
  

  try {

    $apnsCert = $_SERVER['DOCUMENT_ROOT'] . substr(file_create_url(config_pages_get(CONFIG_PAGES_TYPE, 'field_apn_certificate')['uri']), strlen($GLOBALS['base_url'])); 

    $push = new ApnsPHP_Push(
      ApnsPHP_Abstract::ENVIRONMENT_SANDBOX,
      $apnsCert
    );

    // Connect to the Apple Push Notification Service
    $push->connect();

    // Instantiate a new Message with a single recipient
    $message = new ApnsPHP_Message('8597a025aae811c3c007f6c02d0864c99a0e3b081639edd2060c0968aa8b65f2');
    // Set a custom identifier. To get back this identifier use the getCustomIdentifier() method
    // over a ApnsPHP_Message object retrieved with the getErrors() message.
    $message->setCustomIdentifier("Message-Badge-3");
    // Set badge icon to "3"
    $message->setBadge(3);
    // Set a simple welcome text
    $message->setText('Hello APNs-enabled device!'); // Hello APNs-enabled device
    // Play the default sound
    $message->setSound();
    // Set a custom property
    $message->setCustomProperty('acme2', array('bang', 'whiz'));
    // Set another custom property
    $message->setCustomProperty('token', 'eyJraWQiOiJKd2VTM0JpZi0xIiwiY3R5IjoidHdpbGlvLWZwYTt2PTEiLCJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiZGlyIn0..3LvaGFpn0G7GhAG2.fcGxUj1aYmN3_INjaU0IV4fZx-z7Uu7axlk65rDX3ByhfiMnYWhrgNmsIUrs7Of0FuUdhsToz3yoTrNgckwPy_h1XAJuE4aKj6xrCjpyu3zgAKexG1E5XFMiOQT0U8rSs3UjCSNzEkJGolTmvqL8nBtyMGkjaL7az_zCGVlckVEc5ghDSNPuIR1Hld6GwTk2XxQ1fmY4_aYrFCIrabaEa9AqBsdm9WP9Vr7jKyG1OvH1nOBJ8lmOxxiG7BLX1ZvulgXZ-_3NVq0JT_kbg5MjWuIrnIxLhvAL4DsPehXzW6MEnM4JXBOiKZYZZGDmc9z4uxGMjjWh9uSuFFvk-CWicxe-U_eupm0_5dPV1L9Y6sOswrRohTUAfzyKQC7opRmL7XzsE2lA2zShEFdrT8KCNoRnwWdZwgfxJO-ghdj5wIhEXdmw-oqgzuaD-WjMFt27HpWr6EAAHZc9sIGrza4AXO-TqnbUeXOWML9aT4XpUSLvOcxCR_QBZszYclMpKAfxTLdEfZ-M5dU06B75Iz-STe8R64iUzeWADihRj92uvYPnfhDmvipS9MitoIay9QVk8YY8_dg1DfNShHg8TC1NqKMPCywRBujrW9Y3pDcIziDDyHjDHxXg_X5-mCaaNJQRK0mkaNiDiQ.bnKXFJTJ3uV44dJlZ9HKfQ');
    // Set the expiry value to 60 seconds
    $message->setExpiry(60);
    // Add the message to the message queue
    $push->add($message);
    // Send all messages in the message queue
    $push->send();
    // Disconnect from the Apple Push Notification Service
    $push->disconnect();
    // Examine the error message container
    $aErrorQueue = $push->getErrors();
    if (!empty($aErrorQueue)) {
      var_dump($aErrorQueue);
    }
  } catch (Exception $e) {
      echo 'Caught exception: ',  $e->getMessage(), "\n";
  } finally {
      echo "First finally.\n";
  }



  // global $firebase;
  // $value = $firebase->get(FIREBASE_DEFAULT_PATH . "tw_voice/" , array('orderBy' => '"status"', 'equalTo' => '"unread"'));


/*
// Your Account Sid and Auth Token from twilio.com/user/account
$sid = "AC94429faf5d0c017fdde2eb9347c699e6";
$token = "e38efbfa073229c83d2259c14a28c645";


// Your Account Sid and Auth Token from twilio.com/user/account
$client = new Client($sid, $token);

// Loop over the list of conferences and echo a property for each one
// foreach ($client->conferences->read() as $conference) {
//     echo "<pre>";
//     var_dump($conference->friendlyName);
//     echo "</pre>";
// }


// CF7f4b2238ae0818c521bb2520cc32df1b
$conference = $client
    ->conferences("CF7f4b2238ae0818c521bb2520cc32df1b")
    ->fetch();

echo "<pre>";
var_dump($conference->friendlyName);
echo "</pre>";

*/


// Get the PHP helper library from https://twilio.com/docs/libraries/php
// require_once '/path/to/vendor/autoload.php'; // Loads the library
// use Twilio\Rest\Client;

// Your Account Sid and Auth Token from twilio.com/user/account
// $sid = "AC94429faf5d0c017fdde2eb9347c699e6";
// $token = "your_auth_token";
// $client =  new Twilio\Rest\Client(TWILIO_API_KEY, TWILIO_API_KEY_SECRET, TWILIO_ACCOUNT_SID);

// Get an object from its sid. If you do not have a sid,
// check out the list resource examples on this page
// $conference = $client
//     ->conferences("CA04a0a616376ae3df691f81436955d86a")
//     ->fetch();

// echo $conference->status;

  // $token = "e1C_IUHJPrc:APA91bFL-FClL1mvRmAMWxPZX91GeCRnoQWht2f5LkJcOaxuOB3uaWxnJZIA83ajyO8ftw-WOxPKeG7PbtXtK3WJRAILQHuFbBZPLVvI1BihOGUozYu17xb01qb1-uWqVQXDcuEzqS6w";

  // // klovers_firebase_push($token, $title="KLOVERS", $message="MESSAGE", $sound = 1, $vibrate = 0)
  // idna_send_push_notification($token);

  /*
$firebase = new Firebase('http://myfirebasename.firebaseio.com', TOKEN);
$users = $firebase->get('/users');
  */

/*
  $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);

  // $users = $firebase->get('/users');

  $count_receive = 0;

  // echo "<pre>";
  $friends = json_decode($firebase->get(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  '101' ."/friends"), true);
  // echo "</pre>";

  foreach ($friends as $key => $value) {
    
    if ($key != 0) {
      
      if (array_key_exists('receive_heart', $value)) {
        $receive_heart = $value['receive_heart'];

        foreach ($receive_heart as $receive_heart_key => $receive_heart_value) {
            if ($receive_heart[$receive_heart_key]["is_read"] == 0) {
              # code...
              $count_receive++;
            }
        }
      }
    }
  }

  echo $count_receive;
  */

  // require_once ( dirname(__FILE__) . '/libraries/py/test.py');

  // $command = escapeshellcmd(dirname(__FILE__) . '/libraries/py/test.py');
  // $output = shell_exec($command);
  // echo "TEST : " . $output;

//   ob_start();
// passthru(dirname(__FILE__) . '/libraries/py/test.py');
// $output = ob_get_clean(); 

// $result = exec("/usr/bin/python2.7 ". dirname(__FILE__) . "/libraries/py/test.py");

//   var_dump($result);


  // $type = 'token_notification';
  // $query = db_select('node', 'n');
  // // $query->join('weight_weights', 'w', 'n.nid = w.entity_id');
  // $query->fields('n', array('nid'))
  //   ->condition('type', $type);
  //   //->orderBy('w.weight', 'ASC');
  // $nids = $query->execute()->fetchCol();
  // $nodes = node_load_multiple($nids);

  // dpm($nodes);

  /*
  // https://api.drupal.org/api/drupal/modules%21node%21node.module/function/node_load_multiple/7.x
  $udid     = "test";

  $token    = "88889990";
  $platform = "ios";

  $content_type = "token_notification";

  $query  = new EntityFieldQuery;
  $result = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', $content_type)
    ->fieldCondition('field_platform', 'value', strtolower($platform), '=')
    ->propertyCondition('title', $udid, '=')
    ->execute();

  // dpm($result['node']);

  if (!empty($result['node'])) {
    $nids = array_keys($result['node']);
    foreach ($nids as $key => $nid) {
      $node = node_load($nid);
      $node_wrapper = entity_metadata_wrapper('node', $node);
      $node_wrapper->field_key_token_notification->set($token);
      $node_wrapper->save();
    }
  }else{

    $node = new stdClass();
    $node->title = $udid;
    $node->type  = $content_type;
    // $node->uid   = $_POST['uid'];
    $node->field_platform[LANGUAGE_NONE][0]['value']  = $platform;
    $node->field_key_token_notification[LANGUAGE_NONE][0]['value']    = $token;
    
    $node->language = LANGUAGE_NONE;
    // $node->revision = 0;

    $node = node_submit($node);
    node_save($node);
  }
  */

  /*
  $filename = '11842419.png';
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'file')
    ->propertyCondition('filename', $filename)
    ->execute();
  // if you are guaranteed there is exactly one result, then:
  $file_object = reset($result['file']);
  $fid = $file_object->fid;
  
  echo "B";
  echo "<pre>";
  var_dump(file_load($fid));
  echo "</pre>";
  */
  /*
  $object_id = "-L51Sg20puIKnbTzOvQO";
  $uid       = "548448";

  $query  = new EntityFieldQuery;
  $output = $query->entityCondition('entity_type', 'field_collection_item')
                  ->entityCondition('bundle', 'field_my_app_follower')
                  ->fieldCondition('field_my_app_follower_object_id', 'value', $object_id, '=')
                  ->fieldCondition('field_my_app_uid_follower', 'value', $uid, '=')
                  ->execute();

  dpm(gettype($output));
  */
  // count

  // $comment = comment_load(11);

  // $data = field_collection_item_load($value['value']);

  // dpm($comment);

  // $wrapper = entity_metadata_wrapper('field_collection_item', $comment);
            
  // $wrapper->field_heart_friend_status->set('2');          
  // $wrapper->save();
  //dpm($wrapper);

  /*
  $comment_id = "10";
  $comment    = comment_load($comment_id);
  $comment_wrapper = entity_metadata_wrapper('comment', $comment);
  // $node_wrapper->field_myfield->set(1)
  // dpm($node_wrapper);
  


  $value['field_name'] = 'field_my_app_post_like'; // field collection name
  $value['field_friend_uid'][LANGUAGE_NONE][0]['value'] = '548415';

  // Create the field collection entry and associate it with the profile
  $field_entity = entity_create('field_collection_item', $value);
  $field_entity->setHostEntity('node', $comment_wrapper);
  $field_entity->save();
  */


  // $node_wrapper->save();

  // dpm($node_wrapper->getIdentifier());

  /*

  // 1. Load All node by nid 
  $node = node_load('342');

  $values = array();
  $values['field_name'] = 'field_my_app_update'; 
  $values['field_my_app_title'][LANGUAGE_NONE][0]['value'] = "TEST--";
  $values['field_my_app_message_update'][LANGUAGE_NONE][0]['value'] = "TEST-- u";

  

  $image_url =  (array)_load_image();

  $values['field_image'][LANGUAGE_NONE][0] = $image_url;

  $field_entity = entity_create('field_collection_item', $values);
  $field_entity->setHostEntity("node", $node);
  $field_entity->save(); 

  dpm($field_entity->item_id);
  */

  // field_my_app_update

  // 2. Get field_my_app_update 
  // foreach ($node->field_my_app_update[LANGUAGE_NONE] as $key => $value) {
  //   $data = field_collection_item_load($value['value']);
    
  //   // 3. Check itme_id == nid_item ?
  //   if($data->item_id == $_POST['nid_item']){
      
      
  //     // 4. Create Comment  
  //     $values = array();
  //     $values['field_name'] = 'field_my_app_update_comment'; 
  //     $values['field_comment_message'][LANGUAGE_NONE][0]['value'] = $_POST['text'];

  //     $entity_data = $field_entity = entity_create('field_collection_item', $values);
  //     $field_entity->setHostEntity("field_my_app_update_comment", $data);
  //     $field_entity->save();  //  ยังมีปัญหาอยู่ ต้องแก้ใขเพราะว่าไม่ได้ return สถานะเอามาว่าสำเร็จหรือเปล่า แต่ save สำเร็จ      
      
  //     break;
  //   }
  // }

  /*
  $query  = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'field_collection_item')
                  ->entityCondition('bundle', 'field_my_app_post_like')
                  ->fieldCondition('field_object_id', 'value', "-L54GRmavi4e83uiGK54", '=')
                  ->execute();

  if (!empty($entities['field_collection_item'])) {
    $item_id = array_keys($entities['field_collection_item'])[0];
    dpm($item_id);
  }
  */

    // load category 342
  // $node = node_load('342');
  // dpm($node->field_my_app_category[LANGUAGE_NONE][0]['tid']);
  // $category  = $item_load->field_my_app_category[LANGUAGE_NONE][0]['tid'];

  // $wrapper = entity_metadata_wrapper('field_collection_item', $item_load);   

  

  // $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_CENTER . $category .'/'. $app_id . '/posts/'. $post_id .'/likes/', $data);
  // 

  //watchdog(TAG, 'update_my_application_post_like category: %category', array('%category'=> $wrapper), WATCHDOG_INFO);

  // $result['result']   = TRUE;
  // $result['param']    = $param;
  // $result['category'] = $item_load->field_my_app_category[LANGUAGE_NONE][0]['tid'];


  // $query  = new EntityFieldQuery();
  //   $entities = $query->entityCondition('entity_type', 'field_collection_item')
  //                 ->entityCondition('bundle', 'field_my_app_follower')
  //                 ->fieldCondition('field_my_app_follower_object_id', 'value', $object_id, '=')
  //                 ->execute();

  /*
  $node = node_load('355');
  // dpm($node->field_my_app_follower[LANGUAGE_NONE]);

  foreach ($node->field_my_app_follower[LANGUAGE_NONE] as $key => $value) {
    //   $data = field_collection_item_load($value['value']);
    // dpm(field_collection_item_load($value['value']));

    $items = field_collection_item_load($value['value']);
          
          // $item = array();
          // $item['item_id']        = $value['value'];
          // $item['owner_id']       = $account->uid;
          // $item['name']           = $items->field_my_app_name[LANGUAGE_NONE][0]['value'];
    // dpm($value['value']);
    // dpm($items->field_my_app_uid_follower[LANGUAGE_NONE][0]['value']);
    entity_delete_multiple('field_collection_item', array($value['value']));
  }
  */

  /*
  global $firebase;

  // $value = $firebase->get($, array('shallow' => 'true')); queryOrderedByChild

  $param = '"548460"';

  // array('orderBy' => '"status"', 'equalTo' => '"unread"')
  
  // dpm(gettype($o));
  // $data = json_decode($json, true);
  

  $json = $firebase->get(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . '/548461/my_applications/355/follows');
  foreach (json_decode($json, true) as $key => $value) {
    // dpm($key);
    dpm($value["uid"]);
    // $json2 = $firebase->get(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . '/548461/my_applications/355/follows/'. $key);
    // $data2 = json_decode($json2, true);
  }

  */

  // dpm(field_collection_item_load("1105076")->hostEntity()->uid);
  // dpm(field_collection_item_load("1105076")->hostEntity()->nid);


  /*
  $data_post = field_collection_item_load("1105490");

  $values = array();
  $values['field_name'] = 'field_my_app_update_comment'; 
  $values['field_friend_uid'][LANGUAGE_NONE][0]['value']        = "1234";
  // $values['field_object_id'][LANGUAGE_NONE][0]['value']         = $object_id;
  $values['field_comment_message'][LANGUAGE_NONE][0]['value']   = "xmessage";
    
  $field_entity = entity_create('field_collection_item', $values);
  // $field_entity->uid = $data["uid"];
  $field_entity->setHostEntity("field_my_app_update_comment", $data_post);
  $field_entity->save();

  dpm($field_entity->item_id);
  */

  //call();
  
  return "_klovers_test";
}

function test_add_data(){

   $uids = db_select('users', 'ur')
        ->fields('ur', array('uid'))
        // ->condition('ur.uid', $uid, '!=')
        // ->condition('ur.uid', 0, '!=')
        // ->condition('ur.uid', 1, '!=')
        ->condition('ur.uid', 0, '!=')
        ->condition('ur.uid', 1, '!=')
        ->execute()
        ->fetchCol();

  $mul_users =  user_load_multiple($uids);

  // $data = array();
  foreach ($mul_users as $account) {
    # code...
    
    // $tmp['uid'] = $account->uid;
    // $tmp['name'] = $account->name;
    // $tmp['mail'] = $account->mail;

    // // $path= file_create_url($uri)  uri
    // if(!is_null($account->picture)){
    //   $tmp['url_image'] = file_create_url($account->picture->uri); 
    // }else{
    //   $tmp['url_image'] = "";
    // }

    /*
    // เป้นการโหลดข้อมูลของ profile user ซึ่งจะได้รู้ว่า friend ของ user
    $user_fields = user_load($account->uid);

    if (!$user_fields->uid) {
      // User is not logged in
      //services_error(t('User is not logged in.'), 406);

      $result['result'] = FALSE;
      $result['output'] = "uid not match is user";

      return $result;
    }
    */

    $profile = profile2_by_uid_load($account->uid, 'main');

    if(isset($profile->field_my_application)){
      if (!empty($profile->field_my_application[LANGUAGE_NONE])) {
        foreach ($profile->field_my_application[LANGUAGE_NONE] as $key => $value) {
          $items = field_collection_item_load($value['value']);
          
          $item = array();
          $item['item_id']        = $value['value'];
          $item['owner_id']       = $account->uid;
          $item['name']           = $items->field_my_app_name[LANGUAGE_NONE][0]['value'];
          $item['category']       = $items->field_my_app_category[LANGUAGE_NONE][0]['tid'];
          $item['picture']        = file_load($items->field_image[LANGUAGE_NONE][0]['fid']);

          /*
          $item = array();
          $item['item_id']        = $field_entity->item_id;
          $item['owner_id']       = $_REQUEST['uid'];
          $item['name']           = $_REQUEST['name'];
          $item['category']       = $_REQUEST['category'];
          $item['picture']        = (array)$file;
          */

          /* 
            เราต้อง ไป add my_application ไว้ที่ firebase ด้วย แยกตาม category
          */
          /*
          $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);
          $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_CENTER . 'data/' . $items->field_my_app_category[LANGUAGE_NONE][0]['tid'] . '/' . $value['value'], $item);
          */

        }
      }
    }

    /*
    // My Application : field_my_application
    $my_applications = array();
    if(isset($profile->field_my_application)){
      if (!empty($profile->field_my_application[LANGUAGE_NONE])) {
        foreach ($profile->field_my_application[LANGUAGE_NONE] as $key => $value) {
          $items = field_collection_item_load($value['value']);
          
          $item = array();
          $item['item_id']        = $value['value'];
          $item['name']           = $items->field_my_app_name[LANGUAGE_NONE][0]['value'];
          $item['category']       = $items->field_my_app_category[LANGUAGE_NONE][0]['tid'];
          $item['picture']        = file_load($items->field_image[LANGUAGE_NONE][0]['fid']);

          $posts = array();
          if(isset($items->field_my_app_update)){
            if (!empty($items->field_my_app_update[LANGUAGE_NONE])) {
              foreach ($items->field_my_app_update[LANGUAGE_NONE] as $pkey => $pvalue) {

                  $pitems = field_collection_item_load($pvalue['value']);
                  $posts[$pvalue['value']]["title"]    = $pitems->field_my_app_title[LANGUAGE_NONE][0]['value'];
                  $posts[$pvalue['value']]["message"]  = $pitems->field_my_app_message_udate[LANGUAGE_NONE][0]['value'];
                  $posts[$pvalue['value']]['picture']  = file_load($pitems->field_image[LANGUAGE_NONE][0]['fid']);

                  $comments =array();
                  
                  if(isset($pitems->field_my_app_update_comment)){
                    if (!empty($pitems->field_my_app_update_comment[LANGUAGE_NONE])) {
                      foreach ($pitems->field_my_app_update_comment[LANGUAGE_NONE] as $ckey => $cvalue) {
                          $citems = field_collection_item_load($cvalue['value']);

                          $comments[$cvalue['value']]['message'] = $citems->field_comment_message[LANGUAGE_NONE][0]['value'];
                      }
                    }
                  }
                  
                  $posts[$pvalue['value']]['comments']  = $comments;
              }
            }
          }

          $item['posts']  = $posts;
      
          $my_applications[$value['value']] = $item;
        }
      }
    }
    */
  }


  return "test_add_data";
}

function test_create_user(){

  /*
// add new user
    $new_user = array(
      'name' => generate_name_annmousu($getallheaders['udid']),
      'pass' => DEFUALT_PASSWORD, // note: do not md5 the password
      'mail' => $getallheaders['udid'] . '@annmousu',
      'status' => 1,
      'init' => $getallheaders['udid'] . '@annmousu',
      'roles' => array(
        DRUPAL_AUTHENTICATED_RID => 'authenticated user'
      ),
    );

    // The first parameter is sent blank so a new user is created.
    user_save('', $new_user); 
  */

  for ($x = 0; $x <= 50000; $x++) {
    $new_user = array(
      'name' => generateRandomString(),
      'pass' => DEFUALT_PASSWORD, // note: do not md5 the password
      'mail' => generateRandomString() . '@annmousu',
      'status' => 1,
      'init' => generateRandomString() . '@annmousu',
      'roles' => array(
        DRUPAL_AUTHENTICATED_RID => 'authenticated user'
      ),
    );

    // The first parameter is sent blank so a new user is created.
    user_save('', $new_user); 
  } 

  return "test_create_user()";
}

function _klovers_mail()
{
    $to = "myemail@domaine.com";
    $subject = "Hi!";
    $body = "Hi,\n\nHow are you?";
    if (mail($to, $subject, $body)) {
            echo("<p>Message successfully sent!</p>");
    } else {
            echo("<p>Message delivery failed...</p>");
    }

  return "_klovers_mail";
}

function ​fetch_data_firebase(){
    global $user;

    /*
    // Firebase increment new HW Login
    $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);

    dpm($firebase->get(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . 267 .'/HW/'));
    dpm(gettype(json_decode($firebase->get(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . 267 .'/HW/'))));

    $obj = json_decode($firebase->get(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . 267 .'/HW/'));
    foreach ($obj as $key => $val) {
      dpm($key);
      dpm($val);
    }
    */

    // KWs2Xl9d9EbW_k_myjm

    return "​fetch_data_firebase";
}

function ​delete_data_firebase()
{

    global $user;
    /*
    // Firebase increment new HW Login
    $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);

    
  

    // dpm($firebase->get(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . 267 .'/HW/'));
    // dpm(gettype(json_decode($firebase->get(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . 267 .'/HW/'))));

    $obj = json_decode($firebase->get(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . 267 .'/HW/'));
    foreach ($obj as $key => $val) {
      dpm($key);
      dpm($val);
      dpm($val->token);
    }

    $firebase->delete(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . 267 .'/HW/-KWs2Xl9d9EbW_k_myjm');

  */
    // KWs2Xl9d9EbW_k_myjm

    return "​fetch_data_firebase";
}

function _klovers_upload_file()
{

  /*
    //Create the directory if it does not already exist, otherwise check the permissions
    $directory = 'public://my-image-folder';
    file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

    //Saves a file to the specified destination and creates a database entry.
    $file = file_save_data($image, 'public://my-image-folder/im.png', FILE_EXISTS_RENAME);

    //Set the file status to permanent so it is not deleted in next cron run
    $file->status = FILE_STATUS_PERMANENT;
    file_save($file);

    dpm((array)$file);
  */

  dpm(___test());
    
  return "_klovers_upload_file";
}

// http://drupal.stackexchange.com/questions/182660/json-fromat-for-user-login-with-email-address-services
/**
 * Implements hook_services_resources_alter().
 */
// function idna_services_resources_alter(&$resources, &$endpoint) {
//   // Override the normal user login callback.
//   if (isset($resources['user']['actions']['login']['callback'])) {
//     $resources['user']['actions']['login']['callback'] = 'idna_services_login';
//   }
// }

/**
 * Replacement callback for the Services user login resource. Optionally use the email address to login.
 *
 * @see _user_resource_login().        
 * @see https://drupal.org/node/1431724
 */
// function idna_services_login() {

//   if (valid_email_address($_REQUEST['username'])){
//     $account = user_load_by_mail($_REQUEST['username']);
//     $username = $account->name;
//   } else {
//     $username = $username_email;
//   }
  
//   //Pass through to the existing services callback
//   module_load_include('inc', 'services', 'resources/user_resource');

//   $result['result']   = TRUE;
//   $result['data']     = _user_resource_login($username, $_REQUEST['password']);
//   return $result;
// }

function logout()
{
  $result = array();

  if (!check_header()) {
    # code...
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  $param = json_decode(file_get_contents('php://input'), true);

  if (empty($param['uid'])) {
    $result['result'] = FALSE;
    $result['message']  = "function : logout, parameter";
    return $result;
  }

  global $firebase;

  $getallheaders = getallheaders();

  $uid = $param['uid'];

  // $profile = profile2_by_uid_load($uid, 'main');

  /*
  $field_collection_item_values = array();

  // http://drupal.stackexchange.com/questions/68765/how-to-properly-delete-a-field-collection
  foreach ($profile->field_device_access[LANGUAGE_NONE] as $key => $value) {
    // Build array of field collection values.

    $data = field_collection_item_load($value['value']);

    // if($value['value'] == 16){ 
    if($data->field_udid[LANGUAGE_NONE][0]['value'] == $getallheaders['udid']){
      // เก็บค่าที่ต้องการลบ
      $field_collection_item_values[] = $value['value'];
    }
  }

  // Delete field collection items.  ลบ
  entity_delete_multiple('field_collection_item', $field_collection_item_values);
  // เก็บ  Device Access แบบใหม่
  */

  // watchdog('user', 'Service : Session closed for %name.', array('%name' => $profile->name));

  // Destroy the current session.
  // module_invoke_all('user_logout', $profile);

  /////////--------

  /*
  เป้น การ load friends ของ uid ขึ้นมาเช็ดว่า friend_id เป้น friend เราอยุ่หรือไม่
  */
  $profile = profile2_by_uid_load($uid, 'main');

  if(isset($profile->field_device_access)){
    foreach ($profile->field_device_access[LANGUAGE_NONE] as $key => $value) {
      $item_load = field_collection_item_load($value['value']);

      // watchdog(TAG, 'idna_user_login header 0009 : %header', array('%header'=> serialize($value['value'])), WATCHDOG_INFO);

      if (strcasecmp($item_load->field_udid[LANGUAGE_NONE][0]['value'], $getallheaders['udid']) == 0) {
        $val = array(
            "is_login"  => '0',
            "online"    => '0',
            "update"    => time()
          );
        $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid . '/profiles/device_access/' . $value['value'] . "/", $val);

        break;
      }
    }
  }
  /////////--------


  $user=user_load($uid);

  // watchdog(TAG, 'TEST : %account', array('%account'=> serialize($profile)), WATCHDOG_INFO);
  // watchdog('user', 'Session closed for %name.', array('%name' => $user->name));

  // drupal_session_destroy_uid($uid);
  // module_invoke_all('user_logout', $profile);

  $original_session_state = drupal_save_session();
  drupal_save_session(TRUE);

  // Destroy the current session.
  module_invoke_all('user_logout', $user);
  session_destroy();

  // Load the anonymous user.
  // $user = drupal_anonymous_user();
  drupal_anonymous_user();

  drupal_save_session($original_session_state);

  // session_destroy();
  /*
  $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);
  // $firebase->delete(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $_REQUEST['uid'] .'/profile/' . $_REQUEST['platform'] .'/'. str_replace('.', '_', $_REQUEST['bundleidentifier']) .'/hw/' . $_REQUEST['udid']);

  $firebase->delete(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $_REQUEST['uid'] .'/data/devices/' . $_REQUEST['udid']);
  */

  $result['result'] = TRUE;

  return $result;
}

function login(){
  $result = array();

  if (!check_header()) {
    # code...
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  $param = json_decode(file_get_contents('php://input'), true);

  if (empty($param['name']) || empty($param['pass'])) {
    $result['result'] = FALSE;
    $result['message']  = "function : login, parameter";
    $result['param']  = $param;
    return $result;
  }

  $name = $param['name'];
  $pass = $param['pass'];
  
  module_load_include('inc', 'services', 'resources/user_resource');

  $result['result']         = TRUE;
  $result['data']           = _user_resource_login($name, $pass);

  return $result;
}

function annmousu(){
  $result = array();

  if (!check_header()) {
    # code...
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  $getallheaders = getallheaders();

  // เช็กว่ามี  user ที่มี email แล้วหรือไม
  if (user_load_by_mail($getallheaders['udid'] . '@annmousu') == "") {
    // add new user
    $new_user = array(
      'name' => generate_name_annmousu($getallheaders['udid']),
      'pass' => DEFUALT_PASSWORD, // note: do not md5 the password
      'mail' => $getallheaders['udid'] . '@annmousu',
      'status' => 1,
      'init' => $getallheaders['udid'] . '@annmousu',
      'roles' => array(
        DRUPAL_AUTHENTICATED_RID => 'authenticated user'
      ),
    );

    // The first parameter is sent blank so a new user is created.
    user_save('', $new_user); 
  }
  
  module_load_include('inc', 'services', 'resources/user_resource');

  $result['result']   = TRUE;
  $result['data']     = _user_resource_login(generate_name_annmousu($getallheaders['udid']), DEFUALT_PASSWORD);

  return $result;
}

// function onDataLogin($data){

//   if (property_exists($data, 'user')) {
//     $uid = $data->user->uid;


//   }
// }

function annmousu_register(){

  $result = array();

  if(empty($_POST['email']) || empty($_POST['UDID'])) {
    $result['result']   = FALSE;
    $result['function'] = "Email | UDID empty.";
    return $result;
  }

  // เช็กว่ามี  user ที่มี email แล้วหรือไม
  /*
  กรณีที่ email ยังไม่ถูกนำไปใช้งานจะสามารถ register ได้ตลอด โดยระบบจะ update เฉพาะ verify key เท่านั้น
  */
  if (user_load_by_mail($_POST['email']) == "") {

    $content_type  = 'annmousu_verify_token';
    try {

      $output = db_select('node', 'n')
          ->fields('n', array('nid', 'title'))
          ->condition('title', generate_name_annmousu($_POST['UDID']), '=')
          ->execute()
          ->fetchCol();
    
      $verify_key = generateKey();

      if (empty($output)) {
        # code...
        $result['status'] = 'add';

        $node = new stdClass();
        $node->title = generate_name_annmousu($_POST['UDID']);
        $node->type  = $content_type;
        $node->body[LANGUAGE_NONE][0]['value']  = "";
        $node->field_verify_token[LANGUAGE_NONE][0]['value']  = $_POST['UDID'];
        $node->field_verify_key[LANGUAGE_NONE][0]['value']    = $verify_key;
        
        $node->language = LANGUAGE_NONE;
        $node->revision = 0;

        $node = node_submit($node);
        node_save($node);
      }else{        
        $result['status'] = 'update';

        // การ update verify key
        $node = node_load($output[0]);
   
        $node_wrapper = entity_metadata_wrapper('node', $node);
        $node_wrapper->field_verify_key->set($verify_key);


        $node_wrapper->save();

      }
    } catch (Exception $e) {
        $result['result']   = FALSE;
        $result['message']   = $e->getMessage();
        return $result;
    }

    idna_mail_send("contact_message", $_POST['email'], '', $verify_key);

    $result['result']   = TRUE;
  }else{
    $result['result']   = FALSE;
    $result['message']  = "Email duplicate.";
  }

  return $result;
}

function annmousu_verify(){
  $result = array();

  if(empty($_POST['UDID']) || empty($_POST['key']) || empty($_POST['email'])) {
    $result['result']   = FALSE;
    $result['function'] = "UDID | KEY | email empty.";
    return $result;
  }

  try {

    $query = db_select('node', 'n');
    $query->leftJoin('field_data_field_verify_key', 'k', 'k.entity_id = n.nid');
    $query->leftJoin('field_data_field_verify_token', 't', 't.entity_id = n.nid');

    $query->fields('n', array('nid'));
    $query->fields('k', array('field_verify_key_value'));
    $query->fields('t', array('field_verify_token_value'));
    $query->condition('n.title', generate_name_annmousu($_POST['UDID']), '=');
    $query->condition('k.field_verify_key_value', $_POST['key'], '=');

    $output = $query->execute();
 
    if ($output->rowCount() > 0) {
      # code...
      while($row = $output->fetchAssoc())
      {
        // $result['data']= $row['nid'];


        // #1
        // load user object ขึ้นมาเพือแก้ไข mail
        $existingUser = user_load_by_mail($_POST['UDID'] . '@annmousu');
        // update some user property

        // กรณี user ยังไม่ได้ตั้งชือใหม่ เราจะกำหนดให้ชือเท่ากัน email
        if (strcasecmp($existingUser->name, $_POST['UDID'] . '@annmousu') != 0) { // 
          # code...
          $existingUser->name = $_POST['email'];
        }

        $existingUser->mail = $_POST['email'];
        $existingUser->pass = $_POST['key'];

        // save existing user
        user_save((object) array('uid' => $existingUser->uid), (array) $existingUser);

        // #2
        // เราต้องลบ ข้อมูล verify token เพราะเราได้ verify ได้ถุกต้องแล้ว
        node_delete($row['nid']);

        // #3
        /*
        // เราต้องไป update ที่ firebase
        $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);
        // update email
        $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $existingUser->uid . "/data/profile/", array("mail"   =>$_POST['email']));
        */



        // <!---------- update email ที่ drupal 

        // #4
        // เป้นการโหลดข้อมูลของ  user uid เพอื่จะ แก้ไข สถานะ เพือน (field_heart_friend_status = 1)
        $user_fields = user_load($existingUser->uid);

        if (!$user_fields->uid) {
          // User is not logged in
          //services_error(t('User is not logged in.'), 406);

          $result['result'] = FALSE;
          $result['output'] = "uid not match is user";

          return $result;
        }

        $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);

        // Load Profile ขึ้นมาเพือจะทำการแก้ไข
        $profile =  profile2_load($profile2_load_by_user['main']->pid);

        foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
          // Build array of field collection values.

          $data = field_collection_item_load($value['value']);

          // $uid_friends[] = $data->field_friend_uid[LANGUAGE_NONE][0]['value'];

          // if($value['value'] == 16){
          /*if($data->field_friend_uid[LANGUAGE_NONE][0]['value'] == $_POST['uid_friend']){
            $wrapper = entity_metadata_wrapper('field_collection_item', $data);
            
            // $value_update = $data->field_heart_receive[LANGUAGE_NONE][0]['value'] + 1;

            // watchdog(TAG, 'Update Heart = %edit', array('%edit' => $value_update), WATCHDOG_INFO);

            //Update value
            $wrapper->field_heart_friend_status->set('2');
            $wrapper->save();
            */


          /*
            // Firebase increment new HW Login
            $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);

            $data_update = array(
              "mail"   =>$_POST['email'],
              "update"  => time()
            );

            $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $data->field_friend_uid[LANGUAGE_NONE][0]['value'] ."/friends/" . $existingUser->uid . "/", $data_update);
            */
          }

        // }

        // ------------> update email ที่ drupal


        $result['result']   = TRUE;
        break;
      }
    }else{
      $result['result']   = FALSE;
      $result['message'] = "Code verify no match.";
    }
  } catch (Exception $e) {
    $result['result']   = FALSE;
    $result['message']   = $e->getMessage();
    return $result;
  }
  return $result;
}

function twilio_voice_accessToken(){
  // watchdog(TAG, 'twilio_voice_accessToken: %param', array('%param'=>serialize($_REQUEST)), WATCHDOG_INFO);

  $result = array();

  // Use identity and room from query string if provided
  /*
  $identity = isset($_GET["identity"]) ? $_GET["identity"] : NULL;
  if (!isset($identity) || empty($identity)) {
    $identity = isset($_POST["identity"]) ? $_POST["identity"] : "alice";
  }
  */

/*
  if (!check_header()) {
    # code...
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }
  */

  $param = json_decode(file_get_contents('php://input'), true);

  // video
  if (empty($param['identity'])) {
    $result['result'] = FALSE;
    $result['message']  = "function : twilio_voice_accessToken, parameter";
    return $result;
  }

  $identity = $param['identity'];

  /*

    define("TWILIO_ACCOUNT_SID", "AC94429faf5d0c017fdde2eb9347c699e6");
    define("TWILIO_API_KEY", "SK5b11e67487ccf92915a1ede27b640dfa");
    define("TWILIO_API_KEY_SECRET", "QuGFTh7pvRKUV9VeFwC6FmIoGjXiFwcC");
    define("TWILIO_PUSH_CREDENTIAL_SID", "CR6279daf7d3f608853b78f863fd7dc995");
    define("TWILIO_APP_SID", "AP30c22ca482e1db49ceac6cd2ff19c37c");
  */


  // Create access token, which we will serialize and send to the client
  $token = new AccessToken(TWILIO_ACCOUNT_SID, 
                           TWILIO_API_KEY, 
                           TWILIO_API_KEY_SECRET, 
                           3600 * 3, 
                           $identity
  );

  // Grant access to Video
  $grant = new VoiceGrant();
  $grant->setOutgoingApplicationSid(TWILIO_APP_SID);
  $grant->setPushCredentialSid(TWILIO_PUSH_CREDENTIAL_SID);
  $token->addGrant($grant);

  // echo $token->toJWT();

  $result['result'] = TRUE;
  $result['token']  = $token->toJWT();
  $result['$TWILIO_ACCOUNT_SID'] = serialize(TWILIO_ACCOUNT_SID);
  $result['$TWILIO_API_KEY'] = serialize(TWILIO_API_KEY);
  $result['$TWILIO_API_KEY_SECRET'] = serialize(TWILIO_API_KEY_SECRET);
  $result['$TWILIO_APP_SID'] = serialize(TWILIO_APP_SID);
  $result['$TWILIO_PUSH_CREDENTIAL_SID'] = serialize(TWILIO_PUSH_CREDENTIAL_SID);
  return $result;
}

function twilio_voice_access_token(){
  $result = array();
  
  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  if (empty($_REQUEST['uid']) || empty($_REQUEST['uuid']) || empty($_REQUEST['friend_id'])) {
    $result['result'] = FALSE;
    $result['message']  = "function : twilio_room_generation, parameter";
    return $result;
  }

  global $firebase;

  $uid        = $_REQUEST['uid']; 
  $uuid       = $_REQUEST['uuid'];
  $friend_id  = $_REQUEST['friend_id'];
  $has_video  = $_REQUEST['has_video'];

  $profile    = profile2_by_uid_load($uid, 'main');
  $name       = $profile->field_profile_display_name[LANGUAGE_NONE][0]['value'];

  $members    = array();
  $room_name  = generateRandomString();

  //////////////////////// 1 /////////////////////////////
  $outgoing_call = array();
  $outgoing_call['field_name'] = 'field_twilio_outgoing_call'; 

  $outgoing_call['field_twilio_room_status'][LANGUAGE_NONE][0]['value']   = 'init';
  $outgoing_call['field_twilio_room_type'][LANGUAGE_NONE][0]['value']     = 'private';
  $outgoing_call['field_twilio_room_name'][LANGUAGE_NONE][0]['value']     = $room_name;
  $outgoing_call['field_twilio_room_uuid'][LANGUAGE_NONE][0]['value']     = $uuid;
  $outgoing_call['field_twilio_ic_has_video'][LANGUAGE_NONE][0]['value']  = $has_video;

  $field_entity = entity_create('field_collection_item', $outgoing_call);
  $field_entity->setHostEntity('profile2', $profile);
  $field_entity->save();

  $outgoing_call_item_id = $field_entity->item_id;

  // เราจะ insert members uid{caller} ลงไปคนแรก
  // $data = field_collection_item_load($field_entity->item_id);
  $value_video_member_1 = array();
  $value_video_member_1['field_name'] = 'field_twilio_video_members'; 
  $value_video_member_1['field_twv_members_friend_id'][LANGUAGE_NONE][0]['value'] = $uid;
  $value_video_member_1['field_twv_members_type'][LANGUAGE_NONE][0]['value']      = "caller";
  $value_video_member_1['field_twv_members_uid_invite'][LANGUAGE_NONE][0]['value']= $uid;
  $value_video_member_1['field_twilio_room_name'][LANGUAGE_NONE][0]['value']      = $room_name;
  $value_video_member_1['field_twilio_ic_device_id'][LANGUAGE_NONE][0]['value']   = getallheaders()['udid'];
  $value_video_member_1['field_twv_members_status'][LANGUAGE_NONE][0]['value']    = 'init';

  $field_entity = entity_create('field_collection_item', $value_video_member_1);
  $field_entity->setHostEntity("field_twilio_video_members", field_collection_item_load($outgoing_call_item_id));
  $field_entity->save(); 

  $members[$field_entity->item_id] = array(
                  "friend_id" =>$uid,
                  "type"      =>"caller",
                  "uid_invite"=>$uid,
                  "room_name" =>$room_name,
                  "status"    =>'init',
                  "device_id" =>getallheaders()['udid']
                );

  $value_video_member_2 = array();
  $value_video_member_2['field_name'] = 'field_twilio_video_members'; 
  $value_video_member_2['field_twv_members_friend_id'][LANGUAGE_NONE][0]['value'] = $friend_id;
  $value_video_member_2['field_twv_members_type'][LANGUAGE_NONE][0]['value']      = "participant";
  $value_video_member_2['field_twv_members_uid_invite'][LANGUAGE_NONE][0]['value']= $uid;
  $value_video_member_2['field_twilio_room_name'][LANGUAGE_NONE][0]['value']      = $room_name;
  $value_video_member_2['field_twv_members_status'][LANGUAGE_NONE][0]['value']    = 'init';

  $field_entity = entity_create('field_collection_item', $value_video_member_2);
  $field_entity->setHostEntity("field_twilio_video_members", field_collection_item_load($outgoing_call_item_id));
  $field_entity->save(); 

  $members[$field_entity->item_id] = array(
                  "friend_id" =>$friend_id,
                  "type"      =>"participant",
                  "uid_invite"=>$uid,
                  "status"    =>'init',
                  "room_name" =>$room_name
                );


  /////////////////////////////// Update Data to Firebase ///////////////////////////////
  $value = array(
              "room_name"    => $room_name,
              "type"         => 'private',
              "has_video"    => $has_video,
              "outgoing_call_item_id" => $outgoing_call_item_id,
              "members"      => $members
            );
  $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid .'/outgoing_call/'. $uuid, $value);
  /////////////////////////////// Update Data to Firebase ///////////////////////////////

  /*
  $members[$field_entity->item_id] = array(
                  "friend_id" =>$uid,
                  "type"      =>"caller",
                  "uid_invite"=>$uid,
                  "room_name" =>$room_name,
                  "status"    =>'invite',
                  "device_id" =>getallheaders()['udid']
                );
  
  //////////////////////// 1 /////////////////////////////

  //////////////////////// 2 /////////////////////////////
  
  //   เป็นการดึงข้อมูลของ friend_id ขึ้นมาเพือเอา pushkit_token โดย friend_id 1 id อาจมีมากกว่ากว่า 1 pushkit_token ก้ได้เราจึงต้อง ดึงมาทั้งเพือส่งไปแจ้ง friend_id นั้นๆ
  
  $friend_id_token      = create_access_token($friend_id, $room_name);
  $friend_profile = profile2_by_uid_load($friend_id, 'main');

  $flag = false;
  if(isset($friend_profile->field_device_access)){

    foreach ($friend_profile->field_device_access[LANGUAGE_NONE] as $key => $value) {
      $item_load = field_collection_item_load($value['value']);

      if (strcasecmp($item_load->field_pushkit_token[LANGUAGE_NONE][0]['value'], "") != 0 && strcasecmp($item_load->field_is_login[LANGUAGE_NONE][0]['value'], "1") == 0) {

        $pushkit_token  = $item_load->field_pushkit_token[LANGUAGE_NONE][0]['value'];
        $action         = 'call';
        $handle         = array(
                          "uid"     => $uid, 
                          "name"    => $name, // ชือของ caller
                          "token"   => $friend_id_token,
                          "room_name"=>$room_name
                          );
        apns_voip($pushkit_token, $action, $uuid, $handle, "0");  
        $flag = true;
      }
    }
  }
  //////////////////////// 2 /////////////////////////////

  if ($flag) {
    $value_video_member = array();
    $value_video_member['field_name'] = 'field_twilio_video_members'; 
    $value_video_member['field_twv_members_friend_id'][LANGUAGE_NONE][0]['value'] = $friend_id;
    $value_video_member['field_twv_members_type'][LANGUAGE_NONE][0]['value']      = "participant";
    $value_video_member['field_twv_members_uid_invite'][LANGUAGE_NONE][0]['value']= $uid;
    $value_video_member['field_twilio_room_name'][LANGUAGE_NONE][0]['value']      = $room_name;
    $value_video_member['field_twv_members_status'][LANGUAGE_NONE][0]['value']    = 'init';

    $field_entity = entity_create('field_collection_item', $value_video_member);
    $field_entity->setHostEntity("field_twilio_video_members", field_collection_item_load($outgoing_call_item_id));
    $field_entity->save(); 

    $members[$field_entity->item_id] = array(
                "friend_id" =>$friend_id,
                "type"      =>"participant",
                "uid_invite"=>$uid,
                "status"    =>'invite',
                "room_name" =>$room_name
              );

    // insert incoming call ให้กับ friend ที่เรา call ไป
    // $friend_profile
    $incoming_call = array();
    $incoming_call['field_name'] = 'field_twilio_incoming_call'; 

    $incoming_call['field_twilio_ic_name'][LANGUAGE_NONE][0]['value']     = $room_name;
    $incoming_call['field_twilio_ic_uid'][LANGUAGE_NONE][0]['value']      = $uid;
    $incoming_call['field_twilio_room_uuid'][LANGUAGE_NONE][0]['value']   = $uuid;
    $incoming_call['field_twilio_ic_token'][LANGUAGE_NONE][0]['value']    = $friend_id_token;
    $incoming_call['field_twilio_ic_has_video'][LANGUAGE_NONE][0]['value']= $has_video;

    $field_entity = entity_create('field_collection_item', $incoming_call);
    $field_entity->setHostEntity('profile2', $friend_profile);
    $field_entity->save();
    

    
    $value = array(
            "twilio_room_name"=> $room_name,
            "uid"             => $uid,
            "uuid"            => $uuid,
            "token"           => $friend_id_token,
            "has_video"       => $has_video
          );
    $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $friend_id .'/incoming_call/'. $field_entity->item_id, $value);
    

  }
  // $flag = false;
  // กรณีเราจำเป้นต้องส่ง sms ไปยังเบอโทร friend id นี้
  
  /////////////////////////////// Send Voip to Friend //////////////////////////////////

  /////////////////////////////// Update Data to Firebase ///////////////////////////////
  
  $value = array(
              "room_name"   => $room_name,
              "uuid"        => $uuid,
              "type"        => $type,
              "has_video"   => $has_video,
              "members"     => $members
            );
  $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid .'/outgoing_call/'. $item_id, $value);
  */
  /////////////////////////////// Update Data to Firebase ///////////////////////////////
  
  $result['result']     = TRUE;
  $result['room_name']  = $room_name;
  $result['token']      = create_access_token($uid, $room_name);
  return $result;
}

/*
  function ทีใช้สำหรับสร้าง token และมีการส่ง voip ไปที่ client ด้วย
*/

function twilio_room_generation(){
  $result = array();
  
  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  if (empty($_REQUEST['uuid']) || empty($_REQUEST['type']) || empty($_REQUEST['uid'])) {
    $result['result'] = FALSE;
    $result['message']  = "function : twilio_room_generation, parameter";
    return $result;
  }

  global $firebase;

  /*
  เราต้องแยกว่าเป้นการโทรออก หรือเป็นการ join ของกลุ่ม
  function 
    1. สร้างขึ้นมาใหม่ แสดงว่าเราต้องมีการส่ง voip ไปแจ้งคนที่เราต้องโทรหาด้วย
    2. join เป้นการ join เข้าเท่านั้น
  */

  $uid        = $_REQUEST['uid']; 
  $uuid       = $_REQUEST['uuid'];
  $type       = $_REQUEST['type'];
  $has_video  = $_REQUEST['has_video']; // 0 : audio | 1 : video

  $profile    = profile2_by_uid_load($uid, 'main');
  $name       = $profile->field_profile_display_name[LANGUAGE_NONE][0]['value'];

  // $name = $_REQUEST['name'];  // ชือคนโทรออก
  // $room = $_REQUEST['room'];  // ชือห้องที่เราต้องการสร้าง

  $members = array();

  $room_name = generateRandomString();

  //////////////////////// 1 /////////////////////////////
  $outgoing_call = array();
  $outgoing_call['field_name'] = 'field_twilio_outgoing_call'; 

  $outgoing_call['field_twilio_room_type'][LANGUAGE_NONE][0]['value'] = $type;
  $outgoing_call['field_twilio_room_name'][LANGUAGE_NONE][0]['value'] = $room_name;
  $outgoing_call['field_twilio_room_uuid'][LANGUAGE_NONE][0]['value'] = $uuid;

  $field_entity = entity_create('field_collection_item', $outgoing_call);
  $field_entity->setHostEntity('profile2', $profile);
  $field_entity->save();

  $item_id = $field_entity->item_id;

  // เราจะ insert members uid{caller} ลงไปคนแรก
  // $data = field_collection_item_load($field_entity->item_id);
  $value_video_member = array();
  $value_video_member['field_name'] = 'field_twilio_video_members'; 
  $value_video_member['field_twv_members_friend_id'][LANGUAGE_NONE][0]['value'] = $uid;
  $value_video_member['field_twv_members_type'][LANGUAGE_NONE][0]['value']      = "caller";
  $value_video_member['field_twv_members_uid_invite'][LANGUAGE_NONE][0]['value']= $uid;
  $value_video_member['field_twilio_room_name'][LANGUAGE_NONE][0]['value']      = $room_name;
  $value_video_member['field_twilio_ic_device_id'][LANGUAGE_NONE][0]['value']   = getallheaders()['udid'];
  $value_video_member['field_twv_members_status'][LANGUAGE_NONE][0]['value']    = 'invite';

  $field_entity = entity_create('field_collection_item', $value_video_member);
  $field_entity->setHostEntity("field_twilio_video_members", field_collection_item_load($item_id));
  $field_entity->save(); 


  $members[$field_entity->item_id] = array(
                  "friend_id" =>$uid,
                  "type"      =>"caller",
                  "uid_invite"=>$uid,
                  "room_name" =>$room_name,
                  "status"    =>'invite',
                  "device_id" =>getallheaders()['udid']
                );


  //////////////////////// 1 /////////////////////////////

  $friend_ids = $_REQUEST['friend_ids']; // id ของเพือน(โดยจะส่งมาเป้น array)ที่เราต้องการโทรหา 

  /////////////////////////////// Send Voip to Friend //////////////////////////////////
  // เป็นการ หา pushkit token ของแต่ละ user โดยที่แต่ละ user อาจมีหลาย device ด้วย 
  // โดยมีเงือนไข device นั้น field field_is_login = 1 ถึงเราจะส่งเท่านั้น


  // flag เช็กว่า friend_id นี้ต้องมี pushkit_token, is_login == 1 ถึงจะเพิ่ม members
  $flag = false;
  foreach ($friend_ids as $key => $friend_id){

    $friend_id_token      = create_access_token($friend_id, $room_name);

    /////////
    $friend_profile = profile2_by_uid_load($friend_id, 'main');
    if(isset($friend_profile->field_device_access)){
      foreach ($friend_profile->field_device_access[LANGUAGE_NONE] as $key => $value) {
        $item_load = field_collection_item_load($value['value']);

        if (strcasecmp($item_load->field_pushkit_token[LANGUAGE_NONE][0]['value'], "") != 0 && strcasecmp($item_load->field_is_login[LANGUAGE_NONE][0]['value'], "1") == 0) {

          $pushkit_token  = $item_load->field_pushkit_token[LANGUAGE_NONE][0]['value'];
          $action         = 'call';
          $handle         = array(
                            "uid"     => $uid, 
                            "name"    => $name, // ชือของ caller
                            "token"   => $friend_id_token,
                            "room_name"=>$room_name
                            );
          apns_voip($pushkit_token, $action, $uuid, $handle, $has_video);  
          $flag = true;
        }
      }
    }

    if ($flag) {
      $value_video_member = array();
      $value_video_member['field_name'] = 'field_twilio_video_members'; 
      $value_video_member['field_twv_members_friend_id'][LANGUAGE_NONE][0]['value'] = $friend_id;
      $value_video_member['field_twv_members_type'][LANGUAGE_NONE][0]['value']      = "participant";
      $value_video_member['field_twv_members_uid_invite'][LANGUAGE_NONE][0]['value']= $uid;
      $value_video_member['field_twilio_room_name'][LANGUAGE_NONE][0]['value']      = $room_name;
      $value_video_member['field_twv_members_status'][LANGUAGE_NONE][0]['value']    = 'invite';

      $field_entity = entity_create('field_collection_item', $value_video_member);
      $field_entity->setHostEntity("field_twilio_video_members", field_collection_item_load($item_id));
      $field_entity->save(); 

      $members[$field_entity->item_id] = array(
                  "friend_id" =>$friend_id,
                  "type"      =>"participant",
                  "uid_invite"=>$uid,
                  "status"    =>'invite',
                  "room_name" =>$room_name
                );

      // insert incoming call ให้กับ friend ที่เรา call ไป
      // $friend_profile
      $incoming_call = array();
      $incoming_call['field_name'] = 'field_twilio_incoming_call'; 

      $incoming_call['field_twilio_ic_name'][LANGUAGE_NONE][0]['value']     = $room_name;
      $incoming_call['field_twilio_ic_uid'][LANGUAGE_NONE][0]['value']      = $uid;
      $incoming_call['field_twilio_room_uuid'][LANGUAGE_NONE][0]['value']   = $uuid;
      $incoming_call['field_twilio_ic_token'][LANGUAGE_NONE][0]['value']    = $friend_id_token;
      $incoming_call['field_twilio_ic_has_video'][LANGUAGE_NONE][0]['value']= $has_video;

      $field_entity = entity_create('field_collection_item', $incoming_call);
      $field_entity->setHostEntity('profile2', $friend_profile);
      $field_entity->save();

      $value = array(
              "twilio_room_name"=> $room_name,
              "uid"             => $uid,
              "uuid"            => $uuid,
              "token"           => $friend_id_token,
              "has_video"       => $has_video
            );
      $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $friend_id .'/incoming_call/'. $field_entity->item_id, $value);
    }
    $flag = false;
    // กรณีเราจำเป้นต้องส่ง sms ไปยังเบอโทร friend id นี้
  }
  
  /////////////////////////////// Send Voip to Friend //////////////////////////////////

  /////////////////////////////// Update Data to Firebase ///////////////////////////////
  $value = array(
              "twilio_room_name"    => $room_name,
              "uuid"                => $uuid,
              "type"                => $type,
              "members"             => $members
            );
  $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid .'/outgoing_call/'. $item_id, $value);
  /////////////////////////////// Update Data to Firebase ///////////////////////////////

  $result['result']     = TRUE;
  $result['room_name']  = $room_name;
  $result['token']      = create_access_token($uid, $room_name);

  return $result;
}

/*
  $name       : ชือ name 
  $room_name  : ชือ room_name
*/
function create_access_token($name, $room_name){
  // Create an Access Token
  $token = new AccessToken(
    TWILIO_ACCOUNT_SID,
    TWILIO_API_KEY,
    TWILIO_API_KEY_SECRET,
    3600 * 3, /* 3 hour(10800 seconds) */ // เราจะกำหนดให้มีอายุ 3 ชมเท่านั้น
    $name
  );

  // Grant access to Video
  $grant = new VideoGrant();
  $grant->setRoom($room_name);
  $token->addGrant($grant);

  return $token->toJWT();
}

function twilio(){
  $result = array();
  // if (!check_header()) {
  //   # code...
  //   $result['result']   = FALSE;
  //   $result['message']  = "check_header()";
  //   return $result;
  // }

  // $param = json_decode(file_get_contents('php://input'), true);

  /*
  if (empty($param['platform']) || empty($param['action']) || empty($param['uid']) || empty($param['friend_id']) || empty($param["uuid"])) {
    $result['result'] = FALSE;
    $result['message']  = "function : voip, parameter";
    
    return $result;
  }
  */

  // module_load_include('module', 'twilio', 'twilio');


  // Substitute your Twilio AccountSid and ApiKey details
  $accountSid   = 'AC94429faf5d0c017fdde2eb9347c699e6';
  $apiKeySid    = 'SKc494a853c4e4bd047f4aaa5ea28729c7';
  $apiKeySecret = '1FZNcielMkW1sv35zkUOTUX3tu1el7ZZ';

  $identity     = 'name';

  // name=iphone&room=test

  // Create an Access Token
  $token = new AccessToken(
    $accountSid,
    $apiKeySid,
    $apiKeySecret,
    3600 * 3, /* 3 hour(10800 seconds) */
    $identity
  );


  // // Grant access to Video
  $grant = new VideoGrant();
  $grant->setRoom('room');
  $token->addGrant($grant);

  // Serialize the token as a JWT
  // echo $token->toJWT();

  $result['result'] = TRUE;
  $result['token']  = $token->toJWT();;
  return $result;
}

/*
  uid   : user id ของผมส่ง
  name  : ชื่อของผู้ส่ง
  uuid  : device id เครื่องซึ่งจะไม่ซํ้ากัน
  pushkit_token : id ของ pushkit แต่เราเครื่องจะถูกส้รางเมือ install app ใหม่
  action : call, cancel

  ex. 
  $handle = array(
                  "uid"     => $uid,
                  "name"    => $name,
                  "group_id"=> $group_id
                  );

  apns_voip($pushkit_token, $action, $uuid, $friend_id_token, $handle, $has_video); 
*/
function apns_voip2(/*$uuid, */ $pushkit_token, $action, $uuid, $friend_id_token = '', $handle=array(), $has_video = '0', $sound = 'default'){

  $apnsHost = config_pages_get(CONFIG_PAGES_TYPE, 'field_apn_host');//'gateway.sandbox.push.apple.com';
  $apnsCert = $_SERVER['DOCUMENT_ROOT'] . substr(file_create_url(config_pages_get(CONFIG_PAGES_TYPE, 'field_apn_certificate')['uri']), strlen($GLOBALS['base_url']));   // dpm(dirname(__FILE__) . '/' . 'VOIP.pem');
  $apnsPort = config_pages_get(CONFIG_PAGES_TYPE, 'field_apn_port'); // 2195;


  // iphone 5s
  // $token_pkpush   = '395aa99183b9c31c2b6274dbfbbcd169c149c4f59782f4fde9b8386866ff15f5';

  // ipad
  // $token_pkpush = '7094ac021bd272647aa232eddc4c5254a4913f80a4c05b2232e4103deaaffb8c';
  $streamContext = stream_context_create();
  stream_context_set_option($streamContext, 'ssl', 'local_cert', $apnsCert);
  $apns = stream_socket_client('ssl://' . $apnsHost . ':' . $apnsPort, $error, $errorString, 2, STREAM_CLIENT_CONNECT, $streamContext);
  $payload['aps'] = array('hasVideo' => $has_video, 'sound' => $sound, 'uuid' => $uuid, 'handle'=>$handle, 'action'=>$action);

  // $payload['aps'] = array();
  $output = json_encode($payload);
  $token = pack('H*', $pushkit_token);
  $apnsMessage = chr(0) . chr(0) . chr(32) . $token . chr(0) . chr(strlen($output)) . $output;

  // $apnsMessage = chr(0) . chr(0) . chr(32) . pack('H*', str_replace(' ', '', $deviceToken)) . chr(0) . chr(strlen($payload)) . $payload;

  $result = fwrite($apns, $apnsMessage);

  // Expiry
  // fwrite($apns, $apnsMessage);
  
  socket_close($apns);
  fclose($apns);

  // watchdog(TAG, 'apns_voip: %error | %errorString | %payload', array('%error'=>serialize($error), '%errorString'=>serialize($errorString), '%payload'=>serialize($result)), WATCHDOG_INFO);
}


function apns_voip($pushkit_token, $action, $uuid, $handle=array(), $has_video = '0', $sound = 'default'){


    global $debug;
   // try {
    // error_reporting(0);

    // error_reporting(E_ALL);
    // ini_set('display_errors', 1);

    // Report all PHP errors
    // error_reporting(-1);

    // error_reporting(0);

    $apnsCert = $_SERVER['DOCUMENT_ROOT'] . substr(file_create_url(config_pages_get(CONFIG_PAGES_TYPE, 'field_apn_certificate')['uri']), strlen($GLOBALS['base_url'])); 

    if ($debug) {
      $push = new ApnsPHP_Push(
        ApnsPHP_Abstract::ENVIRONMENT_SANDBOX,
        $apnsCert
      );
    }else{
      $push = new ApnsPHP_Push(
        ApnsPHP_Abstract::ENVIRONMENT_PRODUCTION,
        $apnsCert
      );
    }
    

    // Connect to the Apple Push Notification Service
    $push->connect();

    // Instantiate a new Message with a single recipient
    $message = new ApnsPHP_Message($pushkit_token);
    // Set a custom identifier. To get back this identifier use the getCustomIdentifier() method
    // over a ApnsPHP_Message object retrieved with the getErrors() message.
    $message->setCustomIdentifier("Message-Badge-3");
    // Set badge icon to "3"
    $message->setBadge(3);
    // Set a simple welcome text
    $message->setText('Hello APNs-enabled device!'); // Hello APNs-enabled device
    // Play the default sound
    $message->setSound();
    // Set a custom property
    // $message->setCustomProperty('acme2', array('bang', 'whiz'));
    // Set another custom property
    $message->setCustomProperty('action', $action);
    $message->setCustomProperty('uuid', $uuid);
    // $message->setCustomProperty('token', $friend_id_token);
    $message->setCustomProperty('handle', $handle);
    $message->setCustomProperty('sound', $sound);
    $message->setCustomProperty('has_video', $has_video);
    // Set the expiry value to 60 seconds
    $message->setExpiry(60);
    // Add the message to the message queue
    $push->add($message);
    // Send all messages in the message queue
    $push->send();
    // Disconnect from the Apple Push Notification Service
    $push->disconnect();
    // Examine the error message container
    $aErrorQueue = $push->getErrors();
    if (!empty($aErrorQueue)) {
      $aErrorQueue;
      // var_dump($aErrorQueue);
      watchdog(TAG, 'error -> apns_voip: %error', array('%error'=>$aErrorQueue), WATCHDOG_ERROR);
    }
  // } catch (Exception $e) {
  //     // echo 'Caught exception: ',  $e->getMessage(), "\n";
  // } finally {
  //     // echo "First finally.\n";
  // }
}

function voip(){
  $result = array();

  if (!check_header()) {
    # code...
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  $param = json_decode(file_get_contents('php://input'), true);

  // video
  if (empty($param['platform']) || empty($param['action']) || empty($param['uid']) || empty($param['friend_id']) || empty($param["uuid"]) || empty($param["item_id"])) {
    $result['result'] = FALSE;
    $result['message']  = "function : voip, parameter";
    
    return $result;
  }

  global $firebase;

  /*
  action : start_call_action, end_call_action, held_call_action
  */
  $platform = $param['platform'];
  $action   = $param['action'];
  $uid      = $param['uid'];        // uid ของคนส่งคำขอ
  $friend_id= $param['friend_id'];  // friend_id เพื่อนที่ต้องติดต่อ
  $uuid     = $param['uuid'];
  $item_id  = $param['item_id'];


  switch ($action) {
    case 'start_call_action':{
      // module_load_include('module', 'opentok', 'opentok');

      $has_video = $param['has_video'];

      if (strcasecmp($has_video, "0") == 0) {
        // เป็นการ call audio
      }else{
        // เป็นการ call video
      }


      $profile = profile2_by_uid_load($uid, 'main');

      /////////
      $friend_profile = profile2_by_uid_load($friend_id, 'main');
      if(isset($friend_profile->field_device_access)){
        foreach ($friend_profile->field_device_access[LANGUAGE_NONE] as $key => $value) {
          $item_load = field_collection_item_load($value['value']);

          // $result['pushkit_token']     = $item_load->field_pushkit_token[LANGUAGE_NONE][0]['value'];
          if (strcasecmp($item_load->field_pushkit_token[LANGUAGE_NONE][0]['value'], "") != 0) {
            $apnsHost = config_pages_get(CONFIG_PAGES_TYPE, 'field_apn_host');//'gateway.sandbox.push.apple.com';
            $apnsCert = $_SERVER['DOCUMENT_ROOT'] . substr(file_create_url(config_pages_get(CONFIG_PAGES_TYPE, 'field_apn_certificate')['uri']), strlen($GLOBALS['base_url']));   // dpm(dirname(__FILE__) . '/' . 'VOIP.pem');
            $apnsPort = config_pages_get(CONFIG_PAGES_TYPE, 'field_apn_port'); // 2195;

            ////////////////// ** opentok ** /////////////////////////////
           
            // $opentok_api_key = variable_get('opentok_api_key', NULL);
            // $opk_sessionId = opentok_create_session($uuid)->__toString();
            // $kToken     = opentok_get_token($kSessionId);

            
            // echo "opentok_api_key : " . $opentok_api_key . '</br>';
            // echo "sessionId : " . $sessionId . '</br>';
            // echo "opentok_get_token : " . opentok_get_token($sessionId);
            
            ////////////////// ** opentok ** /////////////////////////////


            /////////////////  ** twilio ** /////////////////////////////
            // Substitute your Twilio AccountSid and ApiKey details
            $accountSid   = 'AC94429faf5d0c017fdde2eb9347c699e6';
            $apiKeySid    = 'SKc494a853c4e4bd047f4aaa5ea28729c7';
            $apiKeySecret = '1FZNcielMkW1sv35zkUOTUX3tu1el7ZZ';


            // สร้าง token ให้ user
            $identity     = $profile->field_profile_display_name[LANGUAGE_NONE][0]['value'];

            // Create an Access Token
            $token = new AccessToken(
              $accountSid,
              $apiKeySid,
              $apiKeySecret,
              3600 * 3 , /* 3 hour(10800 seconds) */
              $identity
            );


            // // Grant access to Video
            $grant = new VideoGrant();
            $grant->setRoom($uuid);
            $token->addGrant($grant);

            // Serialize the token as a JWT
            // echo $token->toJWT();

            $result['tokenJWT'] = $token->toJWT();


            // สร้าง token ให้ friend
            $identity     = $friend_profile->field_profile_display_name[LANGUAGE_NONE][0]['value'];

            // Create an Access Token
            $token = new AccessToken(
              $accountSid,
              $apiKeySid,
              $apiKeySecret,
              3600 * 3 , /* 3 hour(10800 seconds) */
              $identity
            );


            // // Grant access to Video
            $grant = new VideoGrant();
            $grant->setRoom($uuid);
            $token->addGrant($grant);


            // $result['result'] = TRUE;
            // $result['token']  = $token->toJWT();;
            /////////////////  ** twilio ** /////////////////////////////

            // add profile ให้กับ user.  'publisher', 'subscriber'
            $value = array(
                "is_audio"    => "0",
                "friend_id"   => $friend_id,
                "status"      => "0",  // ตัวบอกว่าสายรับหรือยัง
                "tokenJWT"    => $token->toJWT()
                // "ktoken"      => $kToken,
                /*
                "opk_sessionId"  => $opk_sessionId,
                "members"     => array($uid       =>array("type"=>"publisher", "opk_token"=>opentok_get_token($opk_sessionId, 'publisher'), "status"=>"1"),
                                       $friend_id =>array("type"=>"subscriber", "opk_token"=>opentok_get_token($opk_sessionId, 'publisher'), "status"=>"0"))
                                       */

            );

            // idna/user/{user_id}/profiles/device_access/{item_id}/voip/
            //  #1 : บันทึก profile ตัวเองไว้ที่ firebase
            $firebase->set(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid .'/profiles/device_access/'. $item_id .'/'. FIREBASE_VOIP . $uuid , $value);

            // $result['value']     = $value;

            // $handle = "uid=" . $uid . "&name=" . $profile->field_profile_display_name[LANGUAGE_NONE][0]['value'];

            $handle = array(
                      "uid"  => $uid,
                      "name" => $profile->field_profile_display_name[LANGUAGE_NONE][0]['value']
                      );

            // iphone 5s
            // $token_pkpush   = '395aa99183b9c31c2b6274dbfbbcd169c149c4f59782f4fde9b8386866ff15f5';

            // ipad
            // $token_pkpush = '7094ac021bd272647aa232eddc4c5254a4913f80a4c05b2232e4103deaaffb8c';
            $streamContext = stream_context_create();
            stream_context_set_option($streamContext, 'ssl', 'local_cert', $apnsCert);
            $apns = stream_socket_client('ssl://' . $apnsHost . ':' . $apnsPort, $error, $errorString, 2, STREAM_CLIENT_CONNECT, $streamContext);
            $payload['aps'] = array('hasVideo' => '1', 'sound' => 'default', 'uuid' => $uuid, 'handle'=>$handle, 'action'=>$action);

            // $payload['aps'] = array();
            $output = json_encode($payload);
            $token = pack('H*', $item_load->field_pushkit_token[LANGUAGE_NONE][0]['value']);
            $apnsMessage = chr(0) . chr(0) . chr(32) . $token . chr(0) . chr(strlen($output)) . $output;
            // $result = fwrite($apns, $apnsMessage);

            // Expiry
            fwrite($apns, $apnsMessage);
            
            socket_close($apns);
            fclose($apns);
          // }




            // // $data = array('foo' => 'bar');
            // $serialized_data = serialize($payload);
            // $size = strlen($serialized_data);
            // /// print($size * 8 / 1000);
            // watchdog(TAG, 'Voip: %param', array('%param'=>$errorString .'|' .$error ), WATCHDOG_INFO);

            // $result['kSessionId'] = $kSessionId;
            // $result['kToken']     = $kToken;
            
            
          }
        }
      }

      /////////
    }
      break;

    case 'end_call_action':{
      $profile = profile2_by_uid_load($uid, 'main');

      /////////
      $friend_profile = profile2_by_uid_load($friend_id, 'main');
       if(isset($friend_profile->field_device_access)){
        foreach ($friend_profile->field_device_access[LANGUAGE_NONE] as $key => $value) {
          $item_load = field_collection_item_load($value['value']);

          if (strcasecmp($item_load->field_pushkit_token[LANGUAGE_NONE][0]['value'], "") != 0) {
            // $result['pushkit_token']  = $item_load->field_pushkit_token[LANGUAGE_NONE][0]['value'];

            // สว่น call
            // 395AA99183B9C31C2B6274DBFBBCD169C149C4F59782F4FDE9B8386866FF15F5
            // $array_token_pkpush = array("ff38f7dc0d34b6c582166cf5ecbb0e3114ca8160b038727826ed306b0e8e4a83", "8597a025aae811c3c007f6c02d0864c99a0e3b081639edd2060c0968aa8b65f2");

            // foreach ($array_token_pkpush as &$token_pkpush) {
              // $value = $value * 2;
              // dpm($value);

              $apnsHost = config_pages_get(CONFIG_PAGES_TYPE, 'field_apn_host');//'gateway.sandbox.push.apple.com';
              $apnsCert = $_SERVER['DOCUMENT_ROOT'] . substr(file_create_url(config_pages_get(CONFIG_PAGES_TYPE, 'field_apn_certificate')['uri']), strlen($GLOBALS['base_url']));   // dpm(dirname(__FILE__) . '/' . 'VOIP.pem');
              $apnsPort = config_pages_get(CONFIG_PAGES_TYPE, 'field_apn_port'); // 2195;


              $streamContext = stream_context_create();
              stream_context_set_option($streamContext, 'ssl', 'local_cert', $apnsCert);
              $apns = stream_socket_client('ssl://' . $apnsHost . ':' . $apnsPort, $error, $errorString, 2, STREAM_CLIENT_CONNECT, $streamContext);
              $payload['aps'] = array('hasVideo' => 1, 'sound' => 'default', 'is_audio' => '0', 'uuid' => $uuid, 'handle'=>$profile->field_profile_display_name[LANGUAGE_NONE][0]['value'], 'action'=>$action);

              // $payload['aps'] = array();
              $output = json_encode($payload);
              $token = pack('H*', $item_load->field_pushkit_token[LANGUAGE_NONE][0]['value']);
              $apnsMessage = chr(0) . chr(0) . chr(32) . $token . chr(0) . chr(strlen($output)) . $output;
              // $result = fwrite($apns, $apnsMessage);

              // dpm($result);
              // Expiry
              fwrite($apns, $apnsMessage);
             
              socket_close($apns);
              fclose($apns);
            // }
              // $firebase->delete(FIREBASE_DEFAULT_PATH . FIREBASE_VOIP . $uuid);
              
            //
          }
        }
      }
    }
      break;

    case 'hold_call_action':{
      // hold
    }
      break;
    
    default:
      # code...
      break;
  }

  // watchdog(TAG, 'Voip: %param', array('%param'=>serialize($param)), WATCHDOG_INFO);

  $result['result'] = TRUE;
  $result['param']  = $param;
  return $result;
}

function fwrite_stream($fp, $string) {
    for ($written = 0; $written < strlen($string); $written += $fwrite) {
        $fwrite = fwrite($fp, substr($string, $written));
        if ($fwrite === false) {
            return $written;
        }
    }
    return $written;
}

// FUNCTION to check if there is an error response from Apple
// Returns TRUE if there was and FALSE if there was not
function checkAppleErrorResponse($fp) {
    //byte1=always 8, byte2=StatusCode, bytes3,4,5,6=identifier(rowID). 
    // Should return nothing if OK.

    //NOTE: Make sure you set stream_set_blocking($fp, 0) or else fread will pause your script and wait 
    // forever when there is no response to be sent. 

    $apple_error_response = fread($fp, 6);

    if ($apple_error_response) {
        // unpack the error response (first byte 'command" should always be 8)
        $error_response = unpack('Ccommand/Cstatus_code/Nidentifier', $apple_error_response); 

        if ($error_response['status_code'] == '0') {
            $error_response['status_code'] = '0-No errors encountered';
        } else if ($error_response['status_code'] == '1') {
            $error_response['status_code'] = '1-Processing error';
        } else if ($error_response['status_code'] == '2') {
            $error_response['status_code'] = '2-Missing device token';
        } else if ($error_response['status_code'] == '3') {
            $error_response['status_code'] = '3-Missing topic';
        } else if ($error_response['status_code'] == '4') {
            $error_response['status_code'] = '4-Missing payload';
        } else if ($error_response['status_code'] == '5') {
            $error_response['status_code'] = '5-Invalid token size';
        } else if ($error_response['status_code'] == '6') {
            $error_response['status_code'] = '6-Invalid topic size';
        } else if ($error_response['status_code'] == '7') {
            $error_response['status_code'] = '7-Invalid payload size';
        } else if ($error_response['status_code'] == '8') {
            $error_response['status_code'] = '8-Invalid token';
        } else if ($error_response['status_code'] == '255') {
            $error_response['status_code'] = '255-None (unknown)';
        } else {
            $error_response['status_code'] = $error_response['status_code'].'-Not listed';
        }

        //echo '<br><b>+ + + + + + ERROR</b> Response Command:<b>' . $error_response['command'] . '</b>&nbsp;&nbsp;&nbsp;Identifier:<b>' . $error_response['identifier'] . '</b>&nbsp;&nbsp;&nbsp;Status:<b>' . $error_response['status_code'] . '</b><br>';

        // echo 'Identifier is the rowID (index) in the database that caused the problem, and Apple will disconnect you from server. To continue sending Push Notifications, just start at the next rowID after this Identifier.<br>';

        return true;
    }

    return false;
}

function shby_class()
{
  $result = array();

/*
  $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);

     // เป้นการโหลดข้อมูลของ profile user ซึ่งจะได้รู้ว่า friend ของ user
  $user = user_load($_POST['uid']);

  if (!$user->uid) {
    // User is not logged in
    //services_error(t('User is not logged in.'), 406);

    $result['result'] = FALSE;
    $result['output'] = "uid not match is user";

    return $result;
  }

  $profile2_load_by_user = profile2_load_by_user($user, NULL);

  // $profile2_load_by_user->field_profile_heart[LANGUAGE_NONE][0]['value'] = 99;

  // profile2_save($profile2_load_by_user);

  // Load Profile ขึ้นมาเพือจะทำการแก้ไข
  $profile_user =  profile2_load($profile2_load_by_user['main']->pid);



  foreach ($_POST['uids'] as $key => $uid) {
    # code...

    $user_fields = user_load($uid);

    if (!$user_fields->uid) {
      // User is not logged in
      //services_error(t('User is not logged in.'), 406);

      $result['result'] = FALSE;
      $result['output'] = "uid not match is user";

      return $result;
    }

    $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);

    // Load Profile ขึ้นมาเพือจะทำการแก้ไข
    $profile_friend =  profile2_load($profile2_load_by_user['main']->pid);

    
    foreach ($profile_friend->field_device_access[LANGUAGE_NONE] as $key => $value) {
      // Build array of field collection values.

      $data_friend = field_collection_item_load($value['value']);


      $token   = $data_friend->field_token[LANGUAGE_NONE][0]['value'];
      $title   = "HEART";
      $message = $profile_user->field_profile_name[LANGUAGE_NONE][0]['value'] . " send heart to you.";
      // $sound   = ;// turn_off_notifications

      $result['sound'] = $sound = $firebase->get(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $_POST['uid_friend'] ."/friends/".  $_POST['uid']. '/turn_off_notifications/');//$firebase->get(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $_POST['uid_friend'] ."/friends/".  $_POST['uid']. '/turn_off_notifications/');

      $count_receive = 0;
      $friends = json_decode($firebase->get(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $uid ."/friends"), true);

      foreach ($friends as $key => $value) {
        
        if ($key != 0) {
          
          if (array_key_exists('receive_heart', $value)) {
            $receive_heart = $value['receive_heart'];

            foreach ($receive_heart as $receive_heart_key => $receive_heart_value) {
                if ($receive_heart[$receive_heart_key]["is_read"] == 0) {
                  # code...
                  $count_receive++;
                }
            }
          }
        }
      }
      idna_send_push_notification($token, $title, $message, $sound, $vibrate = 0, $count_receive);
    }
  }
  */

  $result['result']  = TRUE;
  $result['function'] = "shby_class";
  $result['$_POST'] = $_POST;

  return $result;
}


/*
  get Friend status
*/
function get_friend_status(){
  return taxonomy_get_tree_nested(taxonomy_vocabulary_machine_name_load("tags_friend_status")->vid);;
}


/*
  get application category
*/
function application_category(){
  $result = array();

  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }


  /*
  $vocabulary = taxonomy_vocabulary_machine_name_load('tags_category_application');
  $terms = entity_load('taxonomy_term', FALSE, array('vid' => $vocabulary->vid));

  $result['result']  = TRUE;
  $result['function'] = "application_category";
  $result['data'] = $terms;
  */

  $result['result']  = TRUE;
  // taxonomy_get_tree_nested($vid, $parent = 0, $max_depth = NULL, $load_entities = FALSE, $image_styles = NULL)
  $result['data']    = taxonomy_get_tree_nested(taxonomy_vocabulary_machine_name_load("tags_category_application")->vid, 0, NULL, FALSE, 'thumbnail');

  return $result;
}

/**
  function get gender
*/
function get_gender(){
  $result = array();

  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  $result['result']  = TRUE;
  $result['data']    = taxonomy_get_tree_nested(taxonomy_vocabulary_machine_name_load("gender")->vid);

  return $result;
}

/**
 * Returns a nested tree of taxonomy data (like taxonomy_get_tree) but with nested elements (under a new "children" property)
 *
 * @see taxonomy_get_tree()
 *
 * @return array
 *   Array of taxonomy objects (and their parents and children)
 *
 *  เป็น function ดึง parent -> child แล้วเราเพิ่มส่วน get field image  ด้วย
 */
function taxonomy_get_tree_nested($vid, $parent = 0, $max_depth = NULL, $load_entities = FALSE, $image_styles = NULL) {
  $tree = taxonomy_get_tree($vid, $parent, $max_depth, $load_entities);
  $list = array();
  $nested = array();

  // Build an array of all terms
  foreach ($tree as $term) {
    $term->children = array();
    $list[$term->tid] = $term;
  }

  // $term data behaves like a reference
  // If we update a term or child term in $list or $tree or $nested it'll be "updated" in all 3 places
  foreach ($list as $tid => $term) {
    foreach ($term->parents as $ptid) {

      if (is_null($image_styles)) {
        # code...
        $term->field_image = substr(file_create_url(entity_load('taxonomy_term', FALSE, array('vid' => $vid))[$tid]->field_tags_image[LANGUAGE_NONE][0]['uri']), strlen($GLOBALS['base_url']));
      }else{

        /*
  // [7]  (null)  @"uri" : @"public:///20180406_64827038.png" 
  // var_dump(image_style_url('thumbnail', 'public:///20180406_64827038.png'));
        */
        
        $term->field_image = substr(file_create_url(image_style_url($image_styles, entity_load('taxonomy_term', FALSE, array('vid' => $vid))[$tid]->field_tags_image[LANGUAGE_NONE][0]['uri'])), strlen($GLOBALS['base_url']));
      }




      if (isset($list[$ptid])) {
        // This term's parent tid exists; add the term to its children array
        $list[$ptid]->children[$tid] = $term;
      }
      elseif ($ptid == '0') {
        // The parent is 0, meaning it's a top-level term; add the term to the final $nested array
        // It doesn't matter if it doesn't have its children yet (see note above re: references)
        $nested[$tid] = $term;
      }
    }
  }

  return $nested;
}

/*
  จะถูกเรียก tigger for firebase
*/
function delete_my_application(){
  $result = array();

  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  $param = json_decode(file_get_contents('php://input'), true);
  if (empty($param['app_id'])) {
    $result['result'] = FALSE;
    $result['message'] = "function delete_my_application : parameter";
    return $result;
  }

  global $firebase;
  $app_id = $param['app_id'];

  $node     = node_load($app_id);
  // $category = $node->field_my_app_category[LANGUAGE_NONE][0]['tid'];
  // $firebase->delete(FIREBASE_DEFAULT_PATH . FIREBASE_CENTER . '/' . $category . '/' . $app_id);

  // ลบ group ออกตาม group id
  // entity_delete_multiple('field_collection_item', array($app_id));

  node_delete($app_id);

  $result['result'] = TRUE;
  return  $result;
}


/**
 * Sends an e-mail.
 *
 * @param array $form_values
 *   An array of values from the contact form fields that were submitted.
 *   There are just two relevant items: $form_values['email'] and
 *   $form_values['message'].
 */
function idna_mail_send($key, $to, $name, $verify_key) {
  // All system mails need to specify the module and template key (mirrored from
  // hook_mail()) that the message they want to send comes from.
  $module = 'idna';

  switch ($key) {
    case 'contact_message':{
      // $key = 'contact_message';

      // Specify 'to' and 'from' addresses.
      // $to = $form_values['email'];
      $from = variable_get('site_mail', 'info@klovers.org');

      // "params" loads in additional context for email content completion in
      // hook_mail(). In this case, we want to pass in the values the user entered
      // into the form, which include the message body in $form_values['message'].
      // $params = '';//$form_values;

      $params = array('verify_key' => $verify_key);

      // The language of the e-mail. This will one of three values:
      // - user_preferred_language(): Used for sending mail to a particular website
      //   user, so that the mail appears in their preferred language.
      // - global $language: Used when sending a mail back to the user currently
      //   viewing the site. This will send it in the language they're currently
      //   using.
      // - language_default(): Used when sending mail to a pre-existing, 'neutral'
      //   address, such as the system e-mail address, or when you're unsure of the
      //   language preferences of the intended recipient.
      //
      // Since in our case, we are sending a message to a random e-mail address that
      // is not necessarily tied to a user account, we will use the site's default
      // language.
      $language = language_default();

      // Whether or not to automatically send the mail when drupal_mail() is
      // called. This defaults to TRUE, and is normally what you want unless you
      // need to do additional processing before drupal_mail_send() is called.
      $send = TRUE;
      // Send the mail, and check for success. Note that this does not guarantee
      // message delivery; only that there were no PHP-related issues encountered
      // while sending.
      $result = drupal_mail($module, $key, $to, $language, $params, $from, $send);
      if ($result['result'] == TRUE) {
        drupal_set_message(t('Your message has been sent.'));
      }
      else {
        drupal_set_message(t('There was a problem sending your message and it was not sent.'), 'error');
      }
    }
      break;

    case 'user_forgot_password':
    {

      // Specify 'to' and 'from' addresses.
      // $to = $form_values['email'];
      $from = variable_get('site_mail', 'info@klovers.org');

      // "params" loads in additional context for email content completion in
      // hook_mail(). In this case, we want to pass in the values the user entered
      // into the form, which include the message body in $form_values['message'].
      // $params = '';//$form_values;

      $params = array('name' => $name, 'verify_key' => $verify_key);


      // The language of the e-mail. This will one of three values:
      // - user_preferred_language(): Used for sending mail to a particular website
      //   user, so that the mail appears in their preferred language.
      // - global $language: Used when sending a mail back to the user currently
      //   viewing the site. This will send it in the language they're currently
      //   using.
      // - language_default(): Used when sending mail to a pre-existing, 'neutral'
      //   address, such as the system e-mail address, or when you're unsure of the
      //   language preferences of the intended recipient.
      //
      // Since in our case, we are sending a message to a random e-mail address that
      // is not necessarily tied to a user account, we will use the site's default
      // language.
      $language = language_default();

      // Whether or not to automatically send the mail when drupal_mail() is
      // called. This defaults to TRUE, and is normally what you want unless you
      // need to do additional processing before drupal_mail_send() is called.
      $send = TRUE;
      // Send the mail, and check for success. Note that this does not guarantee
      // message delivery; only that there were no PHP-related issues encountered
      // while sending.
      $result = drupal_mail($module, $key, $to, $language, $params, $from, $send);
      if ($result['result'] == TRUE) {
        drupal_set_message(t('Your message has been sent.'));
      }
      else {
        drupal_set_message(t('There was a problem sending your message and it was not sent.'), 'error');
      }

    }
      break;
    
    default:
      # code...
      break;
  }

}


function user_friends_heart($uid)
{
  $result = array();

    // เป้นการโหลดข้อมูลของ profile user ซึ่งจะได้รู้ว่า friend ของ user
  $user_fields = user_load($uid);

  if (!$user_fields->uid) {
    // User is not logged in
    //services_error(t('User is not logged in.'), 406);

    $result['result'] = FALSE;
    $result['output'] = "uid not match is user";

    return $result;
  }


  $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);
  $profile =  profile2_load($profile2_load_by_user['main']->pid);

  // $uid_friends = array();

  $data = array();

  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    // Build array of field collection values.

    $data_item_load = field_collection_item_load($value['value']);

    // จะเลือกเฉพาะ friend ที่มี heart receive > 0 
    if($data_item_load->field_heart_send[LANGUAGE_NONE][0]['value'] > 0){
      // $uid_friends[] = $data->field_friend_uid[LANGUAGE_NONE][0]['value'];

      $friend_user_fields = user_load($data_item_load->field_friend_uid[LANGUAGE_NONE][0]['value']);

      $tmp['uid'] = $friend_user_fields->uid;
      $tmp['name'] = $friend_user_fields->name;
      $tmp['mail'] = $friend_user_fields->mail;
      $tmp['data'] = $data_item_load;
      // $tmp['user_heart'] = $profile->field_profile_heart[LANGUAGE_NONE][0]['value'];
      $tmp['heart_send'] = $data_item_load->field_heart_send[LANGUAGE_NONE][0]['value'];
      $tmp['datetime_send'] = $data_item_load->field_datetime_send[LANGUAGE_NONE][0]['value'];

      $tmp['heart_receive'] = $data_item_load->field_heart_receive[LANGUAGE_NONE][0]['value'];
      $tmp['datetime_receive'] = $data_item_load->field_datetime_receive[LANGUAGE_NONE][0]['value'];

      $data[] = $tmp;
    }
  }
  
  $result['result'] = TRUE;
  // $result['GET'] = $uid;
  $result['function'] = "user friends heart";
  $result['data'] = $data;

  return $result;
}

function user_friends($uid)
{
  $result = array();

  // เป้นการโหลดข้อมูลของ profile user ซึ่งจะได้รู้ว่า friend ของ user
  $user_fields = user_load($uid);

  if (!$user_fields->uid) {
    // User is not logged in

    $result['result'] = FALSE;
    $result['output'] = "uid not match is user";

    return $result;
  }

  $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);
  $profile =  profile2_load($profile2_load_by_user['main']->pid);

  // $uid_friends = array();
  $data = array();
  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    // Build array of field collection values.

    $data_item_load = field_collection_item_load($value['value']);

    // $uid_friends[] = $data_item_load->field_friend_uid[LANGUAGE_NONE][0]['value'];

    if($data_item_load->field_heart_friend_status[LANGUAGE_NONE][0]['value'] != 2){

      $friend_user_fields = user_load($data_item_load->field_friend_uid[LANGUAGE_NONE][0]['value']);

      $tmp['uid']         = $friend_user_fields->uid;
      $tmp['name']        = $friend_user_fields->name;
      $tmp['mail']        = $friend_user_fields->mail;

      $profile_friend = profile2_load(profile2_load_by_user($friend_user_fields, NULL)['main']->pid);

      if (count($profile_friend->field_profile_image) > 0) {
        # code...
        // file_create_url($account->picture->uri); 
        $tmp['profile_picture'] =  file_create_url($profile_friend->field_profile_image[LANGUAGE_NONE][0]['uri']);
      }else{
        $tmp['profile_picture'] =  "";
      }
      

      if($data_item_load->field_display_name[LANGUAGE_NONE][0]['value'] == ""){
        $tmp['display_name']  = $friend_user_fields->name;
      }else{
        $tmp['display_name']  = $data_item_load->field_display_name[LANGUAGE_NONE][0]['value'];
      }
      
      $tmp['heart_send']    = $data_item_load->field_heart_send[LANGUAGE_NONE][0]['value'];
      $tmp['heart_receive'] = $data_item_load->field_heart_receive[LANGUAGE_NONE][0]['value'];
      $tmp['friend_status'] = $data_item_load->field_heart_friend_status[LANGUAGE_NONE][0]['value'];

      $tmp['profile_friend'] = $profile_friend;

      if ($data_item_load->field_turn_off_notifications[LANGUAGE_NONE][0]['value'] == "") {
        # code...
        $tmp['turn_off_notifications'] = '0';
      }else{
        $tmp['turn_off_notifications'] = $data_item_load->field_turn_off_notifications[LANGUAGE_NONE][0]['value'];
      }
      

      $data[] = $tmp;
    }
  }

  $result['result'] = TRUE;
  $result['function'] = "user friends";
  $result['data'] = $data;
  // $result['user_heart']  =$profile->field_profile_heart[LANGUAGE_NONE][0]['value'];

  return $result;
}

function accept_friend(){

  $result = array();

  if (empty($_REQUEST['uid'] || empty($_REQUEST['uid_friend']))) {
    $result['result'] = FALSE;
    return $result;
  }

  // load profile ของเราขึ้นมาแก้ใข friend status
  $profile = profile2_by_uid_load($_REQUEST['uid'], 'main');
  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    $data = field_collection_item_load($value['value']);

    if($data->field_friend_uid[LANGUAGE_NONE][0]['value'] == $_POST['uid_friend']){
      $wrapper = entity_metadata_wrapper('field_collection_item', $data);
      
      //Update value
      $wrapper->field_heart_friend_status->set('2');
      $wrapper->save();
    }
  }

  // load profile ของเพื่อนขึ้นมาแก้ไข friend status
  $fprofile = profile2_by_uid_load($_REQUEST['uid_friend'], 'main');
  foreach ($fprofile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    $data = field_collection_item_load($value['value']);

    if($data->field_friend_uid[LANGUAGE_NONE][0]['value'] == $_POST['uid']){
      $wrapper = entity_metadata_wrapper('field_collection_item', $data);
      
      //Update value
      $wrapper->field_heart_friend_status->set('2');
      $wrapper->save();
    }
  }

  $result['result'] = TRUE;
  return $result;
}

function accept_friend_v1()
{
  $result = array();

  // เป้นการโหลดข้อมูลของ  user uid เพอื่จะ แก้ไข สถานะ เพือน (field_heart_friend_status = 1)
  $user_fields = user_load($_POST['uid']);

  if (!$user_fields->uid) {
    // User is not logged in
    //services_error(t('User is not logged in.'), 406);

    $result['result'] = FALSE;
    $result['output'] = "uid not match is user";

    return $result;
  }

  $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);

  // Load Profile ขึ้นมาเพือจะทำการแก้ไข
  $profile =  profile2_load($profile2_load_by_user['main']->pid);

  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    // Build array of field collection values.

    $data = field_collection_item_load($value['value']);

    // $uid_friends[] = $data->field_friend_uid[LANGUAGE_NONE][0]['value'];

    // if($value['value'] == 16){
    if($data->field_friend_uid[LANGUAGE_NONE][0]['value'] == $_POST['uid_friend']){
      $wrapper = entity_metadata_wrapper('field_collection_item', $data);
      
      // $value_update = $data->field_heart_receive[LANGUAGE_NONE][0]['value'] + 1;

      // watchdog(TAG, 'Update Heart = %edit', array('%edit' => $value_update), WATCHDOG_INFO);

      //Update value
      $wrapper->field_heart_friend_status->set('2');
      $wrapper->save();


      /*
      // Firebase increment new HW Login
      $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);

      $data = array(
        "friend_status"   =>'2',
        "update"  => time()
      );

      $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $_POST['uid'] ."/friends/" . $_POST['uid_friend'] . "/", $data);
      */
    }

  }


  // เป้นการโหลดข้อมูลของ  friend uid เพอื่จะ แก้ไข สถานะ เพือน (field_heart_friend_status = 1)
  $user_fields = user_load($_POST['uid_friend']);

  if (!$user_fields->uid) {
    // User is not logged in
    //services_error(t('User is not logged in.'), 406);

    $result['result'] = FALSE;
    $result['output'] = "uid friend not match is user";

    return $result;
  }

  $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);

  // Load Profile ขึ้นมาเพือจะทำการแก้ไข
  $profile =  profile2_load($profile2_load_by_user['main']->pid);

  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    // Build array of field collection values.

    $data = field_collection_item_load($value['value']);

    // $uid_friends[] = $data->field_friend_uid[LANGUAGE_NONE][0]['value'];

    // if($value['value'] == 16){
    if($data->field_friend_uid[LANGUAGE_NONE][0]['value'] == $_POST['uid']){
      $wrapper = entity_metadata_wrapper('field_collection_item', $data);
      
      // $value_update = $data->field_heart_receive[LANGUAGE_NONE][0]['value'] + 1;

      // watchdog(TAG, 'Update Heart = %edit', array('%edit' => $value_update), WATCHDOG_INFO);

      //Update value
      $wrapper->field_heart_friend_status->set('2');
      $wrapper->save();


      /*
      // Firebase increment new HW Login
      $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);

      $data = array(
        "friend_status"   =>'2',
        "update"  => time()
      );

      $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $_POST['uid_friend'] ."/friends/" . $_POST['uid'] . "/", $data);
      */
    }
  }

  $result['result'] = TRUE;
  $result['function'] = "accept_friend";
  $result['POST'] = $_POST;

  return $result;
}

function not_accept_friend(){
  $result = array();

  if (empty($_REQUEST['uid'] || empty($_REQUEST['uid_friend']))) {
    $result['result'] = FALSE;
    return $result;
  }

  // load profile ของเราขึ้นมาแก้ใข friend status
  $profile = profile2_by_uid_load($_REQUEST['uid'], 'main');
  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    $data = field_collection_item_load($value['value']);

    if($data->field_friend_uid[LANGUAGE_NONE][0]['value'] == $_POST['uid_friend']){
      $wrapper = entity_metadata_wrapper('field_collection_item', $data);
      
      //Update value
      $wrapper->field_heart_friend_status->set('-3');
      $wrapper->save();
    }
  }

  // load profile ของเพื่อนขึ้นมาแก้ไข friend status
  $fprofile = profile2_by_uid_load($_REQUEST['uid_friend'], 'main');
  foreach ($fprofile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    $data = field_collection_item_load($value['value']);

    if($data->field_friend_uid[LANGUAGE_NONE][0]['value'] == $_POST['uid']){
      $wrapper = entity_metadata_wrapper('field_collection_item', $data);
      
      //Update value
      $wrapper->field_heart_friend_status->set('-4');
      $wrapper->save();
    }
  }

  $result['result'] = TRUE;
  return $result;
}

function not_accept_friend_v1()
{
  $result = array();

  // เป้นการโหลดข้อมูลของ  user uid เพอื่จะ แก้ไข สถานะ เพือน (field_heart_friend_status = 1)
  $user_fields = user_load($_POST['uid']);

  if (!$user_fields->uid) {
    // User is not logged in
    //services_error(t('User is not logged in.'), 406);

    $result['result'] = FALSE;
    $result['output'] = "uid not match is user";

    return $result;
  }

  $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);

  // Load Profile ขึ้นมาเพือจะทำการแก้ไข
  $profile =  profile2_load($profile2_load_by_user['main']->pid);

  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    // Build array of field collection values.

    $data = field_collection_item_load($value['value']);

    // $uid_friends[] = $data->field_friend_uid[LANGUAGE_NONE][0]['value'];

    // if($value['value'] == 16){
    if($data->field_friend_uid[LANGUAGE_NONE][0]['value'] == $_POST['uid_friend']){
      $wrapper = entity_metadata_wrapper('field_collection_item', $data);
      
      // $value_update = $data->field_heart_receive[LANGUAGE_NONE][0]['value'] + 1;

      // watchdog(TAG, 'Update Heart = %edit', array('%edit' => $value_update), WATCHDOG_INFO);

      //Update value
      $wrapper->field_heart_friend_status->set('-2');
      $wrapper->save();


  /*
      // Firebase increment new HW Login
      $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);

      $data = array(
        "friend_status"   =>'-2',
        "update"  => time()
      );

      $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $_POST['uid'] ."/friends/" . $_POST['uid_friend'] . "/", $data);
      */
    }

  }


  // เป้นการโหลดข้อมูลของ  friend uid เพอื่จะ แก้ไข สถานะ เพือน (field_heart_friend_status = 1)
  $user_fields = user_load($_POST['uid_friend']);

  if (!$user_fields->uid) {
    // User is not logged in
    //services_error(t('User is not logged in.'), 406);

    $result['result'] = FALSE;
    $result['output'] = "uid not match is user";

    return $result;
  }

  $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);

  // Load Profile ขึ้นมาเพือจะทำการแก้ไข
  $profile =  profile2_load($profile2_load_by_user['main']->pid);

  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    // Build array of field collection values.

    $data = field_collection_item_load($value['value']);

    // $uid_friends[] = $data->field_friend_uid[LANGUAGE_NONE][0]['value'];

    // if($value['value'] == 16){
    if($data->field_friend_uid[LANGUAGE_NONE][0]['value'] == $_POST['uid']){
      $wrapper = entity_metadata_wrapper('field_collection_item', $data);
      
      // $value_update = $data->field_heart_receive[LANGUAGE_NONE][0]['value'] + 1;

      // watchdog(TAG, 'Update Heart = %edit', array('%edit' => $value_update), WATCHDOG_INFO);

      //Update value
      $wrapper->field_heart_friend_status->set('-2');
      $wrapper->save();



      /*
      // Firebase increment new HW Login
      $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);

      $data = array(
        "friend_status"   =>'-2',
        "update"  => time()
      );

      $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $_POST['uid_friend'] ."/friends/" . $_POST['uid'] . "/", $data);
      */
    }

  }


  $result['result'] = TRUE;
  $result['function'] = "not accept_friend";
  $result['POST'] = $_POST;

  return $result;
}

function delete_friend(){

  $result = array();
  if (empty($_REQUEST['uid'] || empty($_REQUEST['uid_friend']))) {
    $result['result'] = FALSE;
    return $result;
  }

  /*
foreach ($user_profile->field_my_application[LANGUAGE_NONE] as $key => $value) {
    if ($value['value'] == $_POST['item_id']) {
      # code...
      $wrapper = entity_metadata_wrapper('field_collection_item', field_collection_item_load($value['value']));
      entity_delete_multiple('field_collection_item', array($wrapper->getIdentifier()));
      break;
    }
  }
  */

  // user
  $profile = profile2_by_uid_load($_REQUEST['uid'], 'main');
  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    $data = field_collection_item_load($value['value']);
    if($data->field_friend_uid[LANGUAGE_NONE][0]['value'] == $_REQUEST['uid_friend']){
      $wrapper = entity_metadata_wrapper('field_collection_item', $data);
      // $wrapper->field_heart_friend_status->set('-999');
      // $wrapper->save();

      entity_delete_multiple('field_collection_item', array($wrapper->getIdentifier()));
      break;
    }
  }

  // friend
  $fprofile = profile2_by_uid_load($_REQUEST['uid_friend'], 'main');
   foreach ($fprofile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    $data = field_collection_item_load($value['value']);
    if($data->field_friend_uid[LANGUAGE_NONE][0]['value'] == $_REQUEST['uid']){
      $wrapper = entity_metadata_wrapper('field_collection_item', $data);

      // $wrapper->field_heart_friend_status->set('-999');
      // $wrapper->save();

      entity_delete_multiple('field_collection_item', array($wrapper->getIdentifier()));
      break;      
    }
  }

  $result['result'] = TRUE;
  return $result;
}

function delete_friend_v1(){
  $result = array();

  $user_fields = user_load($_POST['uid']);
  // $uid_fields = user_load($_POST['uid_friend']);
  // $name = user_load($_POST['name']);

  if (!$user_fields->uid) {
    // User is not logged in
    //services_error(t('User is not logged in.'), 406);

    $result['result'] = FALSE;
    $result['output'] = "uid not match is user";

    return $result;
  }

  $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);

  // Load Profile ขึ้นมาเพือจะทำการแก้ไข
  $profile =  profile2_load($profile2_load_by_user['main']->pid);

  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    // Build array of field collection values.

    $data = field_collection_item_load($value['value']);

    // $uid_friends[] = $data->field_friend_uid[LANGUAGE_NONE][0]['value'];

    // if($value['value'] == 16){
    if($data->field_friend_uid[LANGUAGE_NONE][0]['value'] == $_POST['uid_friend']){
      $wrapper = entity_metadata_wrapper('field_collection_item', $data);

      //Update value
      $wrapper->field_heart_friend_status->set('-999');
      $wrapper->save();

      /*
      // Firebase increment new HW Login
      $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);
      
      $firebase->delete(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $_POST['uid'] ."/friends/" . $_POST['uid_friend']);
      */
      break;
      
    }
  }

  // friend

  $friend_fields = user_load($_POST['uid_friend']);
  // $uid_fields = user_load($_POST['uid_friend']);
  // $name = user_load($_POST['name']);

  if (!$friend_fields->uid) {
    // User is not logged in
    //services_error(t('User is not logged in.'), 406);

    $result['result'] = FALSE;
    $result['output'] = "friend uid not match is user";

    return $result;
  }

  $profile2_load_by_friend = profile2_load_by_user($friend_fields, NULL);

  // Load Profile ขึ้นมาเพือจะทำการแก้ไข
  $friend_profile =  profile2_load($profile2_load_by_friend['main']->pid);

  foreach ($friend_profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    // Build array of field collection values.

    $data = field_collection_item_load($value['value']);

    // $uid_friends[] = $data->field_friend_uid[LANGUAGE_NONE][0]['value'];

    // if($value['value'] == 16){
    if($data->field_friend_uid[LANGUAGE_NONE][0]['value'] == $_POST['uid']){
      $wrapper = entity_metadata_wrapper('field_collection_item', $data);

      //Update value
      $wrapper->field_heart_friend_status->set('-999');
      $wrapper->save();

    /*
      // Firebase increment new HW Login
      $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);
      
      $firebase->delete(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $_POST['uid_friend'] ."/friends/" . $_POST['uid']);
      */
      break;
      
    }
  }

  $result['result'] = TRUE;
  $result['function'] = "delete_friend";

  return $result;
}

function send_heart_to_friends()
{
  $result = array();

   // เป้นการโหลดข้อมูลของ profile user ซึ่งจะได้รู้ว่า friend ของ user
  $user_fields = user_load($_POST['uid']);

  if (!$user_fields->uid) {
    // User is not logged in
    //services_error(t('User is not logged in.'), 406);

    $result['result'] = FALSE;
    $result['output'] = "uid not match is user";

    return $result;
  }

  $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);

  // $profile2_load_by_user->field_profile_heart[LANGUAGE_NONE][0]['value'] = 99;

  // profile2_save($profile2_load_by_user);

  // Load Profile ขึ้นมาเพือจะทำการแก้ไข
  $profile_user =  profile2_load($profile2_load_by_user['main']->pid);


  // เช็กว่าเรา user นี้สามารถส่ง heart ได้หรือไหม
  // if($profile_user->field_profile_heart[LANGUAGE_NONE][0]['value'] > 0){

    // Firebase 
    // $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);

    // ลดจำนวน heart
    // $decrement_heart = $profile_user->field_profile_heart[LANGUAGE_NONE][0]['value'] - 1;

    // ลดจำนวน heart ที่อยู่ที่ firebase 
    // $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $_POST['uid'] . "/profile/", array("heart"   =>$decrement_heart));
    
    // ลดจำนวน heart ที่อยู่ที่ drupal 
    // $profile_user->field_profile_heart[LANGUAGE_NONE][0]['value'] = $decrement_heart;
    profile2_save($profile_user);


    foreach ($profile_user->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
      // Build array of field collection values.

      $data = field_collection_item_load($value['value']);

      // $uid_friends[] = $data->field_friend_uid[LANGUAGE_NONE][0]['value'];

      // if($value['value'] == 16){
      // update heart receive คือ เพิ่มขึ้นอีกหนึ่ง
      if($data->field_friend_uid[LANGUAGE_NONE][0]['value'] == $_POST['uid_friend']){
        $wrapper = entity_metadata_wrapper('field_collection_item', $data);

        /*
        if($data->field_heart_send[LANGUAGE_NONE][0]['value'] >= LIMIT_SEND_HEART){

          $result['result'] = FALSE;
          $result['output'] = "Cannot send heart limit heart : " . LIMIT_SEND_HEART;

          return $result;
        }
        */
        
        $value_update = $data->field_heart_send[LANGUAGE_NONE][0]['value'] + 1;

        // watchdog(TAG, 'Update Heart = %edit', array('%edit' => $value_update), WATCHDOG_INFO);

        //Update value
        $wrapper->field_heart_send->set($value_update);
        $wrapper->field_datetime_send->set(time());
        $wrapper->save();

        /*
        // update firebase
        $data_update = array(
          "send"   =>$value_update
        );

        $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $_POST['uid'] ."/friends/" . $_POST['uid_friend'] . "/", $data_update);
        */


        // update firebase
        $data_update = array(
          "is_read"   =>"0", // เป็นการ update จากที่เราส่งถึงเพือนคนนี้
          "time"  => time()
        );

/*
        $firebase->push(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $_POST['uid'] ."/friends/" . $_POST['uid_friend'] . "/send_heart/", $data_update);
        */
        break;
      }
    }
    // เป้นการโหลดข้อมูลของ profile user ซึ่งจะได้รู้ว่า friend ของ user 

    /*
    เป็นการ  update heart ของเพื่อน ว่า field_heart_send เท่าไร
    */

    $user_fields = user_load($_POST['uid_friend']);

    if (!$user_fields->uid) {
      // User is not logged in
      //services_error(t('User is not logged in.'), 406);

      $result['result'] = FALSE;
      $result['output'] = "uid not match is user";

      return $result;
    }

    $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);

    // Load Profile ขึ้นมาเพือจะทำการแก้ไข
    $profile_friend =  profile2_load($profile2_load_by_user['main']->pid);

    /*
    // เพิ่มจำนวน heart
    $increment_heart = $profile->field_profile_heart[LANGUAGE_NONE][0]['value'] + 1;

    // เพิ่มจำนวน heart ที่อยู่ที่ firebase 
    $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $_POST['uid_friend'] . "/", array("heart"   =>$increment_heart));
    
    // เพิ่มจำนวน heart ที่อยู่ที่ drupal 
    $profile->field_profile_heart[LANGUAGE_NONE][0]['value'] = $increment_heart;
    profile2_save($profile);
    */

    foreach ($profile_friend->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
      // Build array of field collection values.

      $data = field_collection_item_load($value['value']);

      // $uid_friends[] = $data->field_friend_uid[LANGUAGE_NONE][0]['value'];

      // if($value['value'] == 16){
      if($data->field_friend_uid[LANGUAGE_NONE][0]['value'] == $_POST['uid']){
        $wrapper = entity_metadata_wrapper('field_collection_item', $data);
        
        $value_update = $data->field_heart_receive[LANGUAGE_NONE][0]['value'] + 1;

        // watchdog(TAG, 'Update Heart = %edit', array('%edit' => $value_update), WATCHDOG_INFO);

        //Update value
        $wrapper->field_heart_receive->set($value_update);
        $wrapper->field_datetime_receive->set(time());
        $wrapper->save();


        /*
        // update firebase
        $data_update = array(
          "receive"   =>$value_update
        );

        $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $_POST['uid_friend'] ."/friends/" . $_POST['uid_friend'] . "/", $data_update);
        */
        
        /*
        $data_update = array(
          "is_read"   =>"0",
          "time"  => time()
        );

        $firebase->push(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $_POST['uid_friend'] ."/friends/" . $_POST['uid'] . "/receive_heart/", $data_update);
        */

        break;
      }
    }



    // send notication to friend
    // เราต้อง profile  uid friend เพื่อหา token เพื่อใช้สำหรับ ส่่ง push notification เพราะว่า โอกาศที่ 1 user จะ login จากหลาย device ดังนี้เราต้องส่ง ทุก device ที่ login ของ friend  นั้นๆ

    /*
    $friend_fields = user_load($_POST['uid_friend']);

    if (!$friend_fields->uid) {
      // User is not logged in
      //services_error(t('User is not logged in.'), 406);

      $result['result'] = FALSE;
      $result['output'] = "uid not match is user";

      return $result;
    }

    $profile2_load_by_friend = profile2_load_by_user($friend_fields, NULL);

    // Load Profile ขึ้นมาเพือจะทำการแก้ไข
    $profile_friend =  profile2_load($profile2_load_by_friend['main']->pid);
    */

    // $result['profile_friend'] = $profile_friend;
    // $result['profile_friend'] = $profile_friend;

    foreach ($profile_friend->field_device_access[LANGUAGE_NONE] as $key => $value) {
      // Build array of field collection values.

      $data_friend = field_collection_item_load($value['value']);


      $token   = $data_friend->field_token[LANGUAGE_NONE][0]['value'];
      $title   = "HEART";
      $message = $profile_user->field_profile_name[LANGUAGE_NONE][0]['value'] . " send heart to you.";
      // $sound   = ;// turn_off_notifications

      $result['sound'] = $sound = '0';//$firebase->get(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $_POST['uid_friend'] ."/friends/".  $_POST['uid']. '/turn_off_notifications/');//$firebase->get(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $_POST['uid_friend'] ."/friends/".  $_POST['uid']. '/turn_off_notifications/');


      /* คำนวณหา badge */
      /*
      $count_receive = 0;
      $friends = json_decode($firebase->get(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $_POST['uid_friend'] ."/friends"), true);

      foreach ($friends as $key => $value) {
        
        if ($key != 0) {
          
          if (array_key_exists('receive_heart', $value)) {
            $receive_heart = $value['receive_heart'];

            foreach ($receive_heart as $receive_heart_key => $receive_heart_value) {
                if ($receive_heart[$receive_heart_key]["is_read"] == 0) {
                  # code...
                  $count_receive++;
                }
            }
          }
        }
      }
      */
      /* คำนวณหา badge */


      // idna_send_push_notification($token, $title, $message, $sound, $vibrate = 0, $count_receive);

    }
    // send notication to friend

    $result['result'] = TRUE;
    $result['function'] = "send heart to friend";
    $result['POST'] = $_POST;

/*
  }else{
    $result['result'] = FALSE;
    $result['output'] = "Cannot send heart = 0 " ;
  }
  */

  return $result;
}


function recreate_qrcode(){
  $result = array();

  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  $param = json_decode(file_get_contents('php://input'), true);

  if (!isset($param['uid'])) {
    $result['result'] = FALSE;
    $result['message'] = "Error : parameter";
    return $result;
  }

  global $firebase;
  $getallheaders = getallheaders();

  $uid                = $param['uid'];
  $platform           = $getallheaders['platform'];
  $bundleidentifier   = $getallheaders['bundle_identifier'];

  ///-----------

  $account = user_load($uid);

  generatorQRCode($account, $platform, $bundleidentifier);

  $profile = profile2_by_uid_load($account->uid, 'main');
  $url_my_qrcode = substr(file_create_url($profile->field_profile_my_qrcode[LANGUAGE_NONE][0]['uri']), strlen($GLOBALS['base_url']));

  
  // add profile ให้กับ user
  $values = array(
                  "url_my_qrcode" => $url_my_qrcode
                );
  
  /*
   #1 : บันทึก profile ตัวเองไว้ที่ firebase
  */
  $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $account->uid . '/profiles/', $values);

  ///-----------

  $result['result']        = TRUE;
  $result['url_my_qrcode'] = $url_my_qrcode;

  return $result;
}

/*
  $value = array();
  $value['field_name'] = 'field_profile_my_id'; // field collection name

  $value['field_profile_my_id_value'][LANGUAGE_NONE][0]['value'] = $my_id;
  $value['field_profile_my_id_is_edit'][LANGUAGE_NONE][0]['value'] = "1";

  // Create the field collection entry and associate it with the profile
  $field_entity = entity_create('field_collection_item', $value);
  $field_entity->setHostEntity('profile2', $profile);
  $field_entity->save();




  /// 
  $query  = new EntityFieldQuery;
  $result = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', $content_type)
    ->fieldCondition('field_platform', 'value', strtolower($platform), '=')
    ->propertyCondition('title', $udid, '=')
    ->execute();

  // dpm($result['node']);

  if (!empty($result['node'])) {
    $nids = array_keys($result['node']);
    foreach ($nids as $key => $nid) {
      $node = node_load($nid);
      $node_wrapper = entity_metadata_wrapper('node', $node);
      $node_wrapper->field_key_token_notification->set($token);
      $node_wrapper->save();
    }
  }else{
*/
function find_friend(){
  $result = array();

  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  $param = json_decode(file_get_contents('php://input'), true);

  if (!isset($param['uid']) || !isset($param['fction']) || !isset($param['code'])) {
    $result['result'] = FALSE;
    $result['param'] = $param;
    return $result;
  }

  global $firebase;
  $uid        = $param['uid'];

  /*
  0 = my id
  1 = qrcode
  */
  $fction     = $param['fction'];
  $code       = $param['code'];

  switch ($fction) {
    case '0':{
        /*
          เป็นการ find friend จาก id
        */
        
        $query  = new EntityFieldQuery;
        $output = $query->entityCondition('entity_type', 'field_collection_item')
                  ->entityCondition('bundle', 'field_profile_my_id')
                  ->fieldCondition('field_profile_my_id_value', 'value', $code, '=')
                  ->execute();

        if (!empty($output['field_collection_item'])) {
          $key = array_keys($output['field_collection_item'])[0];

          // เราจะได้ friend_id ของเจ้าของ code นี้
          $friend_id   = field_collection_item_load($key)->hostEntity()->uid;

          // กรณีเป้น ตัวเอง(My self)
          if (strcasecmp($uid, $friend_id) == 0) {

            $result['result']     = TRUE;
            $result['friend_status']  = '99';
            $result['message']    = "You can't add yourself as a friend.";
            return  $result;
          }

          // เป้น การ load friends ของ uid ขึ้นมาเช็ดว่า friend_id เป้น friend เราอยุ่หรือไม่
          $profile_user = profile2_by_uid_load($uid, 'main');

          $friend_status = 0;
          foreach ($profile_user->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
              $data_item_load = field_collection_item_load($value['value']);
              
              if($data_item_load->field_friend_uid[LANGUAGE_NONE][0]['value'] == $friend_id){
                
                $friend_status = $data_item_load->field_friend_status[LANGUAGE_NONE][0]['tid'];
                break;
              }
          }

          $profile_friend    = profile2_by_uid_load($friend_id, 'main');

          $result['name']     = $profile_friend->field_profile_name[LANGUAGE_NONE][0]['value'];
          if(count($profile_friend->field_profile_image) > 0){
            $result['url_image'] = substr(file_create_url($profile_friend->field_profile_image[LANGUAGE_NONE][0]['uri']), strlen($GLOBALS['base_url']));
          }else{
            $result['url_image'] = "";
          }

          $result['friend_id']      = $friend_id;

          if ($friend_status == 0) {
            // แสดงยังไม่ได้ เป้นเพือนสามารถเพิ่มเพือนได้ โดย return profile 
            $result['result']         = TRUE;
            $result['friend_status']  = '0';
           
          }else{
              switch ($friend_status) {
                // Friend กรณีเราเป็นเพือนกันอยู่แล้ว
                case '10':{
                  $result['result']         = TRUE;
                  $result['friend_status']  = '10';
                  $result['message']        = "is already your friend.";
                }
                  break;

                // Friend Cancel : กรณีเราเคยขอเป้นเพือนแล้วโดน เพือน กด cancel
                case '13':{
                  $result['result']         = TRUE;
                  $result['friend_status']  = '13';
                  $result['message']        = "Friend Cancel.";
                }
                  break;

                // Friend request : กรณีเราส่งคำขอเป้นเพือน
                case '11':{
                  $result['result']         = TRUE;
                  $result['friend_status']  = '11';
                  $result['message']        = "Friend request.";
                }
                  break;

                // Wait for a friend : เพือนคนนี้ส่งคำขอ ขอเราเป็นเพือน
                case '12':{
                  $result['result']         = TRUE;
                  $result['friend_status']  = '12';
                  $result['message']        = "Wait for a friend.";
                }
                  break;
                
                default:
                  # code...
                  break;
              }
          }
        }else{
          // กรณีหาเพือ่นไม่เจอ 
          $result['result']   = TRUE;
          $result['friend_status']  = '-1';
          $result['code']  = $code;
          $result['message']  = "Friend not found.";
          return $result;
        }
      }
      break;

      case '1':{
        /*
          เป็นการ find friend จาก scan qrcode. เราต้อง เอา code ทีได้จากการ scan มา decode ก่อน โดย code คือ friend_id นั้นเอง
        */

        $friend_id = dec_enc('decrypt', $code);


        if (!is_numeric($friend_id)) {
          $result['result']     = FALSE;
          $result['message']    = "error_reporting()";
          return  $result;
        }

        // กรณีเป้น ตัวเอง(My self)
        if (strcasecmp($uid, $friend_id) == 0) {

          $result['result']     = TRUE;
          $result['friend_status']  = '99';
          $result['message']    = "You can't add yourself as a friend.";
          return  $result;
        }

        /*
        เป้น การ load friends ของ uid ขึ้นมาเช็ดว่า friend_id เป้น friend เราอยุ่หรือไม่
        */
        $profile_user = profile2_by_uid_load($uid, 'main');

        $friend_status = 0;
        foreach ($profile_user->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
            $data_item_load = field_collection_item_load($value['value']);
            
            if($data_item_load->field_friend_uid[LANGUAGE_NONE][0]['value'] == $friend_id){
              
              $friend_status = $data_item_load->field_friend_status[LANGUAGE_NONE][0]['tid'];
              break;
            }
        }

        $profile_friend    = profile2_by_uid_load($friend_id, 'main');

        $result['name']     = $profile_friend->field_profile_name[LANGUAGE_NONE][0]['value'];
        if(count($profile_friend->field_profile_image) > 0){
          $result['url_image'] = substr(file_create_url($profile_friend->field_profile_image[LANGUAGE_NONE][0]['uri']), strlen($GLOBALS['base_url']));
        }else{
          $result['url_image'] = "";
        }

        $result['friend_id']      = $friend_id;

        if ($friend_status == 0) {
          // แสดงยังไม่ได้ เป้นเพือนสามารถเพิ่มเพือนได้ โดย return profile 
          $result['result']         = TRUE;
          $result['friend_status']  = '0';
         
        }else{
          switch ($friend_status) {
            // Friend กรณีเราเป็นเพือนกันอยู่แล้ว
            case '10':{
              $result['result']         = TRUE;
              $result['friend_status']  = '10';
              $result['message']        = "is already your friend.";
            }
              break;

            // Friend Cancel : กรณีเราเคยขอเป้นเพือนแล้วโดน เพือน กด cancel
            case '13':{
              $result['result']         = TRUE;
              $result['friend_status']  = '13';
              $result['message']        = "Friend Cancel.";
            }
              break;

            // Friend request : กรณีเราส่งคำขอเป้นเพือน
            case '11':{
              $result['result']         = TRUE;
              $result['friend_status']  = '11';
              $result['message']        = "Friend request.";
            }
              break;

            // Wait for a friend : เพือนคนนี้ส่งคำขอ ขอเราเป็นเพือน
            case '12':{
              $result['result']         = TRUE;
              $result['friend_status']  = '12';
              $result['message']        = "Wait for a friend.";
            }
              break;
            
            default:
              # code...
              break;
          }
        }
      }
      break;
    
    default:
      # code...
      break;
  }

  return $result;
}

function find_friend2(){
  $result = array();

  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

   if (empty($_POST['fction']) || empty($_POST['uid'])) {
    $result['result'] = FALSE;
    return $result;
  }

  global $firebase;
  $uid        = $_POST['uid'];
  $fction     = $_POST['fction'];
  $uid_friend = $_POST['uid_friend'];
  $isQR       = $_POST['isQR'];

  // เป้นการโหลดข้อมูลของ profile user ซึ่งจะได้รู้ friend ของ uid นี้
  $user_fields = user_load($uid);

  if (!$user_fields->uid) {
    $result['result'] = FALSE;
    $result['output'] = "uid not match is user";

    return $result;
  }

  if (strcasecmp($isQR, '0') == 0) {
    # การค้นหาแบบ id search

      $uids = db_select('users', 'ur')
        ->fields('ur', array('uid'))
        // ->condition('ur.uid', $uid, '!=')
        // ->condition('ur.uid', 0, '!=')
        // ->condition('ur.uid', 1, '!=')
        ->condition('ur.uid', 0, '!=')
        ->condition('ur.uid', 1, '!=')
        ->condition('ur.uid', $uid, '!=')
        ->execute()
        ->fetchCol();

    $mul_users =  user_load_multiple($uids);

    $tm = array();

    foreach ($mul_users as $account) {
      # code...
      
      // $tmp['uid'] = $account->uid;
      // $tmp['name'] = $account->name;
      // $tmp['mail'] = $account->mail;

      // // $path= file_create_url($uri)  uri
      // if(!is_null($account->picture)){
      //   $tmp['url_image'] = file_create_url($account->picture->uri); 
      // }else{
      //   $tmp['url_image'] = "";
      // }

      // เป้นการโหลดข้อมูลของ profile user ซึ่งจะได้รู้ว่า friend ของ user
      $user_fields = user_load($account->uid);

      if (!$user_fields->uid) {
        // User is not logged in
        //services_error(t('User is not logged in.'), 406);

        continue;
      }

      // $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);

      // $key = $profile2_load_by_user->field_profile_heart_id[LANGUAGE_NONE][0]['value'];

      // $tm[] = $profile2_load_by_user->field_profile_heart_id;


      $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);

      $profile =  profile2_load($profile2_load_by_user['main']->pid);

      // $key = $profile->field_profile_heart_id[LANGUAGE_NONE][0]['value'];

    /*
      // ที่ใช้ uid_friend เพราว่าเราใช้ function ร่วมกันกับ search qrcode ด้วย
      if (strcasecmp($uid_friend, $key) == 0) {
        # code...

        $result['result'] = TRUE;
        $result['data']   = $profile;

        return  $result;

        break;
      }
      */
    }

    $result['result'] = FALSE;
    $result['message']   = "User not found.";

    return  $result;

  }else{
    # การค้นหาแบบ qrcode

    $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);

    // $profile2_load_by_user->field_profile_heart[LANGUAGE_NONE][0]['value'] = 99;

    // profile2_save($profile2_load_by_user);

    // Load Profile ขึ้นมาเพือจะทำการแก้ไข
    $profile =  profile2_load($profile2_load_by_user['main']->pid);


    //  load profile ของ uid friend
    $friend_fields = user_load($_POST['uid_friend']);
    $profile2_load_by_friend = profile2_load_by_user($friend_fields, NULL);

    // load profile ของ uid friend

     // เช็กว่าเพือนคนนี้ เป้นเพือนเราอยู่แล้วหรือไม่ (check is friend duplicate ?)
    foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
      // Build array of field collection values.

      $data = field_collection_item_load($value['value']);

      if($data->field_friend_uid[LANGUAGE_NONE][0]['value'] == $_POST['uid_friend']) {

  /*
   0 = Family
   1 = Favority
   2 = Friends
   3 = Friend Requests, -3 = User cancel Friend Requests
   4 = Wait to Accept,  -4 = เป็นตัวบอกว่า เพือน cancel คำขอของเรา
   5 = Hide
   6 = Block
   
   -2 = เพื่อน cancel คำขอ
   -4 = เรา cancel wait to accept
   */

        switch ($data->field_heart_friend_status[LANGUAGE_NONE][0]['value']) {
          case '0':
          case '1':
          case '2':
            # code...
          $message = "is already your friend.";
            break;

          case '3':
          $message = "Friend Requests";
            break;
          case '4':
            # code...
          $message = "wait to accept";
            break;
          
          default:
            # code...
            break;
        }

        $result['result']   = TRUE;
        $result['message']  = $message;
        $result['status']   = strval($data->field_heart_friend_status[LANGUAGE_NONE][0]['value']);
        $result['data']     = profile2_load($profile2_load_by_friend['main']->pid);
        return $result;
      }
    }


    $result['result']   = TRUE;
    $result['data']     = profile2_load($profile2_load_by_friend['main']->pid);
    $result['status']   = '99';
  }

  return $result;
}

function people_you_may_know(){

  $result = array();

  if (empty($_REQUEST['uid'])) {
    $result['result'] = FALSE;
    return $result;
  }

  /*
  // เป้นการโหลดข้อมูลของ profile user ซึ่งจะได้รู้ว่า friend ของ user
  $user_fields = user_load($_POST['uid']);

  if (!$user_fields->uid) {
    // User is not logged in
    //services_error(t('User is not logged in.'), 406);

    $result['result'] = FALSE;
    $result['output'] = "uid not match is user";

    return $result;
  }

  $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);

  // Load Profile ขึ้นมาเพือจะทำการแก้ไข
  $profile =  profile2_load($profile2_load_by_user['main']->pid);
  */


  $profile = profile2_by_uid_load($_REQUEST['uid'], 'main');
  $uid_friends = array('0', '1', $_REQUEST['uid']);

  $tm =array();
  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    // Build array of field collection values.

    $data_item_load = field_collection_item_load($value['value']);

    // 
    // field_heart_friend_status == 99 เราจะนํามาคิดด้วย
    // if ($data->field_heart_friend_status[LANGUAGE_NONE][0]['value'] != '99') {
    //   # code...
    //   $uid_friends[] = $data->field_friend_uid[LANGUAGE_NONE][0]['value'];
    // }

    if (strcasecmp($data_item_load->field_heart_friend_status[LANGUAGE_NONE][0]['value'], '-999') == 0) {
      # code...
      $tm[] = $data_item_load->field_friend_uid[LANGUAGE_NONE][0]['value'];
      continue;
    }else if (strcasecmp($data_item_load->field_heart_friend_status[LANGUAGE_NONE][0]['value'], '-2') == 0) {
      # code...
      $tm[] = $data_item_load->field_friend_uid[LANGUAGE_NONE][0]['value'];
      continue;
    }else if (strcasecmp($data_item_load->field_heart_friend_status[LANGUAGE_NONE][0]['value'], '-4') == 0) {
      # code...
      $tm[] = $data_item_load->field_friend_uid[LANGUAGE_NONE][0]['value'];
      continue;
    }

    $uid_friends[] = $data_item_load->field_friend_uid[LANGUAGE_NONE][0]['value'];
  }
  // เป้นการโหลดข้อมูลของ profile user ซึ่งจะได้รู้ว่า friend ของ user 


  $uids = db_select('users', 'ur')
        ->fields('ur', array('uid'))
        // ->condition('ur.uid', $uid, '!=')
        // ->condition('ur.uid', 0, '!=')
        // ->condition('ur.uid', 1, '!=')
        ->condition('ur.uid', $uid_friends, 'NOT IN')
        ->orderBy("ur.uid", "ASC")
        ->execute()
        ->fetchCol();

  $users =  user_load_multiple($uids);

  $data = array();
  foreach ($users as $account) {
    # code...
    
    $tmp['uid'] = $account->uid;
    // $tmp['name'] = $account->name;
    $tmp['mail'] = $account->mail;

/*
    // $path= file_create_url($uri)  uri
    if(!is_null($account->picture)){
      $tmp['url_image'] = file_create_url($account->picture->uri); 
    }else{
      $tmp['url_image'] = "";
    }

    */


  
    // $friend_user_fields = user_load($account->uid);
    // $profile_friend = profile2_load(profile2_load_by_user($friend_user_fields, NULL)['main']->pid);

    // 

    $profile_friend = profile2_by_uid_load($account->uid, 'main');
    $tmp['name'] = $profile_friend->field_profile_name[LANGUAGE_NONE][0]['value'];
    if(count($profile_friend->field_profile_image) > 0){
      $tmp['url_image'] = file_create_url($profile_friend->field_profile_image[LANGUAGE_NONE][0]['uri']);
    }else{
      $tmp['url_image'] = "";
    }
    $data[] = $tmp;
  }

  $result['result'] = TRUE;
  $result['function'] = "people_you_may_know";
  $result['data'] = $data;

  $result['uid_friends'] = $uid_friends;
  $result['tm'] = $tm;

  return $result;
}

function edit_display_name(){
  $result = array();

  if (empty($_REQUEST['uid'] || empty($_REQUEST['name']))) {
    $result['result'] = FALSE;
    return $result;
  }

  // Load Profile ขึ้นมาเพือจะทำการแก้ไข
  $profile = profile2_by_uid_load($_REQUEST['uid'], 'main');
  $profile->field_profile_name[LANGUAGE_NONE][0]['value'] = $_REQUEST['name'];
  $profile->field_profile_display_name[LANGUAGE_NONE][0]['value'] = $_REQUEST['name'];

  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    // จะได้ เพือนมาทั้งหมด
    $data_item_load = field_collection_item_load($value['value']);

    // Load profile ของเพือนแต่ละคน เพื่อที่เราจะ update รูปของเราที่เป้นเพือนด้วย
    $fprofile = profile2_by_uid_load($data_item_load->field_friend_uid[LANGUAGE_NONE][0]['value'], 'main');
    foreach ($fprofile->field_profile_friends[LANGUAGE_NONE] as $fkey => $fvalue) {
      $fdata_item_load = field_collection_item_load($fvalue['value']);

      /*
        เราต้องเช็ดว่า เพื่อนคนใหน uid ตรงกันเรา ถึงจะ update displayname
      */
      if($fdata_item_load->field_friend_uid[LANGUAGE_NONE][0]['value'] == $_REQUEST['uid']){
        $wrapper = entity_metadata_wrapper('field_collection_item', $fdata_item_load);
            
        $wrapper->field_display_name->set($_REQUEST['name']);
        $wrapper->save();

        break;
      }
    }
  }

  profile2_save($profile);

  $result['result'] = TRUE;
  return  $result;
}

function turn_off_notifications(){
  $result = array();
  if (empty($_REQUEST['uid'] || empty($_REQUEST['uid_friend']))) {
    $result['result'] = FALSE;
    return $result;
  }

  // Load Profile ขึ้นมาเพือจะทำการแก้ไข
  $profile = profile2_by_uid_load($_REQUEST['uid'], 'main');
  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    $data = field_collection_item_load($value['value']);

    if($data->field_friend_uid[LANGUAGE_NONE][0]['value'] == $_REQUEST['uid_friend']){
      $wrapper = entity_metadata_wrapper('field_collection_item', $data);

      //Update value
      $wrapper->field_turn_off_notifications->set($_POST['status']);
      $wrapper->save();
      break;
    }
  }
  $result['result']   = TRUE;
  return  $result;
}

function turn_off_notifications_v1()
{
  $result = array();

  $user_fields = user_load($_POST['uid']);
  // $uid_fields = user_load($_POST['uid_friend']);
  // $name = user_load($_POST['name']);

  if (!$user_fields->uid) {
    // User is not logged in
    //services_error(t('User is not logged in.'), 406);

    $result['result'] = FALSE;
    $result['output'] = "uid not match is user";

    return $result;
  }

  $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);

  // Load Profile ขึ้นมาเพือจะทำการแก้ไข
  $profile =  profile2_load($profile2_load_by_user['main']->pid);

  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    // Build array of field collection values.

    $data = field_collection_item_load($value['value']);

    // $uid_friends[] = $data->field_friend_uid[LANGUAGE_NONE][0]['value'];

    // if($value['value'] == 16){
    if($data->field_friend_uid[LANGUAGE_NONE][0]['value'] == $_POST['uid_friend']){
      $wrapper = entity_metadata_wrapper('field_collection_item', $data);

      //Update value
      $wrapper->field_turn_off_notifications->set($_POST['status']);
      $wrapper->save();

      /*
      // Firebase increment new HW Login
      $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);
      $data = array(
        "turn_off_notifications"  =>$_POST['status'],
        "update"        => time()
      );

      $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $_POST['uid'] ."/friends/" . $_POST['uid_friend'] . "/", $data);
      */

      break;
      
    }
  }

  $result['result']   = TRUE;
  
  return  $result;
}

function hide_friend(){
  $result = array();
  if (empty($_REQUEST['uid'] || empty($_REQUEST['uid_friend']))) {
    $result['result'] = FALSE;
    return $result;
  }

  // Load Profile ขึ้นมาเพือจะทำการแก้ไข
  $profile = profile2_by_uid_load($_REQUEST['uid'], 'main');
  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    $data = field_collection_item_load($value['value']);

    if($data->field_friend_uid[LANGUAGE_NONE][0]['value'] == $_REQUEST['uid_friend']){
      $wrapper = entity_metadata_wrapper('field_collection_item', $data);

      //Update value
      $wrapper->field_heart_friend_status->set($_REQUEST['status']);
      $wrapper->save();
      break;
    }
  }
  $result['result'] = TRUE;
  return  $result;
}

function hide_friend_v1(){

  $result = array();

  $user_fields = user_load($_POST['uid']);
  // $uid_fields = user_load($_POST['uid_friend']);
  // $name = user_load($_POST['name']);

  if (!$user_fields->uid) {
    // User is not logged in
    //services_error(t('User is not logged in.'), 406);

    $result['result'] = FALSE;
    $result['output'] = "uid not match is user";

    return $result;
  }

  $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);

  // Load Profile ขึ้นมาเพือจะทำการแก้ไข
  $profile =  profile2_load($profile2_load_by_user['main']->pid);

  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    // Build array of field collection values.

    $data = field_collection_item_load($value['value']);

    // $uid_friends[] = $data->field_friend_uid[LANGUAGE_NONE][0]['value'];

    // if($value['value'] == 16){
    if($data->field_friend_uid[LANGUAGE_NONE][0]['value'] == $_POST['uid_friend']){
      $wrapper = entity_metadata_wrapper('field_collection_item', $data);

      //Update value
      $wrapper->field_heart_friend_status->set($_POST['status']);
      $wrapper->save();

      /*
      // Firebase increment new HW Login
      $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);
      $data = array(
        "friend_status"  =>$_POST['status'],
        "update"        => time()
      );

      $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $_POST['uid'] ."/friends/" . $_POST['uid_friend'] . "/", $data);
      */

      break;
      
    }
  }

  $result['result']   = TRUE;
  $result['function'] = "hide_friend";
  $result['status']   = $_POST['status'];
  $result['data']     = $_POST;
  return  $result;
}

function set_class_friend()
{
  $result = array();

  $user_fields = user_load($_POST['uid']);
  // $uid_fields = user_load($_POST['uid_friend']);
  // $name = user_load($_POST['name']);

  if (!$user_fields->uid) {
    // User is not logged in
    //services_error(t('User is not logged in.'), 406);

    $result['result'] = FALSE;
    $result['output'] = "uid not match is user";

    return $result;
  }

  $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);

  // Load Profile ขึ้นมาเพือจะทำการแก้ไข
  $profile =  profile2_load($profile2_load_by_user['main']->pid);

  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    // Build array of field collection values.

    $data_item_load = field_collection_item_load($value['value']);

    if(strcasecmp($data_item_load->field_friend_uid[LANGUAGE_NONE][0]['value'], $_POST['uid_friend']) == 0){
      $wrapper = entity_metadata_wrapper('field_collection_item', $data_item_load);

      //Update value
      $wrapper->field_heart_friend_status->set($_POST['status']);
      $wrapper->save(TRUE);

      /*
      // Firebase increment new HW Login
      $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);
      $data_update = array(
        "friend_status"  =>$_POST['status'],
        "update"        => time()
      );

      $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $_POST['uid'] ."/friends/" . $_POST['uid_friend'] . "/", $data_update);
      */

      $result['result']   = TRUE;
      $result['function'] = "set_class_friend";
      return  $result;

      break;
      
    }
  }

  $result['result']   = TRUE;
  $result['function'] = "set_class_friend";
  $result['status']   = $_POST['status'];
  $result['data']     = $_POST;
  return  $result;

}

function cancel_wait_to_accept(){

  $result = array();
  if (empty($_REQUEST['uid'] || empty($_REQUEST['uid_friend']))) {
    $result['result'] = FALSE;
    return $result;
  }

  $profile = profile2_by_uid_load($_REQUEST['uid'], 'main');
  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    $data = field_collection_item_load($value['value']);
    if($data->field_friend_uid[LANGUAGE_NONE][0]['value'] == $_REQUEST['uid_friend']){
      $wrapper = entity_metadata_wrapper('field_collection_item', $data);
      $wrapper->field_heart_friend_status->set($_POST['status']);
      $wrapper->save();
      break;
    }
  }

  $fprofile = profile2_by_uid_load($_REQUEST['uid_friend'], 'main');
  foreach ($fprofile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    $data = field_collection_item_load($value['value']);
    if($data->field_friend_uid[LANGUAGE_NONE][0]['value'] == $_REQUEST['uid']){
      $wrapper = entity_metadata_wrapper('field_collection_item', $data);            
      entity_delete_multiple('field_collection_item', array($wrapper->getIdentifier()));
      break;
    }
  }

  $result['result'] = TRUE;
  return  $result;
}

function edit_friend_display_name(){

  $result = array();

  if (empty($_REQUEST['uid'] || empty($_REQUEST['name']))) {
    $result['result'] = FALSE;
    return $result;
  }

  // $user_fields = user_load($_REQUEST['uid']);
  // $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);

  // // Load Profile ขึ้นมาเพือจะทำการแก้ไข
  // $profile =  profile2_load($profile2_load_by_user['main']->pid);

  $profile = profile2_by_uid_load($_REQUEST['uid'], 'main');
  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    // Build array of field collection values.

    $data = field_collection_item_load($value['value']);

    // $uid_friends[] = $data->field_friend_uid[LANGUAGE_NONE][0]['value'];

    // if($value['value'] == 16){
    if($data->field_friend_uid[LANGUAGE_NONE][0]['value'] == $_REQUEST['uid_friend']){
      $wrapper = entity_metadata_wrapper('field_collection_item', $data);

      //Update value
      $wrapper->field_display_name->set($_REQUEST['name']);
      $wrapper->save();


      /*
      // Firebase increment new HW Login
      $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);
      $data_update = array(
        "display_name"  =>$_REQUEST['name'],
        "is_update_display_name"=>"1"
      );

      $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $_REQUEST['uid'] ."/data/contacts/" . $_REQUEST['uid_friend'] . "/", $data_update);
      */

      break;
      
    }
  }

  $result['result'] = TRUE;
  $result['value']  = $_REQUEST['name'];
  return  $result;
}
/*
function edit_display_name(){
  $result = array();

  if (empty($_REQUEST['uid'] || empty($_REQUEST['name']))) {
    $result['result'] = FALSE;
    return $result;
  }

  $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);

  $user_fields = user_load($_REQUEST['uid']);
  $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);

  // Load Profile ขึ้นมาเพือจะทำการแก้ไข
  $profile =  profile2_load($profile2_load_by_user['main']->pid);
  $profile->field_profile_name[LANGUAGE_NONE][0]['value'] = $_REQUEST['name'];

  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    // Build array of field collection values.

    $data = field_collection_item_load($value['value']);

    // $uid_friends[] = $data->field_friend_uid[LANGUAGE_NONE][0]['value'];

    $friend_uid = $data->field_friend_uid[LANGUAGE_NONE][0]['value'];

    $is_update_display_name = $firebase->get(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $friend_uid . "/data/contacts/" . $_POST['uid'] . "/is_update_display_name/");

    if (intval($is_update_display_name) == 0) {
      $value = array(
        "display_name"  => $_REQUEST['name']
      );

      $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $friend_uid . "/data/contacts/" . $_REQUEST['uid'], $value);
    }

  }
  profile2_save($profile);

  $value = array(
    "display_name"  => $_REQUEST['name']
  );

  $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $user_fields->uid . '/data/profile/', $value);

  $result['result'] = TRUE;
  $result['value']  = $_REQUEST['name'];
  return  $result;
}
*/

function edit_phone_v1_0()
{
  $result = array();

  $user_fields = user_load($_POST['uid']);
  // เป็นการ โหลด profile เพือเราจะหา pid ของ user นั้นๆ
  $profile2_load_by_user = profile2_load_by_user($user_fields, NULL)['main'];

  $profile2_load_by_user->field_profile_phone[LANGUAGE_NONE][0]['value'] = $_POST['number'];

  profile2_save($profile2_load_by_user);


  /*

  $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);
  $data = array(
    "phone"  => $_POST['number'],
    "update"  => time()
  );
  // $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $user_fields->uid, $data);

  $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $user_fields->uid . '/data/profile/', $data);



  $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);
  $profile =  profile2_load($profile2_load_by_user['main']->pid);

  // $uid_friends = array();
  $data = array();
  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    // Build array of field collection values.

    $data_item_load = field_collection_item_load($value['value']);

    $data_update = array(
      "phone" => $_POST['number'],
      "update"  => time()
    );
  
    $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $data_item_load->field_friend_uid[LANGUAGE_NONE][0]['value'] . '/friends/' . $user_fields->uid, $data_update);
  }
  */

  $result['result'] = TRUE;
  $result['status'] = "0";

  return $result;
}

function edit_phone()
{
  $result = array();

  /* v1.0
  $user_fields = user_load($_POST['uid']);
  // เป็นการ โหลด profile เพือเราจะหา pid ของ user นั้นๆ
  $profile2_load_by_user = profile2_load_by_user($user_fields, NULL)['main'];

  $profile2_load_by_user->field_profile_phone[LANGUAGE_NONE][0]['value'] = $_POST['number'];

  profile2_save($profile2_load_by_user);


  $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);
  $data = array(
    "phone"  => $_POST['number'],
    "update"  => time()
  );
  // $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $user_fields->uid, $data);

  $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $user_fields->uid . '/profile/', $data);



  $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);
  $profile =  profile2_load($profile2_load_by_user['main']->pid);

  // $uid_friends = array();
  $data = array();
  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    // Build array of field collection values.

    $data_item_load = field_collection_item_load($value['value']);

    $data_update = array(
      "phone" => $_POST['number'],
      "update"  => time()
    );
  
    $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $data_item_load->field_friend_uid[LANGUAGE_NONE][0]['value'] . '/friends/' . $user_fields->uid, $data_update);
  }
  */


  //  v1.1 support multi phone
  // fction เป็นตัวบอกว่า เพิ่ม, แก้ไข, ลบ*/

  /*

  number_old, number_new 
  กรณีเพิ่มใหม่ เราจะคิดเฉพาะ number_new เท่านั้น
  กรณีแก้ไข่ เราจะคิดเฉพาะ number_old, number_new 
  */

  switch ($_POST['fction']) {
    case 'add':
    {
        // #1 load profile friend
        $user_fields = user_load($_POST['uid']);

        if (!$user_fields->uid) {

          $result['result'] = FALSE;
          $result['output'] = "User is not logged in";

          return $result;
        }

        $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);
        $profile =  profile2_load($profile2_load_by_user['main']->pid);
        // #2 load profile friend

        // #3 
        $flag = TRUE;
        // check is phone number duplicat
        foreach ($profile->field_profile_multi_phone[LANGUAGE_NONE] as $key => $value) {
            $data_item_load = field_collection_item_load($value['value']);
            if($data_item_load->field_phone_number[LANGUAGE_NONE][0]['value'] == $_POST['number_new']){
              
              $flag = FALSE;
              break;
            }
        }

        if ($flag) {
          # code...
          $value = array();
          $value['field_name'] = 'field_profile_multi_phone'; // field collection name

          $value['field_phone_number'][LANGUAGE_NONE][0]['value'] = $_POST['number_new'];

          // Create the field collection entry and associate it with the profile
          $field_entity = entity_create('field_collection_item', $value);
          $field_entity->setHostEntity('profile2', $profile);
          $field_entity->save();

          $result['result'] = TRUE;
          $result['status'] = "0";
          $result['fction'] = $_POST['fction'];
        }else{
          $result['result'] = TRUE;
          $result['status'] = "1";
          $result['message'] = "Duplicate Phone number";
          $result['$_POST'] = $_POST;
        }
      break;
    }

    case 'edit':{
      // #1 load profile friend
      $user_fields = user_load($_POST['uid']);

      if (!$user_fields->uid) {

        $result['result'] = FALSE;
        $result['output'] = "User is not logged in";

        return $result;
      }

      $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);
      $profile =  profile2_load($profile2_load_by_user['main']->pid);
      // #2 load profile friend

      // #3 
      $flag = TRUE;
      // check is phone number duplicat
      foreach ($profile->field_profile_multi_phone[LANGUAGE_NONE] as $key => $value) {
          $data_item_load = field_collection_item_load($value['value']);
          if($data_item_load->field_phone_number[LANGUAGE_NONE][0]['value'] == $_POST['number_old']){
            
            $wrapper = entity_metadata_wrapper('field_collection_item', $data_item_load);

            //Update value
            $wrapper->field_phone_number->set($_POST['number_new']);
            $wrapper->save(TRUE);

            /*
            // Firebase increment new HW Login
            $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);
            $data_update = array(
              "phone"  =>$_POST['number_new'],
              "update" => time()
            );

            $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $_POST['uid'] ."/data/profile/", $data_update);
            */
            break;
          }
      }

      $result['result'] = TRUE;
      $result['status'] = "0";
      $result['number_old'] = $_POST['number_old'];
      $result['fction'] = $_POST['fction'];

      break;
    }
    case 'delete':
      # code...
      break;
    
    default:
      # code...
      break;
  }

  return  $result;
}

function edit_multi_phone()
{
  $result = array();

  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  $param = json_decode(file_get_contents('php://input'), true);

  if (empty($param['fction']) || empty($param['uid'])) {
    $result['result'] = FALSE;
    $result['message'] = "function edit_multi_phone : parameter";
    return $result;
  }

  global $firebase;

  //  v1.1 support multi phone
  // fction เป็นตัวบอกว่า เพิ่ม, แก้ไข, ลบ*/

  /*

  number_old, number_new 
  กรณีเพิ่มใหม่ เราจะคิดเฉพาะ number_new เท่านั้น
  กรณีแก้ไข่ เราจะคิดเฉพาะ number_old, number_new 
  */

  
  $uid    = $param['uid'];
  $fction = $param['fction'];
  $item_id= $param['item_id'];
  $number = $param['number'];

  switch ($fction) {
    case 'add':
    {
        // #1 load profile friend
        // $user_fields = user_load($_POST['uid']);
        // $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);
        // $profile =  profile2_load($profile2_load_by_user['main']->pid);
        // #2 load profile friend

        $profile = profile2_by_uid_load($uid, 'main');

        // #3 
        $flag = TRUE;
        // check is phone number duplicat
        if(isset($profile->field_profile_multi_phone)){
          foreach ($profile->field_profile_multi_phone[LANGUAGE_NONE] as $key => $value) {
              $data_item_load = field_collection_item_load($value['value']);
              if($data_item_load->field_phone_number[LANGUAGE_NONE][0]['value'] == $number){
                
                $flag = FALSE;
                break;
              }
          }
        }

        if ($flag) {
          # code...
          $value = array();
          $value['field_name'] = 'field_profile_multi_phone'; // field collection name

          $value['field_phone_number'][LANGUAGE_NONE][0]['value'] = $number;
          $value['field_enable'][LANGUAGE_NONE][0]['value'] = "1";

          // Create the field collection entry and associate it with the profile
          $field_entity = entity_create('field_collection_item', $value);
          $field_entity->setHostEntity('profile2', $profile);
          $field_entity->save();

          /*
          $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);

          $value = array(
            "number"  => $_POST['number'],
            "enabled"   => "1",  
            "create"  => time(),
            "update"  => time()
          );
          // $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $user_fields->uid, $data);

          $firebase->set(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $user_fields->uid . '/data/profile/phones/' . $field_entity->item_id, $value);
          */

          $value = array(
            "name"      => $number,
            "enabled"   => "1"  // เปิด หรือ ปิดการใช้
          );
          // $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $user_fields->uid, $data);

          // $firebase->set(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $user_fields->uid . '/data/profile/mails/' . $field_entity->item_id, $value);

          $firebase->set(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $uid ."/profiles/phones/" . $field_entity->item_id, $value);

          $result['result']  = TRUE;
          $result['is_edit']  = FALSE;
          $result['item_id'] = $field_entity->item_id;
          $result['value']    = $value;
        }else{
          $result['result'] = FALSE;
          $result['message'] = "Duplicate phone.";
        }
      break;
    }

    case 'delete':{

      // $user_fields = user_load($_POST['uid']);
      // $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);
      // $profile =  profile2_load($profile2_load_by_user['main']->pid);
      // #2 load profile friend

      $profile = profile2_by_uid_load($uid, 'main');
      // #3 
      $flag = TRUE;
      // check is phone number duplicat
      foreach ($profile->field_profile_multi_phone[LANGUAGE_NONE] as $key => $value) {
          $data_item_load = field_collection_item_load($value['value']);
          if($data_item_load->item_id == $item_id){
            entity_delete_multiple('field_collection_item', array($data_item_load->item_id));

            // firebase->delete(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $uid ."/profiles/phones/" . $data_item_load->item_id);
            
            $result['result']   = TRUE;
            $result['item_id']  = $data_item_load->item_id;
            return $result;
            break;
          }
      }
      break;
    }
    
    default:
      # code...
      break;
  }

  return  $result;
}

function add_call_waiting(){
  $result = array();
  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  if (empty($_REQUEST['uid']) || empty($_REQUEST['image'])) {
    $result['result'] = FALSE;
    $result['message']  = "function : add_call_waiting, parameter";
    $result['_REQUEST']  = $_REQUEST;
    return $result;
  }

  $result['result'] = TRUE;
  // $result['data']   = $sound_call_waitings;
  return  $result;
}

function list_default_call_waiting()
{
  $result = array();

  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  $param = json_decode(file_get_contents('php://input'), true);

  if (empty($param['uid'])) {
    $result['result'] = FALSE;
    $result['message'] = "function list_default_call_waiting : parameter";
    return $result;
  }

  $uid = $param['uid'];

   /*
  เราจะดึง sound call waiting ของระบบ กับ uid ทีสร้างขึ้นมาเอง
   */
  $query = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'default_sound_call_waiting')
    ->propertyCondition('uid', array(1, $uid))
    ->propertyCondition('status', 1)
    ->execute();  

  $nodes = node_load_multiple(array_keys($entities['node']));  

  $sound_call_waitings = array();
  foreach ($nodes as $node) {
    $fid        = (array)file_load($node->field_call_waiting_uri[LANGUAGE_NONE][0]['fid']);

    // $uid        = $node->uid;
    $nid        = $node->nid;
    $title      = $node->title;
    $sound_url  = substr(file_create_url($fid['uri']), strlen($GLOBALS['base_url']));

    $sound_call_waitings[] = array("nid"=>$nid, "title"=>$title, "sound_url"=>$sound_url);
  } 

  $result['result'] = TRUE;
  $result['data']   = $sound_call_waitings;
  return  $result;
}

function edit_multi_email()
{
  $result = array();

  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  $param = json_decode(file_get_contents('php://input'), true);

  if (empty($param['fction']) || empty($param['uid'])) {
    $result['result'] = FALSE;
    $result['message'] = "function edit_multi_email : parameter";
    return $result;
  }

  global $firebase;

  $fction   = $param["fction"];
  $uid      = $param["uid"];
  $email    = $param["email"];
  $item_id  = $param["item_id"];

  switch (strtolower($fction)) {
    case 'add':
    {
        // #1 load profile friend
        // $user_fields = user_load($_POST['uid']);
        // $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);
        // $profile =  profile2_load($profile2_load_by_user['main']->pid);
        // #2 load profile friend
        $profile = profile2_by_uid_load($uid, 'main');

        // #3 
        $flag = TRUE;
        
        // check is phone number duplicat
        // if(isset($items->field_my_app_update)){

        if(isset($profile->field_profile_multi_email)){
          foreach ($profile->field_profile_multi_email[LANGUAGE_NONE] as $key => $value) {
              $data_item_load = field_collection_item_load($value['value']);
              if($data_item_load->field_email_text[LANGUAGE_NONE][0]['value'] == $email){
                
                $flag = FALSE;
                break;
              }
          }
        }

        if ($flag) {
          # code...
          $value = array();
          $value['field_name'] = 'field_profile_multi_email'; // field collection name

          $value['field_email_text'][LANGUAGE_NONE][0]['value'] = $email;
          $value['field_enable'][LANGUAGE_NONE][0]['value'] = "1";

          // Create the field collection entry and associate it with the profile
          $field_entity = entity_create('field_collection_item', $value);
          $field_entity->setHostEntity('profile2', $profile);
          $field_entity->save();

          $value = array(
            "name"      => $email,
            "enabled"   => "1"  // เปิด หรือ ปิดการใช้
          );
          // $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $user_fields->uid, $data);

          // $firebase->set(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $user_fields->uid . '/data/profile/mails/' . $field_entity->item_id, $value);

          $firebase->set(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $uid ."/profiles/mails/" . $field_entity->item_id, $value);

          $result['result']  = TRUE;
          $result['is_edit'] = FALSE;
          $result['item_id'] = $field_entity->item_id;
          $result['item']    = $value;
        }else{
          $result['result'] = FALSE;
          $result['message'] = "Duplicate Email.";
        }
      break;
    }
    case 'delete':{
      $profile = profile2_by_uid_load($uid, 'main');

      // #3 
      $flag = TRUE;
      // check is phone number duplicat
      foreach ($profile->field_profile_multi_email[LANGUAGE_NONE] as $key => $value) {
          $data_item_load = field_collection_item_load($value['value']);
          if($data_item_load->item_id == $item_id){
            entity_delete_multiple('field_collection_item', array($data_item_load->item_id));

            $firebase->delete(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $uid ."/profiles/mails/" . $data_item_load->item_id);

            $result['result'] = TRUE;
            $result['item_id'] = $data_item_load->item_id;
            return $result;
            break;
          }
      }
      break;
    }
    default:
      # code...
      break;
  }

  return  $result;
}

function edit_status_message(){

  /*
  if (empty($_REQUEST['uid']) || empty($_REQUEST['message'])) {
    $result['result'] = FALSE;
    return  $result;
  }

  $result = array();

  $user_fields = user_load($_REQUEST['uid']);
  // เป็นการ โหลด profile เพือเราจะหา pid ของ user นั้นๆ
  $profile2_load_by_user = profile2_load_by_user($user_fields, NULL)['main'];
  $profile2_load_by_user->field_profile_status_message[LANGUAGE_NONE][0]['value'] = $_REQUEST['message'];
  profile2_save($profile2_load_by_user);


  $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);
  $profile =  profile2_load($profile2_load_by_user['main']->pid);

  // $uid_friends = array();
  $data = array();
  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    // Build array of field collection values.

    $data_item_load = field_collection_item_load($value['value']);
    $data_update = array(
      "status_message" => $_REQUEST['message']
    );
  }

  $result['result'] = TRUE;
  $result['value'] = $_REQUEST['message'];

  return  $result;
  */

  $result = array();

  if (empty($_REQUEST['uid'] || empty($_REQUEST['message']))) {
    $result['result'] = FALSE;
    return $result;
  }

  // Load Profile ขึ้นมาเพือจะทำการแก้ไข
  $profile = profile2_by_uid_load($_REQUEST['uid'], 'main');
  $profile->field_profile_status_message[LANGUAGE_NONE][0]['value'] = $_REQUEST['message'];

  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    /*
      จะได้ เพือนมาทั้งหมด
    */
    $data_item_load = field_collection_item_load($value['value']);

    // Load profile ของเพือนแต่ละคน เพื่อที่เราจะ update รูปของเราที่เป้นเพือนด้วย
    $fprofile = profile2_by_uid_load($data_item_load->field_friend_uid[LANGUAGE_NONE][0]['value'], 'main');
    foreach ($fprofile->field_profile_friends[LANGUAGE_NONE] as $fkey => $fvalue) {
      $fdata_item_load = field_collection_item_load($fvalue['value']);

      /*
        เราต้องเช็ดว่า เพื่อนคนใหน uid ตรงกันเรา ถึงจะ update displayname
      */
      if($fdata_item_load->field_friend_uid[LANGUAGE_NONE][0]['value'] == $_REQUEST['uid']){
        $wrapper = entity_metadata_wrapper('field_collection_item', $fdata_item_load);
            
        $wrapper->field_profile_status_message->set($_REQUEST['message']);
        $wrapper->save();

        break;
      }
    }
  }
  profile2_save($profile);

  $result['result'] = TRUE;
  return  $result;
}

function outgoing_call(){
  $result = array();

  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  $param = json_decode(file_get_contents('php://input'), true);
  if (empty($param['uid']) || empty($param['uuid']) || empty($param['data'])) {
    $result['result'] = FALSE;
    $result['message'] = "function outgoing_call : parameter";
    return $result;
  }

  $uid  = $param['uid'];
  $uuid = $param['uuid'];
  $data = $param['data'];

  $query    = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'field_collection_item')
                ->entityCondition('bundle', 'field_twilio_outgoing_call')
                ->fieldCondition('field_twilio_room_uuid', 'value', $RoomName, '=')
                ->execute();

  if (!empty($entities['field_collection_item'])) {
    $item_id = array_keys($entities['field_collection_item'])[0];
    $data_item = field_collection_item_load($item_id);
  }

  $result['result'] = TRUE;
  return $result;
}

function outgoing_call2(){
  $result = array();

  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  $param = json_decode(file_get_contents('php://input'), true);
  if (empty($param['uid']) || empty($param['item_id']) || empty($param['data'])) {
    $result['result'] = FALSE;
    $result['message'] = "function incoming_call : parameter";
    return $result;
  }

  global $firebase;
  $uid      = $param['uid'];
  $item_id  = $param['item_id'];
  $data     = $param['data'];


  $data_item = field_collection_item_load($item_id);
  if ($data_item) {

    // เราต้องเช็กว่าค่านี้เป็น profile caller หรือไม่
    // $uid_caller = $data_item->hostEntity()->uid;

    if (isset($data_item->field_twilio_video_members)) {
      foreach ($data_item->field_twilio_video_members[LANGUAGE_NONE] as $key => $value) {
        $item_load = field_collection_item_load($value['value']);

        // field_twv_members_status

        if(strcasecmp($item_load->field_twv_members_status[LANGUAGE_NONE][0]['value'], "participant-disconnected") != 0){

          $friend_profile = profile2_by_uid_load($item_load->field_twv_members_friend_id[LANGUAGE_NONE][0]['value'], 'main');

          // #1
          if(isset($friend_profile->field_device_access)){
            foreach ($friend_profile->field_device_access[LANGUAGE_NONE] as $key => $value) {
              $item_load = field_collection_item_load($value['value']);
              
              //  เรา้ตองเพิ่มเช็กว่า udid != $device_id{เป็น เครื่องที่รับสาย} 
              
              if (strcasecmp($item_load->field_pushkit_token[LANGUAGE_NONE][0]['value'], "") != 0 && strcasecmp($item_load->field_is_login[LANGUAGE_NONE][0]['value'], "1") == 0 && strcasecmp($item_load->field_udid[LANGUAGE_NONE][0]['value'], $device_id) != 0) {
                
                $pushkit_token  = $item_load->field_pushkit_token[LANGUAGE_NONE][0]['value'];
                $action         = 'cancel';
                $handle         = array(
                                  "room_name"     => $room_name
                                  );
                // apns_voip($pushkit_token, $action, $uuid, $friend_id_token, $handle, $has_video); 
                // apns_voip($pushkit_token, $action, $handle);
              }
            }
          }

        }
        
        /*
        if(strcasecmp($item_load->field_twv_members_friend_id[LANGUAGE_NONE][0]['value'], $uid) == 0){
          $wrapper = entity_metadata_wrapper('field_collection_item', $item_load);
          if(strcasecmp($item_load->field_twilio_ic_device_id[LANGUAGE_NONE][0]['value'], $data["device_id"]) != 0){
            $wrapper->field_twilio_ic_device_id->set($data["device_id"]);
          }
          if(strcasecmp($item_load->field_twv_members_status[LANGUAGE_NONE][0]['value'], $data["status"]) != 0){
            $wrapper->field_twv_members_status->set($data["status"]);
          }
          $wrapper->save();


          // udpate firebase caller members
          $valus_update = array(
              "device_id"  => $data["device_id"],
              "status"     => $data["status"]
          );
          $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid_caller . "/outgoing_call/" . $item_id . "/members/" . $value['value'], $valus_update);
          break;
        }
        */
      }
    }

    // $valus_update = array(
    //           "status"     => "room-ended"
    //       );
    // if (strcasecmp($data_item->field_twilio_room_type[LANGUAGE_NONE][0]['value'], "private") == 0) {
    //   $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid_caller . "/outgoing_call/" . $item_id , $valus_update);
    // }
  }


  $result['result'] = TRUE;
  // $result['param']  = $param;
  return  $result;
}

/*
  หลักการทำงาน
  จะถูกเรียก firebase cloud function โดยจะถูกเรียกหลังมีการรับสาย

  $uid : เป้นคนที่รับสาย โดยเราต้อง ดึงข้อมูลของ uid นี้ว่ามี device มี device อะไรบ้างเพือจะส่ง cancel voip โดยตรงไม่ใช่เครื่องที่มี device_id ตรงกับ $device_id{param} นอกนั้นเราจะส่ง voip ทั้งหมด

  **** เราต้องวิ่งไป update  ข้อมูลให้กับ Caller ในส่วนของ device_id ที่รับสาย


  step
  1. load ข้อมูล uid เพือ loop หา device_access เพือส่ง voip ไป cancel
  2. เราต้อง load ข้อมูล profile $uid เพือจะ update ข้อมูลของ incoming_call โดย field_twilio_ic_name == room_id และจะ update field_twilio_ic_device_id = $device_id
  3. query outgoing_call โดย field_twilio_room_name == room_id และจะ update field_twilio_ic_device_id = $device_id
  4. update ข้อมูล firebase ของ /idna/user/{caller_id}/outgoing_call/{room_id} {device_id = $device_id}
*/
function incoming_call(){
  $result = array();

  $result['result'] = TRUE;
  return $result;
}

function incoming_call2(){
  $result = array();

  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  $param = json_decode(file_get_contents('php://input'), true);
  if (empty($param['uid']) /*|| empty($param['room_name']) */ || empty($param['data'])) {
    $result['result'] = FALSE;
    $result['message'] = "function incoming_call : parameter";
    return $result;
  }

  global $firebase;
  $uid        = $param['uid'];
  // $room_name  = $param['room_name'];
  $data       = $param['data'];


  if (strcasecmp($data["status"], "participant-connected") == 0) {
    /////////////////////////////// Send Voip Cancel to Friend //////////////////////////////////
    // เป็นการ หา pushkit token ของแต่ละ user โดยที่แต่ละ user อาจมีหลาย device ด้วย 
    // โดยมีเงือนไข device นั้น field field_is_login = 1 ถึงเราจะส่งเท่านั้น
    $friend_profile = profile2_by_uid_load($uid, 'main');

    /*
    // #1
    if(isset($friend_profile->field_device_access)){
      foreach ($friend_profile->field_device_access[LANGUAGE_NONE] as $key => $value) {
        $item_load = field_collection_item_load($value['value']);
        
        //  เรา้ตองเพิ่มเช็กว่า udid != $device_id{เป็น เครื่องที่รับสาย} 
        
        if (strcasecmp($item_load->field_pushkit_token[LANGUAGE_NONE][0]['value'], "") != 0 && strcasecmp($item_load->field_is_login[LANGUAGE_NONE][0]['value'], "1") == 0 && strcasecmp($item_load->field_udid[LANGUAGE_NONE][0]['value'], $device_id) != 0) {
          
          $pushkit_token  = $item_load->field_pushkit_token[LANGUAGE_NONE][0]['value'];
          $action         = 'cancel';
          $handle         = array(
                            "room_name"     => $room_name
                            );

          apns_voip($pushkit_token, $action, $handle);
        }
      }
    }
    */
    /////////////////////////////// Send Voip Cancel to Friend //////////////////////////////////


    // #2. การ update ข้อมูล drupal  field_twilio_incoming_call ของ uid นั้น
    if (isset($friend_profile->field_twilio_incoming_call)) {
      foreach ($friend_profile->field_twilio_incoming_call[LANGUAGE_NONE] as $key => $value) {
        $item_load = field_collection_item_load($value['value']);
        if (strcasecmp($item_load->field_twilio_ic_name[LANGUAGE_NONE][0]['value'], $room_name) == 0) {
          $wrapper = entity_metadata_wrapper('field_collection_item', $item_load);
          if(strcasecmp($item_load->field_twilio_ic_device_id[LANGUAGE_NONE][0]['value'], $data["device_id"]) != 0){
            $wrapper->field_twilio_ic_device_id->set($data["device_id"]);
          }
          if(strcasecmp($item_load->field_twilio_ic_status[LANGUAGE_NONE][0]['value'], $data["status"]) != 0){
            $wrapper->field_twilio_ic_status->set($data["status"]);
          }
          $wrapper->save();
        }
        break;
      }
    }
    // #2

    // #3
    $query  = new EntityFieldQuery();
    $entities = $query->entityCondition('entity_type', 'field_collection_item')
                      ->entityCondition('bundle', 'field_twilio_outgoing_call')
                      ->fieldCondition('field_twilio_room_name', 'value', $data['twilio_room_name'], '=')
                      ->execute();

    // $result['entities'] = serialize($entities);
    if (!empty($entities['field_collection_item'])) {
      // กรณีนี้อาจไม่เกิดขึ้นเลยก็ได้
      $item_id = array_keys($entities['field_collection_item'])[0];

      $data_item = field_collection_item_load($item_id);
      if ($data_item) {

        // เราต้องเช็กว่าค่านี้เป็น profile caller หรือไม่
        $uid_caller = $data_item->hostEntity()->uid;

        if (isset($data_item->field_twilio_video_members)) {
          foreach ($data_item->field_twilio_video_members[LANGUAGE_NONE] as $key => $value) {
            $item_load = field_collection_item_load($value['value']);
            if(strcasecmp($item_load->field_twv_members_friend_id[LANGUAGE_NONE][0]['value'], $uid) == 0){
              $wrapper = entity_metadata_wrapper('field_collection_item', $item_load);
              if(strcasecmp($item_load->field_twilio_ic_device_id[LANGUAGE_NONE][0]['value'], $data["device_id"]) != 0){
                $wrapper->field_twilio_ic_device_id->set($data["device_id"]);
              }
              if(strcasecmp($item_load->field_twv_members_status[LANGUAGE_NONE][0]['value'], $data["status"]) != 0){
                $wrapper->field_twv_members_status->set($data["status"]);
              }
              $wrapper->save();


              // udpate firebase caller members
              $valus_update = array(
                  "device_id"  => $data["device_id"],
                  "status"     => $data["status"]
              );
              $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid_caller . "/outgoing_call/" . $item_id . "/members/" . $value['value'], $valus_update);
              break;
            }
          }
        }

        // $valus_update = array(
        //           "status"     => "room-ended"
        //       );
        // if (strcasecmp($data_item->field_twilio_room_type[LANGUAGE_NONE][0]['value'], "private") == 0) {
        //   $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid_caller . "/outgoing_call/" . $item_id , $valus_update);
        // }
      }
    }
    

  }else if(strcasecmp($data["status"], "participant-disconnected") == 0){
    /////////////////////////////// Send Voip Cancel to Friend //////////////////////////////////
    // เป็นการ หา pushkit token ของแต่ละ user โดยที่แต่ละ user อาจมีหลาย device ด้วย 
    // โดยมีเงือนไข device นั้น field field_is_login = 1 ถึงเราจะส่งเท่านั้น
    $friend_profile = profile2_by_uid_load($uid, 'main');

    /*
    // #1
    if(isset($friend_profile->field_device_access)){
      foreach ($friend_profile->field_device_access[LANGUAGE_NONE] as $key => $value) {
        $item_load = field_collection_item_load($value['value']);
        
        //  เรา้ตองเพิ่มเช็กว่า udid != $device_id{เป็น เครื่องที่รับสาย} 
        
        if (strcasecmp($item_load->field_pushkit_token[LANGUAGE_NONE][0]['value'], "") != 0 && strcasecmp($item_load->field_is_login[LANGUAGE_NONE][0]['value'], "1") == 0 && strcasecmp($item_load->field_udid[LANGUAGE_NONE][0]['value'], $device_id) != 0) {
          
          $pushkit_token  = $item_load->field_pushkit_token[LANGUAGE_NONE][0]['value'];
          $action         = 'cancel';
          $handle         = array(
                            "room_name"     => $room_name
                            );

          apns_voip($pushkit_token, $action, $handle);
        }
      }
    }
    */
    /////////////////////////////// Send Voip Cancel to Friend //////////////////////////////////


    // #2. การ update ข้อมูล drupal  field_twilio_incoming_call ของ uid นั้น
    if (isset($friend_profile->field_twilio_incoming_call)) {
      foreach ($friend_profile->field_twilio_incoming_call[LANGUAGE_NONE] as $key => $value) {
        $item_load = field_collection_item_load($value['value']);
        if (strcasecmp($item_load->field_twilio_ic_name[LANGUAGE_NONE][0]['value'], $room_name) == 0) {
          $wrapper = entity_metadata_wrapper('field_collection_item', $item_load);
          if(strcasecmp($item_load->field_twilio_ic_device_id[LANGUAGE_NONE][0]['value'], $data["device_id"]) != 0){
            $wrapper->field_twilio_ic_device_id->set($data["device_id"]);
          }
          if(strcasecmp($item_load->field_twilio_ic_status[LANGUAGE_NONE][0]['value'], $data["status"]) != 0){
            $wrapper->field_twilio_ic_status->set($data["status"]);
          }
          $wrapper->save();
        }
        break;
      }
    }
    // #2

    // #3
    $query  = new EntityFieldQuery();
    $entities = $query->entityCondition('entity_type', 'field_collection_item')
                      ->entityCondition('bundle', 'field_twilio_outgoing_call')
                      ->fieldCondition('field_twilio_room_name', 'value', $data['twilio_room_name'], '=')
                      ->execute();

    // $result['entities'] = serialize($entities);
    if (!empty($entities['field_collection_item'])) {
      // กรณีนี้อาจไม่เกิดขึ้นเลยก็ได้
      $item_id = array_keys($entities['field_collection_item'])[0];

      $data_item = field_collection_item_load($item_id);
      if ($data_item) {

        // เราต้องเช็กว่าค่านี้เป็น profile caller หรือไม่
        $uid_caller = $data_item->hostEntity()->uid;

        if (isset($data_item->field_twilio_video_members)) {
          foreach ($data_item->field_twilio_video_members[LANGUAGE_NONE] as $key => $value) {
            $item_load = field_collection_item_load($value['value']);
            if(strcasecmp($item_load->field_twv_members_friend_id[LANGUAGE_NONE][0]['value'], $uid) == 0){
              $wrapper = entity_metadata_wrapper('field_collection_item', $item_load);
              if(strcasecmp($item_load->field_twilio_ic_device_id[LANGUAGE_NONE][0]['value'], $data["device_id"]) != 0){
                $wrapper->field_twilio_ic_device_id->set($data["device_id"]);
              }
              if(strcasecmp($item_load->field_twv_members_status[LANGUAGE_NONE][0]['value'], $data["status"]) != 0){
                $wrapper->field_twv_members_status->set($data["status"]);
              }
              $wrapper->save();


              // udpate firebase caller members
              $valus_update = array(
                  "device_id"  => $data["device_id"],
                  "status"     => $data["status"]
              );
              $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid_caller . "/outgoing_call/" . $item_id . "/members/" . $value['value'], $valus_update);
              break;
            }
          }
        }

        // $valus_update = array(
        //           "status"     => "room-ended"
        //       );
        // if (strcasecmp($data_item->field_twilio_room_type[LANGUAGE_NONE][0]['value'], "private") == 0) {
        //   $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid_caller . "/outgoing_call/" . $item_id , $valus_update);
        // }
      }
    }
    // #3
  }

  $result['result'] = TRUE;
  // $result['param']  = $param;
  return  $result;
}


/*
function set_my_id()
{
  $result = array();

  if (!check_header()) {
    $result['result'] = FALSE;
    $result['message']= "check_header()";
    return $result;
  }

  if (empty($_REQUEST['uid']) || empty($_REQUEST['my_id'])) {
    $result['result'] = FALSE;
    return $result;
  }


  global $firebase;

  $uid = $_REQUEST['uid'];
  $my_id = $_REQUEST['my_id'];

  $uids = db_select('users', 'ur')
        ->fields('ur', array('uid'))
        // ->condition('ur.uid', $uid, '!=')
        // ->condition('ur.uid', 0, '!=')
        // ->condition('ur.uid', 1, '!=')
        ->condition('ur.uid', 0, '!=')
        ->condition('ur.uid', 1, '!=')
        ->condition('ur.uid', $uid, '!=')
        ->execute()
        ->fetchCol();

  $mul_users =  user_load_multiple($uids);
  foreach ($mul_users as $account) {
    // เป้นการโหลดข้อมูลของ profile user ซึ่งจะได้รู้ว่า friend ของ user
    // $user_fields = user_load($account->uid);
    // $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);
    // $profile =  profile2_load($profile2_load_by_user['main']->pid);

    $profile = profile2_by_uid_load($account->uid, 'main');
    $key = $profile->field_profile_heart_id[LANGUAGE_NONE][0]['value'];

    // เช็ดว่ามีคนตั้ง id นี้หรือเปล่า  ตัวใหญ่-เล้กมองเป้นตัวเดียวกัน
    if (strcasecmp($my_id, $key) == 0) {
      $result['result'] = FALSE;
      $result['message'] = "My ID Duplicate.";
      return  $result;
      break;
    }
  }
 
  # code...
  // $user_fields = user_load($_POST['uid']);
  // เป็นการ โหลด profile เพือเราจะหา pid ของ user นั้นๆ
  // $profile2_load_by_user = profile2_load_by_user($user_fields, NULL)['main'];

  $profile2_load_by_user = profile2_by_uid_load($uid, 'main');
  $profile2_load_by_user->field_profile_heart_id[LANGUAGE_NONE][0]['value'] = $my_id;
  profile2_save($profile2_load_by_user);



  // Firebase : update image url profile
  $data_update = array(
      "my_id"  => $my_id
  );
  $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $uid ."/profiles/", $data_update);

  $result['result'] = TRUE;
 
  return  $result;
}
*/

function update_token_notication(){

  $result = array();

  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  $param = json_decode(file_get_contents('php://input'), true);

  if (empty($param['key']) || empty($param['data'])) {
    $result['result'] = FALSE;
    $result['message'] = "function update_token_notication : parameter";
    return $result;
  }

  global $firebase;

  $key      = $param["key"];
  $data     = $param["data"];


  // https://api.drupal.org/api/drupal/modules%21node%21node.module/function/node_load_multiple/7.x
  $udid     = $data['udid'];
  $token    = $data['token'];
  $platform = strtolower($data['platform']);

  $content_type = "token_notification";

  $query  = new EntityFieldQuery;
  $output = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', $content_type)
    ->fieldCondition('field_platform', 'value', $platform, '=')
    ->propertyCondition('title', $udid, '=')
    ->execute();

  if (!empty($output['node'])) {
    $nids = array_keys($output['node']);
    foreach ($nids as $k => $nid) {
      $node = node_load($nid);
      $node_wrapper = entity_metadata_wrapper('node', $node);
      $node_wrapper->field_key_token_notification->set($token);
      $node_wrapper->save();
    }
  }else{

    $node = new stdClass();
    $node->title = $udid;
    $node->type  = $content_type;
    // $node->uid   = $_POST['uid'];
    $node->field_platform[LANGUAGE_NONE][0]['value']  = $platform;
    $node->field_key_token_notification[LANGUAGE_NONE][0]['value']    = $token;
    
    $node->language = LANGUAGE_NONE;
    // $node->revision = 0;
    $node->status   = 0;

    $node = node_submit($node);
    node_save($node);
  }

  $firebase->delete(FIREBASE_DEFAULT_PATH . "token_notification/" . $key);

  $result['result'] = TRUE;
  return  $result;
}

function update_token_pushkit(){

  $result = array();

  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  $param = json_decode(file_get_contents('php://input'), true);

  if (empty($param['key']) || empty($param['data'])) {
    $result['result'] = FALSE;
    $result['message'] = "function update_token_pushkit : parameter";
    return $result;
  }

  global $firebase;

  $key      = $param["key"];
  $data     = $param["data"];


  // https://api.drupal.org/api/drupal/modules%21node%21node.module/function/node_load_multiple/7.x
  $udid     = $data['udid'];
  $token    = $data['token'];
  $platform = strtolower($data['platform']);

  $content_type = "pushkit_token";

  $query  = new EntityFieldQuery;
  $output = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', $content_type)
    ->fieldCondition('field_platform', 'value', $platform, '=')
    ->propertyCondition('title', $udid, '=')
    ->execute();

  if (!empty($output['node'])) {
    $nids = array_keys($output['node']);
    foreach ($nids as $k => $nid) {
      $node = node_load($nid);
      $node_wrapper = entity_metadata_wrapper('node', $node);
      $node_wrapper->field_pushkit_token->set($token);
      $node_wrapper->save();
    }
  }else{

    $node = new stdClass();
    $node->title = $udid;
    $node->type  = $content_type;
    // $node->uid   = $_POST['uid'];
    $node->field_platform[LANGUAGE_NONE][0]['value']  = $platform;
    $node->field_pushkit_token[LANGUAGE_NONE][0]['value']    = $token;
    
    $node->language = LANGUAGE_NONE;
    // $node->revision = 0;
    $node->status   = 0;

    $node = node_submit($node);
    node_save($node);
  }

  $firebase->delete(FIREBASE_DEFAULT_PATH . "token_pushkit/" . $key);

  $result['result'] = TRUE;
  return  $result;
}

function update_device_access(){
  $result = array();

  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  $param = json_decode(file_get_contents('php://input'), true);

  if (empty($param['item_id']) || empty($param['data'])) {
    $result['result'] = FALSE;
    $result['message'] = "function update_device_access : parameter";
    return $result;
  }

  global $firebase;

  $item_id  = $param["item_id"];
  $data     = $param["data"];

  $item_load = field_collection_item_load($item_id);
  $wrapper = entity_metadata_wrapper('field_collection_item', $item_load);
    
  //Check & Update value
  if(strcasecmp($item_load->field_is_login[LANGUAGE_NONE][0]['value'], $data['is_login']) != 0){
    $wrapper->field_is_login->set($data['is_login']);
  }

  if(strcasecmp($item_load->field_online[LANGUAGE_NONE][0]['value'], $data['online']) != 0){
    $wrapper->field_online->set($data['online']);
  }

  $wrapper->save();
  
  $result['result'] = TRUE;
  return  $result;
}


function get_profiles(){
  $result = array();
  if (empty($_REQUEST['uid']) || empty($_REQUEST['uids'])) {
    $result['result'] = FALSE;
    return  $result;
  }

  $data = array();
  foreach ($_REQUEST['uids'] as $account) {
    $profile = profile2_by_uid_load($account, 'main');
    
    $item = array();
    $item['name']           = $profile->field_profile_name[LANGUAGE_NONE][0]['value'];
    $item['status_message'] = $profile->field_profile_status_message[LANGUAGE_NONE][0]['value'];// 
    $item['picture']        = file_load($profile->field_profile_image[LANGUAGE_NONE][0]['fid']);
    $data[] = $item;
  }

  $result['result']     = TRUE;
  $result['data']  = $data;
  return  $result;
}

function get_store(){
  $result = array();

  $uids = db_select('users', 'ur')
      ->fields('ur', array('uid'))
      // ->condition('ur.uid', $uid, '!=')
      // ->condition('ur.uid', 0, '!=')
      // ->condition('ur.uid', 1, '!=')
      ->condition('ur.uid', 0, '!=')
      ->condition('ur.uid', 1, '!=')
      ->execute()
      ->fetchCol();

  $mul_users =  user_load_multiple($uids);

  $data = array();
  foreach ($mul_users as $account) {

    $profile = profile2_by_uid_load($account->uid, 'main');
    foreach ($profile->field_my_application[LANGUAGE_NONE] as $key => $value) {
      $item             = array();
      $item["owner_id"] = $account->uid;
      $item["item"]     = field_collection_item_load($value['value']);
      $data[]           = $item;
    }
  }

  // ดึง slide
  $query = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'slide_store')
    ->execute();  

  $nodes = node_load_multiple(array_keys($entities['node']));  

  $slides = array();
  foreach ($nodes as $node) {
    $slides[] = file_load($node->field_image[LANGUAGE_NONE][0]['fid']);
  } 

  $result['result'] = TRUE;
  $result['data']   = $data;
  $result['slides'] = $slides;
  return  $result;
}

function get_app_detail(){
  $result = array();

  if (empty($_REQUEST['item_id'])) {
    $result['result'] = FALSE;
    return  $result;
  }

  $items = field_collection_item_load($_REQUEST['item_id']);

  $item = array();
  $item['item_id']        = $_REQUEST['item_id'];
  $item['name']           = $items->field_my_app_name[LANGUAGE_NONE][0]['value'];
  $item['category']       = $items->field_my_app_category[LANGUAGE_NONE][0]['tid'];
  $item['picture']        = file_load($items->field_image[LANGUAGE_NONE][0]['fid']);

  /* field_my_app_update */
  $posts = array();
  if(isset($items->field_my_app_update)){
    if (!empty($items->field_my_app_update[LANGUAGE_NONE])) {
      foreach ($items->field_my_app_update[LANGUAGE_NONE] as $pkey => $pvalue) {

          $pitems = field_collection_item_load($pvalue['value']);
          $posts[$pvalue['value']]["title"]    = $pitems->field_my_app_title[LANGUAGE_NONE][0]['value'];
          $posts[$pvalue['value']]["message"]  = $pitems->field_my_app_message_udate[LANGUAGE_NONE][0]['value'];
          $posts[$pvalue['value']]['picture']  = file_load($pitems->field_image[LANGUAGE_NONE][0]['fid']);

          
          $comments =array();
          
          if(isset($pitems->field_my_app_update_comment)){
            if (!empty($pitems->field_my_app_update_comment[LANGUAGE_NONE])) {
              foreach ($pitems->field_my_app_update_comment[LANGUAGE_NONE] as $ckey => $cvalue) {
                  $citems = field_collection_item_load($cvalue['value']);

                  $comments[$cvalue['value']]['message'] = $citems->field_comment_message[LANGUAGE_NONE][0]['value'];
              }
            }
          }
          
          $posts[$pvalue['value']]['comments']  = $comments;
      }
    }
  }

  $item['posts']  = $posts;


  $result['result'] = TRUE;
  $result['data']   = $item;

  return  $result;
}

function user_forgot_password()
{
  $result = array();

  if (!empty($_POST['email'])) {
    # code...
    // #1
    // load user object ขึ้นมาเพือแก้ไข mail
    $load_user = user_load_by_mail($_POST['email']);
    // update some user property

    if ($load_user) {
      # code...

      $verify_key = generateKey();
      $load_user->pass = $verify_key;

      // save existing user
      user_save((object) array('uid' => $load_user->uid), (array) $load_user);

      idna_mail_send("user_forgot_password", $_POST['email'], $load_user->name, $verify_key);

      /*
      idna_mail_send("user_forgot_password", $_POST['email'], $verify_key);
      $verify_key = generateKey();
      */

      $result['result']   = TRUE;
      $result['message'] = "";

    }else{
      $result['result']   = FALSE;
      $result['message'] = "Email not match " . $_POST['email'];
    }

    // // กรณี user ยังไม่ได้ตั้งชือใหม่ เราจะกำหนดให้ชือเท่ากัน email
    // if (strcasecmp($existingUser->name, $_POST['UDID'] . '@annmousu') != 0) { // 
    //   # code...
    //   $existingUser->name = $_POST['email'];
    // }

    // $existingUser->mail = $_POST['email'];
    // $existingUser->pass = $_POST['key'];

    // // save existing user
    // user_save((object) array('uid' => $existingUser->uid), (array) $existingUser);

    
  }else{
    $result['result']   = FALSE;
    $result['message'] = "Email empty.";
  }
  
  $result['function'] = "user_forgot_password";
  $result['$_POST']   = $_POST;

  return $result;
}

/*

*/
function add_friend(){
  $result = array();

  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  $param = json_decode(file_get_contents('php://input'), true);
  if (empty($param['uid']) || empty($param['friend_id'])) {
    $result['result'] = FALSE;
    return $result;
  }

  global $firebase;
  $uid        = $param['uid'];
  $friend_id  = $param['friend_id'];

  // กรณีเป้น ตัวเอง(My self)
  if (strcasecmp($uid, $friend_id) == 0) {
    $result['result']     = TRUE;
    $result['friend_status']  = '-1';
    $result['message']    = "You can't add yourself as a friend.";
    return  $result;
  }

  /*
  เป้น การ load friends ของ uid ขึ้นมาเช็ดว่า friend_id เป้น friend เราอยุ่หรือไม่
  */
  $profile_user = profile2_by_uid_load($uid, 'main');

  $friend_status = 0;
  foreach ($profile_user->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
      $data_item_load = field_collection_item_load($value['value']);
      
      if($data_item_load->field_friend_uid[LANGUAGE_NONE][0]['value'] == $friend_id){
        
        $friend_status = $data_item_load->field_friend_status[LANGUAGE_NONE][0]['tid'];
        break;
      }
  }

  if ($friend_status == 0) {
    // มีอยู่กรณีเดียวทีเราสามารถเพิ่มเพือนได้
    /*
    หลักการคือ friend_id ต้องยังไม่เคยเป้นเพื่อนเท่านั้น
    ขั้นตอน
    1. เราต้องเพิ่ม friend_id  เป็นเพื่อน โดยสถานะ Wait for a friend(12) ที่ database และ firebase database
    2. เราต้องเพิ่ม uid ไปเป็นเพือน ของ friend_id ด้วย โดยสถานะ Friend request(11) ที่ database และ firebase database
    */

    // module_load_include('module', 'opentok', 'opentok');

    $chat_id = generateRandomString(LENGTH_CHAT_ID);

    // เป็นการเพือนให้ตัวเรา
    $user_profile = profile2_by_uid_load($uid, 'main');


    // $user_classs_item_id = get_friend_classs($user_profile);

    $friend_values = array();
    $friend_values['field_name'] = 'field_profile_friends'; // field collection name

    $friend_values['field_friend_uid'][LANGUAGE_NONE][0]['value']               = $friend_id;
    $friend_values['field_change_friend_name'][LANGUAGE_NONE][0]['value']       = '';
    $friend_values['field_profile_friends_chat_id'][LANGUAGE_NONE][0]['value']  = $chat_id;
    $friend_values['field_friend_status'][LANGUAGE_NONE][0]['tid']              = FRIEND_STATUS_WAIT_FOR_A_FRIEND;
    // $friend_values['field_profile_friend_classs'][LANGUAGE_NONE][0]['value']    = $user_classs_item_id;

    /*
    opk token มีไว้สำหรับ call audio, video 
    */
    // $opk_token = opentok_get_token($user_profile->field_opentok_session_id[LANGUAGE_NONE][0]['value'], 'publisher');
    // $friend_values['field_opentok_token'][LANGUAGE_NONE][0]['value']            = $opk_token;
  
    $field_entity = entity_create('field_collection_item', $friend_values);
    $field_entity->setHostEntity('profile2', $user_profile);
    $field_entity->save();

    $values = array(
      "status"       => FRIEND_STATUS_WAIT_FOR_A_FRIEND,
      "chat_id"      => $chat_id,
      "item_id"      => $field_entity->item_id,
      // "classs"       => $user_classs_item_id
    );
    $firebase->set(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid . '/friends/' . $friend_id . "/", $values);
    
    $result['values']  = $values;  


    
    // เป็นการเพิ่มตัวเรา  ให้เพือน
    $friend_profile = profile2_by_uid_load($friend_id, 'main');

    // $friend_classs_item_id = get_friend_classs($friend_profile);

    $user_values = array();
    $user_values['field_name'] = 'field_profile_friends'; // field collection name

    $user_values['field_friend_uid'][LANGUAGE_NONE][0]['value']               = $uid;
    $user_values['field_change_friend_name'][LANGUAGE_NONE][0]['value']       = '';
    $user_values['field_profile_friends_chat_id'][LANGUAGE_NONE][0]['value']  = $chat_id;
    $user_values['field_friend_status'][LANGUAGE_NONE][0]['tid']              = FRIEND_STATUS_FRIEND_REQUEST;
    // $user_values['field_profile_friend_classs'][LANGUAGE_NONE][0]['value']    = $friend_classs_item_id;

        /*
    opk token มีไว้สำหรับ call audio, video 
    */
    // $opk_token = opentok_get_token($friend_profile->field_opentok_session_id[LANGUAGE_NONE][0]['value'], 'publisher');
    // $user_values['field_opentok_token'][LANGUAGE_NONE][0]['value']            = $opk_token;

    //field_opentok_token
  
    $field_entity = entity_create('field_collection_item', $user_values);
    $field_entity->setHostEntity('profile2', $friend_profile);
    $field_entity->save();

    $values = array(
      "status"       => FRIEND_STATUS_FRIEND_REQUEST,
      "chat_id"      => $chat_id,
      "item_id"      => $field_entity->item_id,
      // "classs"       => $friend_classs_item_id
    );
    $firebase->set(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $friend_id . '/friends/' . $uid . "/", $values);


    $result['result']         = TRUE;
    $result['friend_status']  = '99';  
    $result['message']        = "Send requests friend success.";
  }else{
    switch ($friend_status) {
      // Friend กรณีเราเป็นเพือนกันอยู่แล้ว
      case '10':{
        $result['result']         = TRUE;
        $result['friend_status']  = '-1';
        $result['message']        = "is already your friend.";
      }
        break;

      // Friend Cancel : กรณีเราเคยขอเป้นเพือนแล้วโดน เพือน กด cancel
      case '13':{
        $result['result']         = TRUE;
        $result['friend_status']  = '-1';
        $result['message']        = "Friend Cancel.";
      }
        break;

      // Friend request : กรณีเราส่งคำขอเป้นเพือน
      case '11':{
        $result['result']         = TRUE;
        $result['friend_status']  = '-1';
        $result['message']        = "Friend request.";
      }
        break;

      // Wait for a friend : เพือนคนนี้ส่งคำขอ ขอเราเป็นเพือน
      case '12':{
        $result['result']         = TRUE;
        $result['friend_status']  = '-1';
        $result['message']        = "Wait for a friend.";
      }
        break;
      
      default:
        # code...
        break;
    }
  }

  return $result;
}

function list_friends($uid)
{
  $result = array();

  // เป้นการโหลดข้อมูลของ profile user ซึ่งจะได้รู้ว่า friend ของ user
  $user_fields = user_load($uid);

  if (!$user_fields->uid) {
    // User is not logged in
    //services_error(t('User is not logged in.'), 406);

    $result['result'] = FALSE;
    $result['output'] = "uid not match is user";

    return $result;
  }

  $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);

  // Load Profile ขึ้นมาเพือจะทำการแก้ไข
  $profile =  profile2_load($profile2_load_by_user['main']->pid);

  $uid_friends = array(0, 1, $uid);

  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    // Build array of field collection values.

    $data = field_collection_item_load($value['value']);

    $uid_friends[] = $data->field_friend_uid[LANGUAGE_NONE][0]['value'];
  }
  // เป้นการโหลดข้อมูลของ profile user ซึ่งจะได้รู้ว่า friend ของ user 


  $uids = db_select('users', 'ur')
        ->fields('ur', array('uid'))
        // ->condition('ur.uid', $uid, '!=')
        // ->condition('ur.uid', 0, '!=')
        // ->condition('ur.uid', 1, '!=')
        ->condition('ur.uid', $uid_friends, 'NOT IN')
        ->execute()
        ->fetchCol();

  $users =  user_load_multiple($uids);

  $data = array();
  foreach ($users as $account) {
    # code...
    
    $tmp['uid'] = $account->uid;
    $tmp['name'] = $account->name;
    $tmp['mail'] = $account->mail;

    // $path= file_create_url($uri)  uri
    if(!is_null($account->picture)){
      $tmp['url_image'] = file_create_url($account->picture->uri); 
    }else{
      $tmp['url_image'] = "";
    }

    $data[] = $tmp;
  }

  $result['result'] = TRUE;
  $result['GET'] = $uid;
  $result['function'] = "add list friends";
  $result['data'] = $data;

  return $result;
}

function idna_fetch_profile($uid)
{

  $result = array();

  // เป็นการ โหลด profile เพือเราจะหา pid ของ user นั้นๆ
  $profile2_load_by_user = profile2_load_by_user($uid, NULL);

  $result['result'] = TRUE;

  $profile = $profile2_load_by_user['main'];

  $result['name']         = $profile->field_profile_name[LANGUAGE_NONE][0]['value']; 
  $result['subname']      = $profile->field_profile_subname[LANGUAGE_NONE][0]['value']; 
  $result['address']      = $profile->field_profile_address[LANGUAGE_NONE][0]['value']; 

  $result['phone_number'] = $profile->field_profile_phone[LANGUAGE_NONE][0]['value'];
  $result['location']     = $profile->field_profile_location[LANGUAGE_NONE][0]['value'];
  $result['google_plus']  = $profile->field_profile_google_plus[LANGUAGE_NONE][0]['value'];
  $result['facebook']     = $profile->field_profile_facebook[LANGUAGE_NONE][0]['value'];
  

  $url_image = "";
  if(!is_null($profile->field_profile_image[LANGUAGE_NONE][0]['uri'])){
    $url_image = file_create_url($profile->field_profile_image[LANGUAGE_NONE][0]['uri']); 
  }else{
    $url_image = "";
  }

  // field_field_profile_bg
  $url_image_bg = "";
  if(!is_null($profile->field_field_profile_bg[LANGUAGE_NONE][0]['uri'])){
    $url_image_bg = file_create_url($profile->field_field_profile_bg[LANGUAGE_NONE][0]['uri']); 
  }else{
    $url_image_bg = "";
  }

  /*

  $url_qrcode = "";
  if(!is_null($profile->field_profile_my_qrcode[LANGUAGE_NONE][0]['uri'])){
    $url_qrcode = file_create_url($profile->field_profile_my_qrcode[LANGUAGE_NONE][0]['uri']); 
  }else{
    $url_qrcode = "";
  }


  $result['url_picture']  = $url_image;
  $result['url_picture_bg']  = $url_image_bg;
  $result['url_qrcode']   = $url_qrcode;

  // $result['uid']    = $uid;
  $result['profile'] = $profile;
  */

   
  return $result;
}

/*
  function = 0 : แก้ไขรูป, 1 : แก้ไขชื่อ, 2 : แก้ไข Category, 3 : แก้ไข email, 4 : แก้ไข phone, 5 : แก้ไข status 
*/
function update_my_application_profile(){
  $result = array();

  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  if (empty($_REQUEST['uid']) || empty($_REQUEST['item_id'])) {
    $result['result']   = FALSE;
    $result['message']  = "empty parameter : update_my_application_profile()";
    $result['_REQUEST']  = $_REQUEST;
    return $result;
  }

  global $firebase;

  $uid      = $_REQUEST['uid'];
  $item_id  = $_REQUEST['item_id'];
  $fi       = $_REQUEST['fi'];

  switch ($fi) {
    case '0':{

          $image = $_REQUEST['image'];

          // http://stackoverflow.com/questions/8241242/drupal-7-upload-image-programatically
          $binary = base64_decode($image);

          //Create the directory if it does not already exist, otherwise check the permissions
          $directory = 'public://';
          file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

          $currentDate = date("Ymd");
          $name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
          
          //Saves a file to the specified destination and creates a database entry.
          $image_url = (array)klovers_file_save_data($uid, $binary, $directory. '/' . $name, FILE_EXISTS_RENAME);

          /*
          $data_item_load = field_collection_item_load($item_id);

          $wrapper = entity_metadata_wrapper('field_collection_item', $data_item_load);  
          $wrapper->field_image->set($image_url);
          $wrapper->save();

          $data_update = array(
            "image_url"  => substr(file_create_url($image_url['uri']), strlen($GLOBALS['base_url']))
          );

          $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $uid ."/" . FIREBASE_MY_APPLIPATIONS_PATH . $item_id, $data_update);

          $result['result']     = TRUE;
          $result['image_url']  = substr(file_create_url($image_url['uri']), strlen($GLOBALS['base_url']));
          */


          $node  = node_load($item_id);  
          $node_wrapper = entity_metadata_wrapper('node', $node);
          $node_wrapper->field_image->set($image_url);
          $node_wrapper->save();


          $data_update = array(
            "image_url"  => substr(file_create_url($image_url['uri']), strlen($GLOBALS['base_url']))
          );

          $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $uid ."/" . FIREBASE_MY_APPLIPATIONS_PATH . $item_id, $data_update);

          $result['result']     = TRUE;
          $result['image_url']  = substr(file_create_url($image_url['uri']), strlen($GLOBALS['base_url']));
          return $result;
      }
      break;
    case '1':{

      }
      break;
    case '2':{

      }
      break;
    case '3':{

      }
      break;
    case '4':{

      }
      break;
    case '5':{

      }
      break;
    
    default:
      # code...
      break;
  }

  return $result;
}


function update_picture_profile(){
  $result = array();

  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }
  
  if (empty($_REQUEST['uid']) || empty($_REQUEST['image'])) {
    $result['result'] = FALSE;
    $result['message']  = "function : update_picture_profile, parameter";
    $result['_REQUEST']  = $_REQUEST;
    return $result;
  }

  global $firebase;

  $uid   = $_REQUEST['uid'];
  $image = $_REQUEST['image'];

  $profile = profile2_by_uid_load($uid, 'main');

  if($image != ""){

    // http://stackoverflow.com/questions/8241242/drupal-7-upload-image-programatically
    $binary = base64_decode($image);

    // $binary = file_get_contents($image['tmp_name']);

    //Create the directory if it does not already exist, otherwise check the permissions
    $directory = 'public://';
    file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

    $currentDate = date("Ymd");
    $name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
    
    //Saves a file to the specified destination and creates a database entry.
    $file = klovers_file_save_data($uid, $binary, $directory. '/' . $name, FILE_EXISTS_RENAME);

    // save รูป profile
    $profile->field_profile_image[LANGUAGE_NONE][0] = (array)$file;
  }

  profile2_save($profile);

  $uri = file_load($profile->field_profile_image[LANGUAGE_NONE][0]['fid'])->uri;
  
  // url image profile 

  //   // dpm(image_style_url('medium',$uri));
  $url = substr(file_create_url(image_style_url('medium',$uri)), strlen($GLOBALS['base_url']));

  // Firebase : update image url profile
  $data_update = array(
      "image_url"  =>$url
  );
  $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $uid ."/profiles/", $data_update);
  // Firebase : update image url profile

 
  $result['result'] = TRUE;  
  $result['url'] = $url;
  // $result['file'] = (array)$file;
  // $result['uri'] = $uri;
  return $result;
}

function update_picture_bg(){
  $result = array();

  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  // $param = json_decode(file_get_contents('php://input'), true);

  // $result['result'] = TRUE;
  // $result['_REQUEST']  = $_REQUEST;
  // $result['_FILES']  = $_FILES;
  // $result['param']  = $param;

  // return $result;

  if (empty($_REQUEST['uid']) || empty($_REQUEST['image'])) {
    $result['result'] = FALSE;
    $result['message']  = "function : update_picture_bg, parameter";
    $result['_REQUEST']  = $_REQUEST;
    return $result;
  }

  global $firebase;

  $uid   = $_REQUEST['uid'];
  $image = $_REQUEST['image'];

  $profile = profile2_by_uid_load($uid, 'main');

  if($image != ""){

    // http://stackoverflow.com/questions/8241242/drupal-7-upload-image-programatically
    $binary = base64_decode($image);

    // $binary = file_get_contents($image['tmp_name']);


    //Create the directory if it does not already exist, otherwise check the permissions
    $directory = 'public://';
    file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

    $currentDate = date("Ymd");
    $name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
    
    //Saves a file to the specified destination and creates a database entry.
    $file = klovers_file_save_data($uid, $binary, $directory. '/' . $name, FILE_EXISTS_RENAME);

    // save รูป profile
    $profile->field_picture_bg[LANGUAGE_NONE][0] = (array)$file;
  }

  profile2_save($profile);

  $uri = file_load($profile->field_picture_bg[LANGUAGE_NONE][0]['fid'])->uri;

  // url image profile 
  $url = substr(file_create_url($uri), strlen($GLOBALS['base_url']));

  // Firebase : update image url profile
  $data_update = array(
      "bg_url"  =>$url
  );
  $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $uid ."/profiles/", $data_update);
  // Firebase : update image url profile

  $result['result'] = TRUE;  
  $result['url']    = $url;
  $result['uri']    = $uri;
  return $result;
}

/*
  เป็น function ที่ใช้ update profile ที่โดนเรียกใช้ cloud function firebase
  โดยใช้ Update
  1. name
  2. status_message 
*/
function update_profile(){

  $result = array();

  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  if (empty($_REQUEST['uid']) || empty($_REQUEST['data'])) {
    $result['result'] = FALSE;
    $result['message']  = "function : update_profile, parameter";
    return $result;
  }

  $uid    = $_REQUEST['uid'];
  $data   = $_REQUEST['data'];

  
  // Load Profile ขึ้นมาเพือจะทำการแก้ไข
  $profile = profile2_by_uid_load($uid, 'main');

  $check = 0;
  // name
  if (array_key_exists('name', $data)) {
    if (strcmp($profile->field_profile_name[LANGUAGE_NONE][0]['value'], $data['name']) != 0) {
      # code...
      // 
      $profile->field_profile_name[LANGUAGE_NONE][0]['value'] = preg_replace('/[\x{10000}-\x{10FFFF}]/u', '', $data['name']) ;

      $check++;
    }

    if (strcmp($profile->field_profile_display_name[LANGUAGE_NONE][0]['value'], $data['name']) != 0) {
      # code...
      $profile->field_profile_display_name[LANGUAGE_NONE][0]['value'] = preg_replace('/[\x{10000}-\x{10FFFF}]/u', '', $data['name']);

      $check++;
    }
  }

  // My ID 
  if (array_key_exists('my_id', $data)) {
    // if (strcmp($profile->field_profile_heart_id[LANGUAGE_NONE][0]['value'], $data['my_id']) != 0) {
    //   # code...
    //   $profile->field_profile_heart_id[LANGUAGE_NONE][0]['value'] = $data['my_id'];
    //   $check++;
    // }

    /*
    if(isset($profile->field_profile_my_id)){
      foreach ($profile->field_profile_my_id[LANGUAGE_NONE] as $key => $value) {
        $data_item_load = field_collection_item_load($value['value']);

        if(strcmp($data_item_load->field_profile_my_id_value[LANGUAGE_NONE][0]['value'], $data['my_id']['value'])!= 0){
          $wrapper = entity_metadata_wrapper('field_collection_item', $data_item_load);
          $wrapper->field_profile_my_id_value->set($data['my_id']['value']); 
          $wrapper->field_profile_my_id_is_edit->set($data['my_id']['is_edit']);        
          $wrapper->save();
        }
      }
    }
    */

    foreach ($data['my_id'] as $key => $value) {
      $item_load = field_collection_item_load($key);
      if ($item_load) {
        if ($item_load->field_profile_my_id_value[LANGUAGE_NONE][0]['value'] != $value['value'] ) {
          $wrapper = entity_metadata_wrapper('field_collection_item', $item_load);
          $wrapper->field_profile_my_id_value->set($value['value']);
          $wrapper->field_profile_my_id_is_edit->set($value['is_edit']);    
          $wrapper->save();
        }
      }else{
        $val['field_name'] = 'field_profile_my_id';
        $val['field_profile_my_id_value'][LANGUAGE_NONE][0]['value'] = $value['value'];
        $val['field_profile_my_id_is_edit'][LANGUAGE_NONE][0]['value'] = $value['is_edit'];

        $field_entity = entity_create('field_collection_item', $val);
        $field_entity->setHostEntity('profile2', $profile);
        $field_entity->save();
      }
    }
  }

  // status message
  if (array_key_exists('status_message', $data)) {
    if (strcmp($profile->field_profile_status_message[LANGUAGE_NONE][0]['value'], $data['status_message']) != 0) {
      # code...

      $profile->field_profile_status_message[LANGUAGE_NONE][0]['value'] = preg_replace('/[\x{10000}-\x{10FFFF}]/u', '', $data['status_message']);

      $check++;
    }
  }

  // mails
  if (array_key_exists("mails", $data)) {
    /*
    if(isset($profile->field_profile_multi_email)){
      foreach ($profile->field_profile_multi_email[LANGUAGE_NONE] as $key => $value) {
        $data_item_load = field_collection_item_load($value['value']);


        watchdog(TAG, 'mails: %v-%vv-%vvv', array('%v'=> $data_item_load->field_email_text[LANGUAGE_NONE][0]['value'], '%vv'=>serialize($data['mails']), '%vvv'=>$value['value']), WATCHDOG_INFO);

        // if(strcmp($data_item_load->field_email_text[LANGUAGE_NONE][0]['value'], $data['mails'][$value['value']]['name'])!= 0){

        //   $wrapper = entity_metadata_wrapper('field_collection_item', $data_item_load);
        //   $wrapper->field_email_text->set($data['mails'][$value['value']]['name']);        
        //   $wrapper->save();
        // }
      }
    }
    */

    // $mails = $data['mails'];
    foreach ($data['mails'] as $key => $value) {
      $item_load = field_collection_item_load($key);
      if ($item_load) {
        if ($item_load->field_email_text[LANGUAGE_NONE][0]['value'] != $value['name'] ) {
          $wrapper = entity_metadata_wrapper('field_collection_item', $item_load);
          $wrapper->field_email_text->set($value['name']);
          $wrapper->save();
        }
      }else{
        $val['field_name'] = 'field_profile_multi_email';
        $val['field_email_text'][LANGUAGE_NONE][0]['value'] = $value['name'];

        $field_entity = entity_create('field_collection_item', $val);
        $field_entity->setHostEntity('profile2', $profile);
        $field_entity->save();
      }
    }
  }

  // phone 
  if (array_key_exists("phones", $data)) {
    /*
    if(isset($profile->field_profile_multi_phone)){
      foreach ($profile->field_profile_multi_phone[LANGUAGE_NONE] as $key => $value) {
        $data_item_load = field_collection_item_load($value['value']);

        if(strcmp($data_item_load->field_phone_number[LANGUAGE_NONE][0]['value'], $data['phones'][$value['value']]['name'])!= 0){

          $wrapper = entity_metadata_wrapper('field_collection_item', $data_item_load);
          $wrapper->field_phone_number->set($data['phones'][$value['value']]['name']);        
          $wrapper->save();
        }
      }
    }
    */

  foreach ($data['phones'] as $key => $value) {
      $item_load = field_collection_item_load($key);
      if ($item_load) {
        if ($item_load->field_phone_number[LANGUAGE_NONE][0]['value'] != $value['name'] ) {
          $wrapper = entity_metadata_wrapper('field_collection_item', $item_load);
          $wrapper->field_phone_number->set($value['name']);
          $wrapper->save();
        }
      }else{
        $val['field_name'] = 'field_profile_multi_email';
        $val['field_phone_number'][LANGUAGE_NONE][0]['value'] = $value['name'];

        $field_entity = entity_create('field_collection_item', $val);
        $field_entity->setHostEntity('profile2', $profile);
        $field_entity->save();
      }
    }
  }

  // address
  if (array_key_exists('address', $data)) {
    if (strcmp($profile->field_profile_address[LANGUAGE_NONE][0]['value'], $data['address']) != 0) {
      # code...


      $profile->field_profile_address[LANGUAGE_NONE][0]['value'] = preg_replace('/[\x{10000}-\x{10FFFF}]/u', '', $data['address']);

      $check++;
    }
  }

  // gender 
  if (array_key_exists('gender', $data)) {
    if (strcmp($profile->field_profile_gender[LANGUAGE_NONE][0]['tid'], $data['gender']) != 0) {
      # code...
      $profile->field_profile_gender[LANGUAGE_NONE][0]['tid'] = $data['gender'];

      $check++;
    }
  }

  // field_profile_school
  if (array_key_exists('school', $data)) {
    if (strcmp($profile->field_profile_school[LANGUAGE_NONE][0]['value'], $data['school']) != 0) {
      # code...
      $profile->field_profile_school[LANGUAGE_NONE][0]['value'] = preg_replace('/[\x{10000}-\x{10FFFF}]/u', '', $data['school']);

      $check++;
    }
  }

  // field_profile_company
  if (array_key_exists('company', $data)) {
    if (strcmp($profile->field_profile_company[LANGUAGE_NONE][0]['value'], $data['company']) != 0) {
      # code...
      $profile->field_profile_company[LANGUAGE_NONE][0]['value'] = preg_replace('/[\x{10000}-\x{10FFFF}]/u', '', $data['company']);

      $check++;
    }
  }

  // birthday
  if (array_key_exists('birthday', $data)) {
    if (strcmp($profile->field_profile_birthday[LANGUAGE_NONE][0]['value'], $data['birthday']) != 0) {
      # code...
      $profile->field_profile_birthday[LANGUAGE_NONE][0]['value'] = $data['birthday'];

      $check++;
    }
  }

  // line_id
  if (array_key_exists('line_id', $data)) {
    if (strcmp($profile->field_profile_line_id[LANGUAGE_NONE][0]['value'], $data['line_id']) != 0) {
      # code...
      $profile->field_profile_line_id[LANGUAGE_NONE][0]['value'] = preg_replace('/[\x{10000}-\x{10FFFF}]/u', '', $data['line_id']);

      $check++;
    }
  }


  // field_sound_call_waiting
  // sound_call_waiting
  if (array_key_exists('sound_call_waiting', $data)) {
    /*
    if(isset($profile->field_sound_call_waiting)){

      // foreach ($profile->field_sound_call_waiting[LANGUAGE_NONE] as $k => $v) {
        // $waiting_item_load = field_collection_item_load($waiting_value['value']);

        watchdog(TAG, 'sound_call_waiting: %v', array('%v'=> serialize($profile->field_sound_call_waiting) ), WATCHDOG_INFO);

        // if(strcasecmp($waiting_item_load->field_sound_call_waiting_item_id[LANGUAGE_NONE][0]['value'], $data['sound_call_waiting'][0]['nid']) != 0) {
        //   $wrapper = entity_metadata_wrapper('field_collection_item', $waiting_item_load);
        //   $wrapper->field_sound_call_waiting_item_id->set($data['sound_call_waiting'][0]['nid']);
        //   $wrapper->field_sound_call_waiting_name->set($data['sound_call_waiting'][0]['title']);
        //   $wrapper->field_sound_call_waiting_uri->set($data['sound_call_waiting'][0]['sound_url']);
        //   $wrapper->save();

        //   $check++;
        // }
      // }
    }else{
      foreach ($data['sound_call_waiting'] as $key => $value) {

        $val['field_name'] = 'field_sound_call_waiting';
        $val['field_sound_call_waiting_item_id'][LANGUAGE_NONE][0]['value'] = $value['nid'];
        $val['field_sound_call_waiting_name'][LANGUAGE_NONE][0]['value']    = "title";
        $val['field_sound_call_waiting_uri'][LANGUAGE_NONE][0]['value']     = $value['sound_url'];

        $field_entity = entity_create('field_collection_item', $val);
        $field_entity->setHostEntity('profile2', $profile);
        $field_entity->save();

        $check++;
      }
    }
    */

    foreach ($data['sound_call_waiting'] as $key => $value) {
      $item_load = field_collection_item_load($key);
      if ($item_load) {
        if ($item_load->field_sound_call_waiting_item_id[LANGUAGE_NONE][0]['value'] != $value['nid'] ) {
          $wrapper = entity_metadata_wrapper('field_collection_item', $item_load);
          $wrapper->field_sound_call_waiting_item_id->set($value['nid']);
          $wrapper->field_sound_call_waiting_title->set($value['title']);   
          $wrapper->field_sound_call_waiting_uri->set($value['sound_url']);    
          $wrapper->save();

          // watchdog(TAG, 'sound_call_waiting: %v', array('%v'=> serialize($value) ), WATCHDOG_INFO);
          $check++;
        }
      }else{

        // watchdog(TAG, 'else sound_call_waiting: %v', array('%v'=> serialize($value) ), WATCHDOG_INFO);
        $val['field_name'] = 'sound_call_waiting';
        $val['field_sound_call_waiting_item_id'][LANGUAGE_NONE][0]['value'] = $value['nid'];
        $val['field_sound_call_waiting_title'][LANGUAGE_NONE][0]['value'] = $value['title'];
        $val['field_sound_call_waiting_uri'][LANGUAGE_NONE][0]['value'] = $value['sound_url'];

        $field_entity = entity_create('field_collection_item', $val);
        $field_entity->setHostEntity('profile2', $profile);
        $field_entity->save();

        $check++;
      }
    }
  }


  /*
    เราจะ udpate database ก็ต่อเมือมีการ udpate ข้อมูลเท่านั้น
  */ 
  if ($check > 0) {
    profile2_save($profile);
  }
  
  $result['result'] = TRUE;
  return  $result;
}


function create_my_card()
{
  $result = array();

  if (!empty($_POST['uid']) && !empty($_POST['name'])) {
    $content_type = "page_my_card";

    $node = new stdClass();
    $node->title = $_POST['name'];
    $node->type  = $content_type;
    $node->uid   = $_POST['uid'];
    // $node->body[LANGUAGE_NONE][0]['value']  = "";
    // $node->field_verify_token[LANGUAGE_NONE][0]['value']  = $_POST['UDID'];
    // $node->field_verify_key[LANGUAGE_NONE][0]['value']    = $verify_key;
    
    $node->language = LANGUAGE_NONE;
    // $node->revision = 0;

    $node = node_submit($node);
    node_save($node);


    // create to firebase
    /*
        // insert new 12/24/2559
        if ( $firebase->get(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $account->uid . '/profile/') == 'null') {
          # code...
          
          $extension = explode('@', $account->mail);

          if (strcasecmp($extension[1], 'annmousu') == 0) {
             $data_profile = array(
              "uid"             => $account->uid,
              "display_name"    => generate_name_annmousu($account->name),
              "picture"         => '',
              "phone"           => '',
              "status_message"  => '',
              "heart"           => DEFUALT_NUMBER_HEART,
              "create"          => time(),
              "update"          => time()
            );

          }else{

            $data_profile = array(
              "uid"             => $account->uid,
              "display_name"    => $account->name,
              "picture"         => '',
              "phone"           => '',
              "status_message"  => '',
              "heart"           => DEFUALT_NUMBER_HEART,
              "create"          => time(),
              "update"          => time()
            );
          }

          $firebase->set(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $account->uid . '/profile/', $data_profile);

        }else{
          $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $account->uid . '/profile/', $data);
        }
        // insert new 12/24/2559

      }


      // เก้บเครื่องที่ user ใช้
      $data = array(
        "udid" => $_GET['udid'],
        "platform"=>$_GET['platform'],
        "token"=>$_GET['token'],
        "online"=>'1',
        "create" => time(),
        "update" => time()
      );

      $firebase->push(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $account->uid .'/HW/', $data);
    */
      /*
    $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);
    // if ( $firebase->get(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $_POST['uid'] . '/my-id/my-card/') == 'null') {

      $data = array(
              "name"      => $_POST['name'],
              "photo"     => '',
              "email"     => array(),
              "phone"     => array(),
              "create"    => time(),
              "update"    => time()
            );
      $firebase->push(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $_POST['uid'] . '/my-id/my-card/', $data);
    // }
      */


    // create to firebase

    $result['result'] = TRUE;
  }else{
    $result['result'] = FALSE;
    $result['message'] = "Empty uid & name.";
  }

  $result['$_POST'] = $_POST;
  return $result;
}


function _load_imag_defualt_card_background(){
  $filename = 'ic_defualt_card_background.png';
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'file')
    ->propertyCondition('filename', $filename)
    ->execute();
  // if you are guaranteed there is exactly one result, then:
  $file_object = reset($result['file']);
  $fid = $file_object->fid;

  return file_load($fid);
}

function _load_imag_defualt_profile(){
  $filename = 'ic_defualt_profile.png';
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'file')
    ->propertyCondition('filename', $filename)
    ->execute();
  // if you are guaranteed there is exactly one result, then:
  $file_object = reset($result['file']);
  $fid = $file_object->fid;

  return file_load($fid);
}

function _load_imag_defualt_application(){
  $filename = 'ic_defualt_application.png';
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'file')
    ->propertyCondition('filename', $filename)
    ->execute();
  // if you are guaranteed there is exactly one result, then:
  $file_object = reset($result['file']);
  $fid = $file_object->fid;

  return file_load($fid);
}


function create_defualt_application($uid){
  global $firebase;

  $name         = 'Default';
  $category     = '9';
  $subcategory  = '14';

  $image_url    = (array)get_defualt_picture(32);

  // watchdog(TAG, 'create_defualt_my_application header: %header', array('%header'=> serialize($image_url)), WATCHDOG_INFO);

  /*
  $profile = profile2_by_uid_load($uid, 'main');

  # code...
  $val = array();
  $val['field_name'] = 'field_my_application'; // field collection name

  $val['field_my_application_uid'][LANGUAGE_NONE][0]['value']   = $uid;
  $val['field_my_application_is_defualt'][LANGUAGE_NONE][0]['value']   = "1";
  $val['field_my_app_name'][LANGUAGE_NONE][0]['value']          = $name;
  $val['field_my_app_category'][LANGUAGE_NONE][0]['tid']        = $category;
  $val['field_my_app_subcategoty'][LANGUAGE_NONE][0]['tid']     = $subcategory;

  $val['field_image'][LANGUAGE_NONE][0]                         = $image_url;
  

  // Create the field collection entry and associate it with the profile
  $field_entity = entity_create('field_collection_item', $val);
  $field_entity->setHostEntity('profile2', $profile);
  $field_entity->save();

  $data_update = array(
      "owner_id"   => $uid,
      "is_defualt" => "1",
      "name"       => $name,
      "category"   => $category,
      "subcategory"   => $subcategory,
      "image_url"  => substr(file_create_url($image_url['uri']), strlen($GLOBALS['base_url']))
  );
  $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $uid ."/" . FIREBASE_MY_APPLIPATIONS_PATH . $field_entity->item_id, $data_update);
  
  // เราจะวิ่งไปสร้าง center/category ด้วย
  $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_CENTER . $category .'/'. $field_entity->item_id, $data_update);

  */

  $node = new stdClass();
  $node->title = $name;
  $node->type  = "application";
  $node->uid   = $uid;

  $node->field_image[LANGUAGE_NONE][0]                      = $image_url;
  $node->field_my_app_category[LANGUAGE_NONE][0]['tid']     = $category;
  $node->field_my_app_subcategoty[LANGUAGE_NONE][0]['tid']  = $subcategory;

  $node->language = LANGUAGE_NONE;
  $node->status   = 1;
  $node->comment  = 0; 
  $node = node_submit($node);
  node_save($node);

  $data_update = array(
      "owner_id"    => $uid,
      "is_defualt"  => "1",
      "name"        => $name,
      "category"    => $category,
      "subcategory" => $subcategory,
      "image_url"   => substr(file_create_url($image_url['uri']), strlen($GLOBALS['base_url']))
  );
  $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $uid ."/" . FIREBASE_MY_APPLIPATIONS_PATH . $node->nid, $data_update);

  $result['result']   = TRUE;
  return $result; 
}

function create_my_application(){
  $result = array();

  global $firebase;

  if (!check_header()) {
    $result['result'] = FALSE;
    $result['message']= "check_header()";
    return $result;
  }

  if (empty($_REQUEST['uid']) || empty($_REQUEST['name']) || empty($_REQUEST['image']) || empty($_REQUEST['category']) || empty($_REQUEST['subcategory'])) {
    $result['result'] = FALSE;
    $result['message']  = "function : create_my_application, parameter";
    return $result;
  }

  $uid      = $_REQUEST['uid'];
  $name     = $_REQUEST['name'];
  $image    = $_REQUEST['image'];
  $category = $_REQUEST['category'];
  $subcategory = $_REQUEST['subcategory'];

  if($image != ""){

    // http://stackoverflow.com/questions/8241242/drupal-7-upload-image-programatically
    $binary = base64_decode($image);

    //Create the directory if it does not already exist, otherwise check the permissions
    $directory = 'public://';
    file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

    $currentDate = date("Ymd");
    $file_name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
    
    //Saves a file to the specified destination and creates a database entry.
    $file = klovers_file_save_data($uid, $binary, $directory. '/' . $file_name, FILE_EXISTS_RENAME);

    $image_url = (array)$file;
  }

  /*
  $profile = profile2_by_uid_load($uid, 'main');

  # code...
  $val = array();
  $val['field_name'] = 'field_my_application'; // field collection name

  $val['field_my_application_uid'][LANGUAGE_NONE][0]['value']   = $uid;
  $val['field_my_app_name'][LANGUAGE_NONE][0]['value']          = $name;
  $val['field_my_app_category'][LANGUAGE_NONE][0]['tid']        = $category;
  $val['field_my_app_subcategoty'][LANGUAGE_NONE][0]['tid']     = $subcategory;

  $val['field_image'][LANGUAGE_NONE][0]                         = $image_url;
  

  // Create the field collection entry and associate it with the profile
  $field_entity = entity_create('field_collection_item', $val);
  $field_entity->setHostEntity('profile2', $profile);
  $field_entity->save();


  // Firebase : update image url profile
  $data_update = array(
      "owner_id"   => $uid,
      "is_defualt" => "0",
      "name"       => $name,
      "category"   => $category,
      "subcategory"   => $subcategory,
      "image_url"  => substr(file_create_url($image_url['uri']), strlen($GLOBALS['base_url']))
  );
  $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $uid ."/" . FIREBASE_MY_APPLIPATIONS_PATH . $field_entity->item_id, $data_update);

  
  $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_CENTER . $category .'/'. $field_entity->item_id, $data_update);

  $result['result']   = TRUE;
  $result['item']     = $data_update;
  $result['item_id']  = $field_entity->item_id;
  */

  // 
  $node = new stdClass();
  $node->title = preg_replace('/[\x{10000}-\x{10FFFF}]/u', '', $name);
  $node->type  = "application";
  $node->uid   = $uid;

  $node->field_image[LANGUAGE_NONE][0]                      = $image_url;
  $node->field_my_app_category[LANGUAGE_NONE][0]['tid']     = $category;
  $node->field_my_app_subcategoty[LANGUAGE_NONE][0]['tid']  = $subcategory;

  $node->language = LANGUAGE_NONE;
  $node->status   = 1;
  $node->comment  = 0; 
  $node = node_submit($node);
  node_save($node);

  $data_update = array(
      "owner_id"    => $uid,
      "is_defualt"  => "0",
      "name"        => $name,
      "category"    => $category,
      "subcategory" => $subcategory,

      // $url = substr(file_create_url(image_style_url('medium',$image_url['uri'])), strlen($GLOBALS['base_url']));
      "image_url"   => substr(file_create_url(image_style_url('medium',$image_url['uri'])), strlen($GLOBALS['base_url']))
  );
  $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $uid ."/" . FIREBASE_MY_APPLIPATIONS_PATH . $node->nid, $data_update);

  $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_CENTER . $category .'/'. $node->nid, $data_update);

  $result['result']   = TRUE;
  $result['item']     = $data_update;
  $result['item_id']  = $node->nid;

  return $result;
}

function create_my_application_follow(){
  $result = array();

  global $firebase;

  if (!check_header()) {
    $result['result'] = FALSE;
    $result['message']= "check_header()";
    return $result;
  }

  if (empty($_REQUEST['owner_id']) || empty($_REQUEST['app_id']) || empty($_REQUEST['friend_id'])) {
    $result['result'] = FALSE;
    $result['message']  = "function : create_my_application_follow, parameter";

    return $result;
  }
  /*
    เจ้าของ application
  */
  $owner_id    = $_REQUEST['owner_id'];

  /*
  เพือนที่กด follow application
  */
  $friend_id    = $_REQUEST['friend_id'];

  /*
  id application
  */
  $app_id = $_REQUEST['app_id'];


  /*
    เพิ่มเติม
    เราต้องวิ่งไปเพิ่ม following ของ friend_id ด้วย
  */ 
  $friend_profile = profile2_by_uid_load($friend_id, 'main');

  $flag = false;
  if(isset($friend_profile->field_following)){
    foreach ($friend_profile->field_following[LANGUAGE_NONE] as $key => $value) {
      $items = field_collection_item_load($value['value']);
      if ($items->field_id_my_app_following[LANGUAGE_NONE][0]['value'] == $app_id ) {
        $flag = true;
        break;
      }
    }
  }
  
  if (!$flag) {
    $values = array();
    $values['field_name'] = 'field_following'; 

    // #1 field_class_image_profile
    $values['field_id_my_app_following'][LANGUAGE_NONE][0]['value'] = $app_id;
  
    // #2 field_name_group
    $values['field_status_following'][LANGUAGE_NONE][0]['value'] = "1";

    // Create the field collection entry and associate it with the profile
    $field_entity = entity_create('field_collection_item', $values);
    $field_entity->setHostEntity('profile2', $friend_profile);
    $field_entity->save();


    $data_update = array(
      "item_id"    => $field_entity->item_id,
      "status"     => "1",
      "create"     => time(),
      "update"     => time()
    );
    $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $friend_id ."/" . PATH_FOLLOWING ."/". $app_id, $data_update);
  }

  // เพิ่มเติม

  /*
    เป็นการ load my_app_follower  ทั้งหมด เพือ check ว่าเราเคยกด follow หรือไม่ ถ้าไม่ ก็ สร้าง ปกติ แต่ถ้า เคยแล้วให้  return item_id 
  */
    
  $data_item = field_collection_item_load($app_id);
  foreach ($data_item->field_my_app_follower[LANGUAGE_NONE] as $key => $value) {
    $items = field_collection_item_load($value['value']);
    if ($items->field_my_app_uid_follower[LANGUAGE_NONE][0]['value'] == $friend_id ) {
      # code...
      $result['result']   = TRUE;
      $result['item_id']  = $value['value'];

      return $result;
      break;
    } 
  }


  $profile = profile2_by_uid_load($owner_id, 'main');
  foreach ($profile->field_my_application[LANGUAGE_NONE] as $key => $value) {
    if ($app_id == $value['value']) {

      $data = field_collection_item_load($value['value']);

      // $wrapper = entity_metadata_wrapper('field_collection_item', $data);
      //$wrapper->field_my_app_follower->value();

/*
      $result['p'] = $app_id;
      $result['w'] = $wrapper = entity_metadata_wrapper('field_collection_item', $data);
      $result['x'] =  $data->field_my_app_follower[LANGUAGE_NONE];

      $result['y'] =  $data->field_my_app_follower;

      if (!empty($data->field_my_app_follower[LANGUAGE_NONE])) {
        foreach ($data->field_my_app_follower[LANGUAGE_NONE] as $ckey => $cvalue) {
          $result[][$ckey] =  $cvalue;
        }
      }
*/




      $values = array();
      $values['field_name'] = 'field_my_app_follower'; 
      /*
      uid friend ที่กด follow
      */
      $values['field_my_app_uid_follower'][LANGUAGE_NONE][0]['value'] = $friend_id;
      $values['field_status_follow'][LANGUAGE_NONE][0]['value'] = '1';
      // $val['field_image'][LANGUAGE_NONE][0] = (array)$file;

      
      $field_entity = entity_create('field_collection_item', $values);
      $field_entity->setHostEntity("field_my_app_follower", $data);
      $field_entity->save();  //  ยังมีปัญหาอยู่ ต้องแก้ใขเพราะว่าไม่ได้ return สถานะเอามาว่าสำเร็จหรือเปล่า แต่ save สำเร็จ      

      /*
      $value = array(
        "title"     => $title,                        
        "message"   => $detail,
        "image_url" => substr(file_create_url($image_url['uri']), strlen($GLOBALS['base_url'])),
        "create"    => time(),
        "update"    => time()
      );

      $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid . '/' . FIREBASE_MY_APPLIPATIONS_PATH . $app_id . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_PATH . $field_entity->item_id .'/' , $value);


      $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_CENTER . $data->field_my_app_category[LANGUAGE_NONE][0]['tid'] .'/'. $app_id . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_PATH . $field_entity->item_id .'/' , $value);
      */

      

      $result['result']   = TRUE;
      $result['item_id']  = $field_entity->item_id;

      return $result;
      break;
    }
  }

  $result['result']   = FALSE;
  return $result;
}

function update_my_application_follow(){
  $result = array();
  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  $param = json_decode(file_get_contents('php://input'), true);
  if (empty($param['app_id']) || empty($param['data']) || empty($param['object_id'])) {
    $result['result'] = FALSE;
    $result['message'] = "function update_my_application_follow : parameter";
    return $result;
  }

  global $firebase;

  $app_id     = $param['app_id'];
  $object_id  = $param['object_id'];
  $data       = $param['data'];

  $query  = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'field_collection_item')
                    ->entityCondition('bundle', 'field_my_app_follower')
                    ->fieldCondition('field_my_app_follower_object_id', 'value', $object_id, '=')
                    ->execute();

  $node = node_load($app_id);

  if (!empty($entities['field_collection_item'])) {
    // กรณีนี้อาจไม่เกิดขึ้นเลยก็ได้
    $item_id = array_keys($entities['field_collection_item'])[0];

    $data_item = field_collection_item_load($item_id);
    if ($data_item) {
      $wrapper = entity_metadata_wrapper('field_collection_item', $data_item);
      if (strcmp($wrapper->field_status_following->value(), $data["status"]) != 0) {
        $wrapper->field_status_following->set($data["status"]);
        $wrapper->save();
      }
    }
  }else{
    // $data = field_collection_item_load($value['value']);

    $post_value = array();
    $post_value['field_name'] = 'field_my_app_follower'; 
    $post_value['field_my_app_follower_object_id'][LANGUAGE_NONE][0]['value'] = $object_id;
    $post_value['field_my_app_uid_follower'][LANGUAGE_NONE][0]['value']       = $data["uid"];
    $post_value['field_status_following'][LANGUAGE_NONE][0]['value']          = $data["status"];

    $field_entity = entity_create('field_collection_item', $post_value);
    $field_entity->uid = $data["uid"];
    $field_entity->setHostEntity("node", $node);
    $field_entity->save(); 
  }

  $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $node->uid ."/my_applications/" .$app_id.  "/follows/" . $object_id . "/", $data);
 



  $query  = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'field_collection_item')
                    ->entityCondition('bundle', 'field_following')
                    ->fieldCondition('field_id_my_app_following', 'value', $app_id, '=')
                    ->execute();

  if (!empty($entities['field_collection_item'])) {
    // กรณีนี้อาจไม่เกิดขึ้นเลยก็ได้
    $item_id = array_keys($entities['field_collection_item'])[0];

    $data_item = field_collection_item_load($item_id);
    if ($data_item) {
      $wrapper = entity_metadata_wrapper('field_collection_item', $data_item);
      if (strcmp($wrapper->field_status_following->value(), $data["status"]) != 0) {
        $wrapper->field_status_following->set($data["status"]);
        $wrapper->save();
      }
    }
  }else{
    $profile = profile2_by_uid_load($data["uid"], 'main');
    $value = array();
    $value['field_name'] = 'field_following'; // field collection name

    $value['field_id_my_app_following'][LANGUAGE_NONE][0]['value'] = $app_id;
    $value['field_status_following'][LANGUAGE_NONE][0]['value'] =  $data["status"];
    $value['field_my_application_uid'][LANGUAGE_NONE][0]['value'] = $data["uid"];

    // Create the field collection entry and associate it with the profile
    $field_entity = entity_create('field_collection_item', $value);
    $field_entity->uid = $data["uid"];
    $field_entity->setHostEntity('profile2', $profile);
    $field_entity->save();
  }

  $value = array( "uid"     => $node->uid,                        
                  "status"   => $data["status"]);
  $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $data["uid"] ."/following/" .$app_id , $value);

  $result['result'] = TRUE;
  // $result['entities']  = $entities['field_collection_item'];
  // $result['param']  = $param;
  return $result;
}

function update_my_application_post_like(){
  $result = array();

  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  $param = json_decode(file_get_contents('php://input'), true);
  if (empty($param['app_id']) || empty($param['post_id']) || empty($param['data']) || empty($param["object_id"])) {
    $result['result'] = FALSE;
    $result['message'] = "function update_my_application_post_like : parameter";
    return $result;
  }

  global $firebase;

  $app_id   = $param["app_id"];  
  $post_id  = $param["post_id"];  
  $object_id= $param["object_id"];
  $data     = $param["data"];     


  $query  = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'field_collection_item')
                    ->entityCondition('bundle', 'field_my_app_post_like')
                    ->fieldCondition('field_object_id', 'value', $object_id, '=')
                    ->execute();

  $node = node_load($app_id);

  if (!empty($entities['field_collection_item'])) {
    // กรณีนี้อาจไม่เกิดขึ้นเลยก็ได้
    $item_id = array_keys($entities['field_collection_item'])[0];

    $data_item = field_collection_item_load($item_id);
    if ($data_item) {
      $wrapper = entity_metadata_wrapper('field_collection_item', $data_item);
      if (strcmp($node->uid, $data["uid"]) != 0) {
        $wrapper->field_status_following->set($data["status"]);
        $wrapper->save();
      }
    }
  }else{

    $data_post = field_collection_item_load($post_id);

    $values = array();
    $values['field_name'] = 'field_my_app_post_like'; 
    $values['field_friend_uid'][LANGUAGE_NONE][0]['value']        = $data["uid"];
    $values['field_object_id'][LANGUAGE_NONE][0]['value']         = $object_id;
    $values['field_status_following'][LANGUAGE_NONE][0]['value']  = $data["status"];
    
    $field_entity = entity_create('field_collection_item', $values);
    $field_entity->uid = $data["uid"];
    $field_entity->setHostEntity("field_my_app_post_like", $data_post);
    $field_entity->save();
  }

  $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $node->uid ."/my_applications/" .$app_id. '/posts/'. $post_id .'/likes/' . $object_id, $data);

  $result['result']   = TRUE;
  // $result['param']    = $param;
  return $result;
}

function center_post_comments_like(){
  $result = array();

  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  $param = json_decode(file_get_contents('php://input'), true);
  if (empty($param['app_id']) || empty($param['post_id']) || empty($param["comment_id"]) || empty($param["object_id"]) || empty($param['data']) ) {
    $result['result'] = FALSE;
    $result['message'] = "function update_my_application_post_like : parameter";
    return $result;
  }
  

  global $firebase;

  $app_id     = $param["app_id"];  
  $post_id    = $param["post_id"];  
  $comment_id = $param["comment_id"];  
  $object_id  = $param["object_id"];
  $data       = $param["data"];  

  try{
    $query  = new EntityFieldQuery();
    $entities = $query->entityCondition('entity_type', 'field_collection_item')
                      ->entityCondition('bundle', 'field_my_app_post_like')
                      ->fieldCondition('field_object_id', 'value', $object_id, '=')
                      ->execute();

    //field_my_app_update_comment


    $node = node_load($app_id);

    if (!empty($entities['field_collection_item'])) {
      // กรณีนี้อาจไม่เกิดขึ้นเลยก็ได้
      $item_id = array_keys($entities['field_collection_item'])[0];

      $data_item = field_collection_item_load($item_id);
      if ($data_item) {
        $wrapper = entity_metadata_wrapper('field_collection_item', $data_item);
        // if (strcmp($node->uid, $data["uid"]) != 0) {
          $wrapper->field_status_following->set($data["status"]);
          $wrapper->save();
        // }
        $result['b'] = $wrapper->field_status_following->value();

      }
    }else{

      $data_comment = field_collection_item_load($comment_id);

      $values = array();
      $values['field_name'] = 'field_my_app_post_like'; 
      $values['field_friend_uid'][LANGUAGE_NONE][0]['value']        = $data["uid"];
      $values['field_object_id'][LANGUAGE_NONE][0]['value']         = $object_id;
      $values['field_status_following'][LANGUAGE_NONE][0]['value']  = $data["status"];
      
      $field_entity = entity_create('field_collection_item', $values);
      $field_entity->uid = $data["uid"];
      $field_entity->setHostEntity("field_my_app_post_like", $data_comment);
      $field_entity->save();

      $result['field_entity->item_id']    = $field_entity->item_id;
    }
  } catch (Exception $e) {
    $result['result']   = FALSE;
    $result['error']    = $e->getMessage();
  }

  // [NSString stringWithFormat:@"%@center/%@/%@/posts/%@/comments/%@/likes/"
  $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $node->uid ."/my_applications/" .$app_id. '/posts/'. $post_id .'/comments/'. $comment_id .'/likes/' . $object_id, $data);

  $result['result']   = TRUE;
  $result['param']    = $param;
  return $result;
}

function center_post_update_comments(){
  $result = array();

  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  $param = json_decode(file_get_contents('php://input'), true);
  if (empty($param['app_id']) || empty($param['post_id']) || empty($param["object_id"]) || empty($param['data'])) {
    $result['result'] = FALSE;
    $result['message'] = "function center_post_update_comments : parameter";
    return $result;
  }

  global $firebase;

  $app_id     = $param['app_id'];
  $post_id    = $param['post_id'];
  $object_id  = $param["object_id"];
  $data       = $param['data'];

  $node = node_load($app_id);


  $query  = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'field_collection_item')
                    ->entityCondition('bundle', 'field_my_app_update_comment')
                    ->fieldCondition('field_object_id', 'value', $object_id, '=')
                    ->execute();

  if (!empty($entities['field_collection_item'])) {
    // กรณีนี้อาจไม่เกิดขึ้นเลยก็ได้
    $item_id = array_keys($entities['field_collection_item'])[0];

    $data_item = field_collection_item_load($item_id);
    if ($data_item) {
      $wrapper = entity_metadata_wrapper('field_collection_item', $data_item);

      $wrapper->field_comment_message->set($data["message"]);
      $wrapper->save();
    }

      $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $node->uid ."/my_applications/" .$app_id. '/posts/'. $post_id .'/comments/' . $object_id . '/', $data);
  }

  /*else{
    $data_post = field_collection_item_load($post_id);

    $values = array();
    $values['field_name'] = 'field_my_app_update_comment'; 
    $values['field_friend_uid'][LANGUAGE_NONE][0]['value']        = $data["uid"];
    // $values['field_object_id'][LANGUAGE_NONE][0]['value']         = $object_id;
    $values['field_comment_message'][LANGUAGE_NONE][0]['value']   = $data["message"];
    
    $field_entity = entity_create('field_collection_item', $values);
    $field_entity->uid = $data["uid"];
    $field_entity->setHostEntity("field_my_app_update_comment", $data_post);
    $field_entity->save();
  }

  $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $node->uid ."/my_applications/" .$app_id. '/posts/'. $post_id .'/comments/' . $object_id . '/', $data);
  */

  $result['result']   = TRUE;
  // $result['param']    = $param;
  return $result;
}

function create_my_application_v1()
{
  $result = array();

  if (!empty($_POST['uid']) && !empty($_POST['name'])) {
    $content_type = "pages_my_app";

    $node = new stdClass();
    $node->title = $_POST['name'];
    $node->type  = $content_type;
    $node->uid   = $_POST['uid'];

    // $node->field_my_app_category[LANGUAGE_NONE][0]['tid'] = $_POST['category'];


    // $node->body[LANGUAGE_NONE][0]['value']  = "";
    // $node->field_verify_token[LANGUAGE_NONE][0]['value']  = $_POST['UDID'];
    // $node->field_verify_key[LANGUAGE_NONE][0]['value']    = $verify_key;

    if($_POST['image'] != ""){

      $image = $_POST['image'];

      // http://stackoverflow.com/questions/8241242/drupal-7-upload-image-programatically
      $binary = base64_decode($image);

      //Create the directory if it does not already exist, otherwise check the permissions
      $directory = 'public://';
      file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

      $currentDate = date("Ymd");
      $name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
      
      //Saves a file to the specified destination and creates a database entry.
      $file = klovers_file_save_data($_POST['uid'], $binary, $directory. '/' . $name, FILE_EXISTS_RENAME);

      $node->field_image[LANGUAGE_NONE][0] = (array)$file;
    }

    $node->language = LANGUAGE_NONE;
    $node = node_submit($node);
    node_save($node);





// $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);

  // เป้นการโหลดข้อมูลของ profile user ซึ่งจะได้รู้ว่า friend ของ user

  // #1 load profile user
  // #1 ดึงข้อมูลของเรา เพือเพิ่มข้อมูล ใน field_profile_friends
  $user_fields = user_load($_REQUEST['uid']);
  $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);
  $profile_user =  profile2_load($profile2_load_by_user['main']->pid);
  // #1 load profile user

  # code...
  $user_values = array();
  $user_values['field_name'] = 'field_my_application'; // field collection name

  $user_values['field_my_app_name'][LANGUAGE_NONE][0]['value'] = $_POST['name'];
  $user_values['field_my_app_category'][LANGUAGE_NONE][0]['tid'] = $_POST['category'];
  $user_values['field_image'][LANGUAGE_NONE][0] = (array)$file;
  

  // Create the field collection entry and associate it with the profile
  $field_entity = entity_create('field_collection_item', $user_values);
  $field_entity->setHostEntity('profile2', $profile_user);
  $field_entity->save();
  


    /*
    $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);
    // if ( $firebase->get(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $_POST['uid'] . '/my-id/my-card/') == 'null') {

    $data = array(
              "name"      => $_POST['name'],
              "picture"   => (array)$file,
              "category"  => $_POST['category'],
              "email"     => array(),
              "phone"     => array(),
              "create"    => time(),
              "update"    => time()
            );

    $firebase->set(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $_POST['uid'] . '/my-id/my-app/'. $node->nid, $data);
    */
    // }
    // create to firebase

    $result['result'] = TRUE;
    $result['item_id'] = $field_entity->item_id;
  }else{
    $result['result'] = FALSE;
    $result['message'] = "Empty uid & name.";
  }

  $result['$_POST'] = $_POST;

  return $result;
}

function edit_reply_comment_child(){
  $result = array();

  if (!check_header()) {
    $result['result'] = FALSE;
    $result['message']= "check_header()";
    return $result;
  }

    if (empty($_REQUEST['uid']) || empty($_REQUEST['owner_id']) || empty($_REQUEST['app_id'])|| empty($_REQUEST['post_id']) || empty($_REQUEST['text'])) {
    $result['result']   = FALSE;
    $result['message']  = "function : edit_reply_comment_child, parameter";
    // $result['_REQUEST'] = $_REQUEST;
    // $result['$_FILES']  = $_FILES;
    return $result;
  }

  global $firebase;

  $uid     = $_REQUEST['uid'];
  $owner_id= $_REQUEST['owner_id'];
  $app_id  = $_REQUEST['app_id'];
  $post_id = $_REQUEST['post_id'];
  $comment_id = $_REQUEST['comment_id'];
  $reply_id = $_REQUEST['reply_id'];
  $text     = $_REQUEST['text'];

  //return $_REQUEST;

  $data_reply = field_collection_item_load($reply_id);
  if ($data_reply) {
    $wrapper = entity_metadata_wrapper('field_collection_item', $data_reply);

    if(!empty($_FILES["idna"])){
      // http://stackoverflow.com/questions/8241242/drupal-7-upload-image-programatically
      $binary =  file_get_contents($_FILES["idna"]["tmp_name"]);//base64_decode($image);

      //Create the directory if it does not already exist, otherwise check the permissions
      $directory = 'public://';
      file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

      $currentDate = date("Ymd");
      $file_name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
      
      //Saves a file to the specified destination and creates a database entry.
      $file = klovers_file_save_data($uid, $binary, $directory. '/' . $file_name, FILE_EXISTS_RENAME);

      $arr_file = (array)$file;

      $wrapper->field_image->set($arr_file);       
      $wrapper->save();

      $uri = file_load($arr_file['fid'])->uri;
      // $image_url = substr(file_create_url(image_style_url('medium', $uri)), strlen($GLOBALS['base_url']));

      $thumbnail_uri  = substr(file_create_url(image_style_url('medium', $uri)), strlen($GLOBALS['base_url']));
      $original_uri   = substr(file_create_url($uri), strlen($GLOBALS['base_url']));


      $value = array(                     
          "thumbnail_uri"     => $thumbnail_uri,
          "original_uri"      => $original_uri
      );

      $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $owner_id ."/my_applications/" .$app_id. '/posts/'. $post_id .'/comments/' . $comment_id . '/replys/'. $reply_id . '/', $value);
    }


    if (strcmp($wrapper->field_reply_message->value(), $text) != 0) {
        
        $wrapper->field_reply_message->set(preg_replace('/[\x{10000}-\x{10FFFF}]/u', '', $text));
        $wrapper->save();

        // $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid . '/' . FIREBASE_MY_APPLIPATIONS_PATH . $app_id . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_PATH . $post_id .'/', array("message" => $detail));

        // inser new user
        $value = array(                     
          "text"      => $text
        );

        $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $owner_id ."/my_applications/" .$app_id. '/posts/'. $post_id .'/comments/' . $comment_id . '/replys/'. $reply_id . '/', $value);

        // . '/replys/' . $field_entity->item_id . '/', $value);
    }

    $result['result']   = TRUE;
    return $result;

  }else{
    $result['result']   = FALSE;
    return $result;
  }
}

function add_reply_comment_child(){
  $result = array();

  if (!check_header()) {
    $result['result'] = FALSE;
    $result['message']= "check_header()";
    return $result;
  }

  if (empty($_REQUEST['uid']) || empty($_REQUEST['owner_id']) || empty($_REQUEST['app_id'])|| empty($_REQUEST['post_id']) || empty($_REQUEST['comment_id']) || empty($_REQUEST['text'])) {
    $result['result']   = FALSE;
    $result['message']  = "function : add_reply_comment_child, parameter";
    // $result['_REQUEST'] = $_REQUEST;
    // $result['$_FILES']  = $_FILES;
    return $result;
  }

  global $firebase;

  $uid        = $_REQUEST['uid'];
  $owner_id   = $_REQUEST['owner_id'];
  $app_id     = $_REQUEST['app_id'];
  $post_id    = $_REQUEST['post_id'];
  $comment_id = $_REQUEST['comment_id'];
  $text       = $_REQUEST['text'];

  $data_comment = field_collection_item_load($comment_id);
  if ($data_comment) {
    $values = array();
    $values['field_name'] = 'field_reply_comment'; 
    $values['field_friend_uid'][LANGUAGE_NONE][0]['value']      = $uid;
    $values['field_reply_message'][LANGUAGE_NONE][0]['value']   = preg_replace('/[\x{10000}-\x{10FFFF}]/u', '', $text);


    $image_url;
    if(!empty($_FILES["idna"])){
      // http://stackoverflow.com/questions/8241242/drupal-7-upload-image-programatically
      $binary =  file_get_contents($_FILES["idna"]["tmp_name"]);//base64_decode($image);

      //Create the directory if it does not already exist, otherwise check the permissions
      $directory = 'public://';
      file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

      $currentDate = date("Ymd");
      $file_name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
      
      //Saves a file to the specified destination and creates a database entry.
      $file = klovers_file_save_data($uid, $binary, $directory. '/' . $file_name, FILE_EXISTS_RENAME);

      $arr_file = (array)$file;
    
      $values['field_image'][LANGUAGE_NONE][0] = $arr_file;  


      $field_entity = entity_create('field_collection_item', $values);
      $field_entity->uid = $uid;
      $field_entity->setHostEntity("field_reply_comment", $data_comment);
      $field_entity->save();


      $uri = file_load($arr_file['fid'])->uri;
      $thumbnail_uri  = substr(file_create_url(image_style_url('medium', $uri)), strlen($GLOBALS['base_url']));
      $original_uri   = substr(file_create_url($uri), strlen($GLOBALS['base_url']));

      //dpm($field_entity->item_id);

      // $node     = node_load($app_id);
      // $category = $node->field_my_app_category[LANGUAGE_NONE][0]['tid'];

      // $thumbnail_uri = substr(file_create_url(image_style_url('medium', $uri)), strlen($GLOBALS['base_url']));
      // $original_uri = substr(file_create_url($uri), strlen($GLOBALS['base_url']));

      // $images[$multi_image_field_entity->item_id] = array("thumbnail_uri" => $thumbnail_uri, "original_uri" => $original_uri);

      $value = array(                     
          "text"      => $text,
          "uid"       => $uid,
          "thumbnail_uri" =>$thumbnail_uri,
          "original_uri"  =>$original_uri
        );

      // insert new center 
      // $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_CENTER . $category .'/'. $app_id . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_PATH . $post_id . '/comments/' .$field_entity->item_id, $value);

      // inser new user
      $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $owner_id ."/my_applications/" .$app_id. '/posts/'. $post_id .'/comments/' . $comment_id . '/replys/' . $field_entity->item_id . '/', $value);

      $result['result']   = TRUE;
      $result['item_id']  = $field_entity->item_id;
      $result['value']    = $value;
      // $result['$field_entity'] = field_collection_item_load($field_entity->item_id);;
      return $result;
    }else{

      $field_entity = entity_create('field_collection_item', $values);
      $field_entity->uid = $uid;
      $field_entity->setHostEntity("field_reply_comment", $data_comment);
      $field_entity->save();

      $value = array(                     
          "text"      => $text,
          "uid"       => $uid
        );

      // inser new user
      $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $owner_id ."/my_applications/" .$app_id. '/posts/'. $post_id .'/comments/' . $comment_id . '/replys/' . $field_entity->item_id . '/', $value);

      $result['result']   = TRUE;
      $result['item_id']  = $field_entity->item_id;
      $result['value']    = $value;
      return $result;
    }
  }

  $result['result']   = FALSE;
  return $result;
}

function edit_comment_parent(){

  $result = array();

  if (!check_header()) {
    $result['result'] = FALSE;
    $result['message']= "check_header()";
    return $result;
  }

  if (empty($_REQUEST['uid']) || empty($_REQUEST['owner_id']) || empty($_REQUEST['app_id'])|| empty($_REQUEST['post_id']) || empty($_REQUEST['comment_id']) || empty($_REQUEST['text'])) {
    $result['result']   = FALSE;
    $result['message']  = "function : edit_comment_parent, parameter";
    // $result['_REQUEST'] = $_REQUEST;
    // $result['$_FILES']  = $_FILES;
    return $result;
  }

  global $firebase;

  $uid     = $_REQUEST['uid'];
  $owner_id= $_REQUEST['owner_id'];
  $app_id  = $_REQUEST['app_id'];
  $post_id = $_REQUEST['post_id'];
  $comment_id = $_REQUEST['comment_id'];
  $text    = $_REQUEST['text'];

  // return $_REQUEST;

  $data_comment = field_collection_item_load($comment_id);
  if ($data_comment) {
    $wrapper = entity_metadata_wrapper('field_collection_item', $data_comment);

    if(!empty($_FILES["idna"])){
      // http://stackoverflow.com/questions/8241242/drupal-7-upload-image-programatically
      $binary =  file_get_contents($_FILES["idna"]["tmp_name"]);//base64_decode($image);

      //Create the directory if it does not already exist, otherwise check the permissions
      $directory = 'public://';
      file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

      $currentDate = date("Ymd");
      $file_name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
      
      //Saves a file to the specified destination and creates a database entry.
      $file = klovers_file_save_data($uid, $binary, $directory. '/' . $file_name, FILE_EXISTS_RENAME);

      $arr_file = (array)$file;

      $wrapper->field_image->set($arr_file);       
      $wrapper->save();

      $uri = file_load($arr_file['fid'])->uri;
      // $image_url = substr(file_create_url(image_style_url('medium', $uri)), strlen($GLOBALS['base_url']));

      $thumbnail_uri  = substr(file_create_url(image_style_url('medium', $uri)), strlen($GLOBALS['base_url']));
      $original_uri   = substr(file_create_url($uri), strlen($GLOBALS['base_url']));


      $value = array(                     
          "thumbnail_uri"     => $thumbnail_uri,
          "original_uri"      => $original_uri
      );

      $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $owner_id ."/my_applications/" .$app_id. '/posts/'. $post_id .'/comments/' . $comment_id . '/', $value);
    }


    if (strcmp($wrapper->field_comment_message->value(), $text) != 0) {
        
        $wrapper->field_comment_message->set(preg_replace('/[\x{10000}-\x{10FFFF}]/u', '', $text));
        $wrapper->save();

        // $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid . '/' . FIREBASE_MY_APPLIPATIONS_PATH . $app_id . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_PATH . $post_id .'/', array("message" => $detail));

        // inser new user
        $value = array(                     
          "text"      => $text
        );

        $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $owner_id ."/my_applications/" .$app_id. '/posts/'. $post_id .'/comments/' . $comment_id . '/', $value);
    }

    $result['result']   = TRUE;
    return $result;

  }else{
    $result['result']   = FALSE;
    return $result;
  }

}

function add_comment_parent(){

  $result = array();

  if (!check_header()) {
    $result['result'] = FALSE;
    $result['message']= "check_header()";
    return $result;
  }

  if (empty($_REQUEST['uid']) || empty($_REQUEST['owner_id']) || empty($_REQUEST['app_id'])|| empty($_REQUEST['post_id']) || empty($_REQUEST['text'])) {
    $result['result']   = FALSE;
    $result['message']  = "function : add_comment_parent, parameter";
    // $result['_REQUEST'] = $_REQUEST;
    // $result['$_FILES']  = $_FILES;
    return $result;
  }

  global $firebase;

  $uid     = $_REQUEST['uid'];
  $owner_id= $_REQUEST['owner_id'];
  $app_id  = $_REQUEST['app_id'];
  $post_id = $_REQUEST['post_id'];
  // $image   = $_REQUEST['image'];
  $text    = $_REQUEST['text'];
  
  $data_post = field_collection_item_load($post_id);
  if ($data_post) {
    $values = array();
    $values['field_name'] = 'field_my_app_update_comment'; 
    $values['field_friend_uid'][LANGUAGE_NONE][0]['value']        = $uid;
    $values['field_comment_message'][LANGUAGE_NONE][0]['value']   = preg_replace('/[\x{10000}-\x{10FFFF}]/u', '', $text);


    $image_url;
    if(!empty($_FILES["idna"])){
      // http://stackoverflow.com/questions/8241242/drupal-7-upload-image-programatically
      $binary =  file_get_contents($_FILES["idna"]["tmp_name"]);//base64_decode($image);

      //Create the directory if it does not already exist, otherwise check the permissions
      $directory = 'public://';
      file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

      $currentDate = date("Ymd");
      $file_name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
      
      //Saves a file to the specified destination and creates a database entry.
      $file = klovers_file_save_data($uid, $binary, $directory. '/' . $file_name, FILE_EXISTS_RENAME);

      $arr_file = (array)$file;
    
      $values['field_image'][LANGUAGE_NONE][0] = $arr_file;  


      $field_entity = entity_create('field_collection_item', $values);
      $field_entity->uid = $uid;
      $field_entity->setHostEntity("field_my_app_update_comment", $data_post);
      $field_entity->save();


      $uri = file_load($arr_file['fid'])->uri;
      $thumbnail_uri  = substr(file_create_url(image_style_url('medium', $uri)), strlen($GLOBALS['base_url']));
      $original_uri   = substr(file_create_url($uri), strlen($GLOBALS['base_url']));

      //dpm($field_entity->item_id);

      // $node     = node_load($app_id);
      // $category = $node->field_my_app_category[LANGUAGE_NONE][0]['tid'];

      // $thumbnail_uri = substr(file_create_url(image_style_url('medium', $uri)), strlen($GLOBALS['base_url']));
      // $original_uri = substr(file_create_url($uri), strlen($GLOBALS['base_url']));

      // $images[$multi_image_field_entity->item_id] = array("thumbnail_uri" => $thumbnail_uri, "original_uri" => $original_uri);

      $value = array(                     
          "text"      => $text,
          "uid"       => $uid,
          "thumbnail_uri" =>$thumbnail_uri,
          "original_uri"  =>$original_uri
        );

      // insert new center 
      // $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_CENTER . $category .'/'. $app_id . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_PATH . $post_id . '/comments/' .$field_entity->item_id, $value);

      // inser new user
      $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $owner_id ."/my_applications/" .$app_id. '/posts/'. $post_id .'/comments/' . $field_entity->item_id . '/', $value);

      $result['result']   = TRUE;
      $result['item_id']  = $field_entity->item_id;
      $result['value']    = $value;
      $result['$field_entity'] = field_collection_item_load($field_entity->item_id);;
      return $result;
    }else{

      $field_entity = entity_create('field_collection_item', $values);
      $field_entity->uid = $uid;
      $field_entity->setHostEntity("field_my_app_update_comment", $data_post);
      $field_entity->save();

      $value = array(                     
          "text"      => $text,
          "uid"       => $uid
        );

      // inser new user
      $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $owner_id ."/my_applications/" .$app_id. '/posts/'. $post_id .'/comments/' . $field_entity->item_id . '/', $value);

      $result['result']   = TRUE;
      $result['item_id']  = $field_entity->item_id;
      $result['value']    = $value;
      return $result;
    }
      
    

    /*
    $result['x'] = FIREBASE_DEFAULT_PATH . FIREBASE_CENTER . $category .'/'. $app_id . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_PATH . $post_id . '/comments/' .$field_entity->item_id;

    $result['y'] =  FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $node->uid ."/my_applications/" .$app_id. '/posts/'. $post_id .'/comments/' . $field_entity->item_id;
    */
    

 
  }else{
    $result['result']   = FALSE;
    return $result;
  }




  /*
  $image  = $_REQUEST['image'];

  if($image != ""){
    // http://stackoverflow.com/questions/8241242/drupal-7-upload-image-programatically
    $binary = base64_decode($image);

    //Create the directory if it does not already exist, otherwise check the permissions
    $directory = 'public://';
    file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

    $currentDate = date("Ymd");
    $file_name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
    
    //Saves a file to the specified destination and creates a database entry.
    $file = klovers_file_save_data($uid, $binary, $directory. '/' . $file_name, FILE_EXISTS_RENAME);
    
  }

  $image_url =  (array)$file;
  */



  /*
  $data_post = field_collection_item_load("1105490");

  $values = array();
  $values['field_name'] = 'field_my_app_update_comment'; 
  $values['field_friend_uid'][LANGUAGE_NONE][0]['value']        = "1234";
  // $values['field_object_id'][LANGUAGE_NONE][0]['value']         = $object_id;
  $values['field_comment_message'][LANGUAGE_NONE][0]['value']   = "xmessage";
    
  $field_entity = entity_create('field_collection_item', $values);
  // $field_entity->uid = $data["uid"];
  $field_entity->setHostEntity("field_my_app_update_comment", $data_post);
  $field_entity->save();

  dpm($field_entity->item_id);
  */

  /*
  // 1. Load All node by nid 
  $node = node_load($nid);

  $post_value = array();
  $post_value['field_name'] = 'field_my_app_update'; 
  $post_value['field_my_app_title'][LANGUAGE_NONE][0]['value'] = $title;
  $post_value['field_my_app_message_update'][LANGUAGE_NONE][0]['value'] = $detail;
  // $post_value['field_image'][LANGUAGE_NONE][0] = $image_url;

  $field_entity = entity_create('field_collection_item', $post_value);
  $field_entity->uid = $uid;
  $field_entity->setHostEntity("node", $node);
  $field_entity->save(); 

  // dpm($field_entity->item_id);

  $value = array(
        "title"     => $title,                        
        "message"   => $detail,
        "image_url" => substr(file_create_url($image_url['uri']), strlen($GLOBALS['base_url']))
      );

  $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid . '/' . FIREBASE_MY_APPLIPATIONS_PATH . $nid . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_PATH . $field_entity->item_id .'/' , $value);


  $node     = node_load($nid);
  $category = $node->field_my_app_category[LANGUAGE_NONE][0]['tid'];
  $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_CENTER . $category .'/'. $nid . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_PATH . $field_entity->item_id, $value);

  $result['result']   = TRUE;
  $result['post_id']  = $field_entity->item_id;
  $result['value']    = $value;
  //  $result['_REQUEST'] = $_REQUEST;
  */
 
}

function add_post(){
  $result = array();

  if (!check_header()) {
    $result['result'] = FALSE;
    $result['message']= "check_header()";
    return $result;
  }

  if (empty($_REQUEST['uid']) || empty($_REQUEST['app_id']) || empty($_REQUEST['detail']) ) {
    $result['result'] = FALSE;
    $result['message']  = "function : add_post, parameter";
    return $result;
  }

  global $firebase;

  $uid    = $_REQUEST['uid'];
  $app_id    = $_REQUEST['app_id'];
  // $title  = $_REQUEST['title'];


  $detail = $_REQUEST['detail'];
  // $image  = $_REQUEST['image'];


  $pictures = $_REQUEST['pictures'];

  /*
  $members = array();
  foreach ($_REQUEST['members'] as $key => $value){
    $values_profile_group = array();
    $values_profile_group['field_name'] = 'field_members_group'; 
    $values_profile_group['field_members_group_friend_id'][LANGUAGE_NONE][0]['value'] = $value;
    $values_profile_group['field_members_group_status'][LANGUAGE_NONE][0]['value'] = "pedding";

    $field_entity_members_group = entity_create('field_collection_item', $values_profile_group);
    $field_entity_members_group->setHostEntity("field_members_group", $data_profile_group);
    $field_entity_members_group->save(); 

    $members[$field_entity_members_group->item_id] = array("friend_id"=>$value, "status"=>"pedding");
  }
  */

  /*


    $value = array();
    $value['field_name'] = 'field_profile_multi_phone'; // field collection name

    $value['field_phone_number'][LANGUAGE_NONE][0]['value'] = $_POST['number_new'];

    // Create the field collection entry and associate it with the profile
    $field_entity = entity_create('field_collection_item', $value);
    $field_entity->setHostEntity('node', $profile);
    $field_entity->save();
  */

  /*
  if($image != ""){
    // http://stackoverflow.com/questions/8241242/drupal-7-upload-image-programatically
    $binary = base64_decode($image);

    //Create the directory if it does not already exist, otherwise check the permissions
    $directory = 'public://';
    file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

    $currentDate = date("Ymd");
    $file_name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
    
    //Saves a file to the specified destination and creates a database entry.
    $file = klovers_file_save_data($uid, $binary, $directory. '/' . $file_name, FILE_EXISTS_RENAME);
    
  }

  $image_url =  (array)$file;

  */

  /*
 // $mails = $data['mails'];
    foreach ($data['mails'] as $key => $value) {
      $item_load = field_collection_item_load($key);
      if ($item_load) {
        if ($item_load->field_email_text[LANGUAGE_NONE][0]['value'] != $value['name'] ) {
          $wrapper = entity_metadata_wrapper('field_collection_item', $item_load);
          $wrapper->field_email_text->set($value['name']);
          $wrapper->save();
        }
      }else{
        $val['field_name'] = 'field_profile_multi_email';
        $val['field_email_text'][LANGUAGE_NONE][0]['value'] = $value['name'];

        $field_entity = entity_create('field_collection_item', $val);
        $field_entity->setHostEntity('profile2', $profile);
        $field_entity->save();
      }
    }
  */

  // 1. Load All node by nid 
  $node = node_load($app_id);

  $post_value = array();
  $post_value['field_name'] = 'field_my_app_update'; 
  // $post_value['field_my_app_title'][LANGUAGE_NONE][0]['value'] = 'title';
  $post_value['field_my_app_message_update'][LANGUAGE_NONE][0]['value'] = preg_replace('/[\x{10000}-\x{10FFFF}]/u', '', $detail);
  // $post_value['field_image'][LANGUAGE_NONE][0] = $image_url;

  $field_entity = entity_create('field_collection_item', $post_value);
  $field_entity->uid = $uid;
  $field_entity->setHostEntity("node", $node);
  $field_entity->save(); 

  // dpm($field_entity->item_id);

  $my_app_update = field_collection_item_load($field_entity->item_id);

  $images = array();
  foreach ($pictures as $key => $value){
    $val = array();
    $val['field_name'] = 'field_multi_image';

    $binary = base64_decode($value);

    //Create the directory if it does not already exist, otherwise check the permissions
    $directory = 'public://';
    file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

    $currentDate = date("Ymd");
    $file_name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
    
    //Saves a file to the specified destination and creates a database entry.
    $file = klovers_file_save_data($uid, $binary, $directory. '/' . $file_name, FILE_EXISTS_RENAME);

    $val['field_image'][LANGUAGE_NONE][0] = (array)$file;

    $multi_image_field_entity = entity_create('field_collection_item', $val);
    $multi_image_field_entity->setHostEntity('field_multi_image', $my_app_update);
    $multi_image_field_entity->save();

    $image_url =  (array)$file;

    $uri = file_load($image_url['fid'])->uri;

    $thumbnail_uri = substr(file_create_url(image_style_url('medium', $uri)), strlen($GLOBALS['base_url']));
    $original_uri = substr(file_create_url($uri), strlen($GLOBALS['base_url']));

    $images[$multi_image_field_entity->item_id] = array("thumbnail_uri" => $thumbnail_uri, "original_uri" => $original_uri);
  }
  
  $value = array(                     
        "message"   => $detail,
        "images"    => $images
      );

  $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid . '/' . FIREBASE_MY_APPLIPATIONS_PATH . $app_id . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_PATH . $field_entity->item_id .'/' , $value);

  /*

  $node     = node_load($nid);
  $category = $node->field_my_app_category[LANGUAGE_NONE][0]['tid'];
  $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_CENTER . $category .'/'. $nid . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_PATH . $field_entity->item_id, $value);

  $result['result']   = TRUE;
  $result['post_id']  = $field_entity->item_id;
  $result['value']    = $value;
  //  $result['_REQUEST'] = $_REQUEST;

  */

  $result['result']   = TRUE;

  return $result;
}


/*
  @param 
  uid                 : uid ขอเจ้าของ app_id นี้
  app_id              : app_id
  post_id             : post_id
  detail              : เป็นข้อความ เราต้องเช็ดการ update ด้วยว่าได้แก้ไข ไม ถ้าแก้ไขต้อง update
  pictures[array]     : เราต้องเช็ดด้วยว่าใน array pictures มี item_id อะไรบ้างถ้าไม่อยู่ใน array pictures ให้ลบทิ้ง
  new_pictures[array] : เป็น array image ใหม่เราสามารถ insert เพิ่มลงไปได้เลย
*/
function edit_post(){
  $result = array();
  global $firebase;

  if (!check_header()) {
    $result['result'] = FALSE;
    $result['message']= "check_header()";
    return $result;
  }

  if (empty($_REQUEST['uid']) || empty($_REQUEST['app_id'])  || empty($_REQUEST['post_id']) || empty($_REQUEST['detail']) ) {
    $result['result'] = FALSE;
    $result['message']  = "function : edit_post, parameter";
    return $result;
  }

  $uid      = $_REQUEST['uid'];
  $app_id   = $_REQUEST['app_id'];
  $post_id  = $_REQUEST['post_id'];


  // $input = base64_decode($_REQUEST['detail']);//$BB6B>8l8@B,;n(B - testing
  // $input_encoding = 'iso-2022-jp';


  $detail   = $_REQUEST['detail'];
  $pictures = $_REQUEST['pictures'];

  

  // 1. เป็นการโหลด ข้อมูล post ขึ้นมากเพือจะทำการแก้ใขข้อมูล 
  $data_item = field_collection_item_load($post_id);

  if ($data_item) {
    $wrapper = entity_metadata_wrapper('field_collection_item', $data_item);

    if (strcmp($wrapper->field_my_app_message_update->value(), $detail) != 0) {
        /*
          กรณี อักษระเป็น emoji จะมีปัญหาตอน save เราต้องใช้  preg_replace('/[\x{10000}-\x{10FFFF}]/u', '', ข้อความ) ก่อนทำการบันทึก
        */
        $wrapper->field_my_app_message_update->set(preg_replace('/[\x{10000}-\x{10FFFF}]/u', '', $detail));
        $wrapper->save();

        $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid . '/' . FIREBASE_MY_APPLIPATIONS_PATH . $app_id . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_PATH . $post_id .'/', array("message" => $detail));
    }

    // $result['field_multi_image']   = $wrapper->field_multi_image->value();

    foreach ($wrapper->field_multi_image->value() as $i_image) {
      if (!in_array($i_image->item_id, $pictures)){
        // จะมีกรณีที user ต้องการลบรูปเก่าทีเคย post เราต้องเช็ดด้วย 
        entity_delete_multiple('field_collection_item', array($i_image->item_id));

        /*
       //  เราต้อง update firebase ด้วย
        */
        $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid . '/' . FIREBASE_MY_APPLIPATIONS_PATH . $app_id . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_PATH . $post_id .'/images/'. $i_image->item_id);
      }
    }

    // เป้นการ insert รูปใหม่ลงไป
    // $my_app_update = field_collection_item_load($field_entity->item_id);

    if (!empty($_REQUEST['new_pictures'])) {

      $new_pictures  = $_REQUEST['new_pictures'];
      $images = array();
      foreach ($new_pictures as $key => $value){
        $val = array();
        $val['field_name'] = 'field_multi_image';

        $binary = base64_decode($value);

        //Create the directory if it does not already exist, otherwise check the permissions
        $directory = 'public://';
        file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

        $currentDate = date("Ymd");
        $file_name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
        
        //Saves a file to the specified destination and creates a database entry.
        $file = klovers_file_save_data($uid, $binary, $directory. '/' . $file_name, FILE_EXISTS_RENAME);

        $val['field_image'][LANGUAGE_NONE][0] = (array)$file;

        $multi_image_field_entity = entity_create('field_collection_item', $val);
        $multi_image_field_entity->setHostEntity('field_multi_image', $data_item);
        $multi_image_field_entity->save();

        $image_url =  (array)$file;

        $uri = file_load($image_url['fid'])->uri;

        $thumbnail_uri = substr(file_create_url(image_style_url('medium', $uri)), strlen($GLOBALS['base_url']));
        $original_uri = substr(file_create_url($uri), strlen($GLOBALS['base_url']));

        // $images[$multi_image_field_entity->item_id] = array("thumbnail_uri" => $thumbnail_uri, "original_uri" => $original_uri);

        $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid . '/' . FIREBASE_MY_APPLIPATIONS_PATH . $app_id . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_PATH . $post_id .'/images/' . $multi_image_field_entity->item_id .'/' , array("thumbnail_uri" => $thumbnail_uri, "original_uri" => $original_uri));
      }
    }
    
    // $value = array(
    //       "title"     => $title,                        
    //       "message"   => $detail,
    //       "images"    => $images
    //     );

    
  }

  

  /*
  $data_item = field_collection_item_load($post_id);

  if ($data_item) {
      $wrapper = entity_metadata_wrapper('field_collection_item', $data_item);

      if (strcmp($wrapper->field_my_app_title->value(), $title) != 0) {
        $wrapper->field_my_app_title->set($title);
        $wrapper->save();


        
        // เราจำเป้นต้องวิ่ง ไป udpate 2 ที่ด้วยกันคือ my_application , center
        

        $value = array(
          "title"     => $title,
          "update"    => time()
        );

        // #1
        $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid . '/' . FIREBASE_MY_APPLIPATIONS_PATH . $app_id . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_PATH . $post_id .'/' , $value);

        // เราจะวิ่งไปแก้ไข post center/category ด้วย
        // #2
        $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_CENTER . $category_id .'/'. $app_id . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_PATH . $post_id .'/' , $value);
      }

      if (strcmp($wrapper->field_my_app_message_update->value(), $detail) != 0) {
        $wrapper->field_my_app_message_update->set($detail);
        $wrapper->save();
        
        // เราจำเป้นต้องวิ่ง ไป udpate 2 ที่ด้วยกันคือ my_application , center
        $value = array(
          "message"     => $detail,
          "update"    => time()
        );

        // #1
        $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid . '/' . FIREBASE_MY_APPLIPATIONS_PATH . $app_id . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_PATH . $post_id .'/' , $value);
        
        // เราจะวิ่งไปแก้ไข post center/category ด้วย 
        // #2
        $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_CENTER . $category_id .'/'. $app_id . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_PATH . $post_id .'/' , $value);
      }

      if ($image != "") {
        # code...
         // http://stackoverflow.com/questions/8241242/drupal-7-upload-image-programatically
        $binary = base64_decode($image);

        //Create the directory if it does not already exist, otherwise check the permissions
        $directory = 'public://';
        file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

        $currentDate = date("Ymd");
        $file_name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
        
        //Saves a file to the specified destination and creates a database entry.
        $file = klovers_file_save_data($_REQUEST['uid'], $binary, $directory. '/' . $file_name, FILE_EXISTS_RENAME);

        // https://www.drupal.org/node/1803286 update file image
        // $wrapper->field_image[0]->set((array)$file);     

        $image_url = (array)$file;

        $wrapper->field_image->set($image_url);       
        $wrapper->save();
        
        $result['image_url'] = substr(file_create_url($image_url['uri']), strlen($GLOBALS['base_url']));

        // เราจำเป้นต้องวิ่ง ไป udpate 2 ที่ด้วยกันคือ my_application , center
        $value = array(
          "image_url" => $result['image_url'],
          "update"    => time()
        );


        // #1
        $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid . '/' . FIREBASE_MY_APPLIPATIONS_PATH . $app_id . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_PATH . $post_id .'/' , $value);
    
        // เราจะวิ่งไปแก้ไข post center/category ด้วย
        // #2
        $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_CENTER . $category_id .'/'. $app_id . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_PATH . $post_id .'/' , $value);
      }
  }
  */

  $result['result']   = TRUE;
  return $result;

}

function like_post(){

  $result = array();

  global $firebase;

  if (!check_header()) {
    $result['result'] = FALSE;
    $result['message']= "check_header()";
    return $result;
  }

  if (empty($_REQUEST['friend_id']) || empty($_REQUEST['post_id'])) {
    $result['result'] = FALSE;
    $result['message']  = "function : like_post, parameter";
    return $result;
  }

  return $result;
}

function AED_post()
{
  $result = array();

  if (empty($_REQUEST['uid'])) {
    $result['result'] = FALSE;
    return $result;
  }

  if ($_REQUEST['is_add'] == 1) {
    // เป็นการเพิ่มใหม่

    $profile = profile2_by_uid_load($_REQUEST['uid'], 'main');

    foreach ($profile->field_my_application[LANGUAGE_NONE] as $key => $value) {
        if ($_REQUEST['item_id'] == $value['value']) {
   
          $data = field_collection_item_load($value['value']);

          $values = array();
          $values['field_name'] = 'field_my_app_update'; 
          $values['field_my_app_title'][LANGUAGE_NONE][0]['value'] = $_REQUEST['title'];
          $values['field_my_app_message_udate'][LANGUAGE_NONE][0]['value'] = $_REQUEST['detail'];
          // $val['field_image'][LANGUAGE_NONE][0] = (array)$file;

          if($_POST['image'] != ""){

            $image = $_POST['image'];

            // http://stackoverflow.com/questions/8241242/drupal-7-upload-image-programatically
            $binary = base64_decode($image);

            //Create the directory if it does not already exist, otherwise check the permissions
            $directory = 'public://';
            file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

            $currentDate = date("Ymd");
            $name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
            
            //Saves a file to the specified destination and creates a database entry.
            $file = klovers_file_save_data($_POST['uid'], $binary, $directory. '/' . $name, FILE_EXISTS_RENAME);

            $values['field_image'][LANGUAGE_NONE][0] = (array)$file;
          }   

          $field_entity = entity_create('field_collection_item', $values);
          $field_entity->setHostEntity("field_my_app_update", $data);
          $field_entity->save();  //  ยังมีปัญหาอยู่ ต้องแก้ใขเพราะว่าไม่ได้ return สถานะเอามาว่าสำเร็จหรือเปล่า แต่ save สำเร็จ      

          $value = array();
          $value[$field_entity->item_id]["title"]   = $_REQUEST['title'];
          $value[$field_entity->item_id]["message"] = $_REQUEST['detail'];
          $value[$field_entity->item_id]["picture"] = (array)$file;
    
          $result['result']   = TRUE;
          $result['post_id']  = $field_entity->item_id;
          $result['values']   = $value;

          return $result;
          break;
        }
      }
  }else if ($_REQUEST['is_add'] == 0){
    // เป็นการแก้ไข
    $items  = field_collection_item_load($_REQUEST['post_nid']);
    $wrapper = entity_metadata_wrapper('field_collection_item', $items);

    try {
      //Update value
      $wrapper->field_my_app_title->set($_REQUEST['title']);
      $wrapper->field_my_app_message_udate->set(array(
                                                    'value' => $_REQUEST['detail'],
                                                    'summary' => 'This is the summary',
                                                    'format' => 'full_html',
                                                  ));
      $image = $_REQUEST['image'];

      // http://stackoverflow.com/questions/8241242/drupal-7-upload-image-programatically
      $binary = base64_decode($image);

      //Create the directory if it does not already exist, otherwise check the permissions
      $directory = 'public://';
      file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

      $currentDate = date("Ymd");
      $name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
      
      //Saves a file to the specified destination and creates a database entry.
      $file = klovers_file_save_data($_REQUEST['uid'], $binary, $directory. '/' . $name, FILE_EXISTS_RENAME);

      // https://www.drupal.org/node/1803286 update file image
      // $wrapper->field_image[0]->set((array)$file);     
      $wrapper->field_image->set((array)$file);       
      $wrapper->save();

    } catch (Exception $e) {
      $result['error'] = $e->getMessage();
    }
    $result['result'] = TRUE;
  }else if($_REQUEST['is_add'] == -1){
    // เป็นการ Delete post
    entity_delete_multiple('field_collection_item', array($_REQUEST['post_nid']));

    $result['result'] = TRUE;
  }

  return $result;
}

function delete_post(){
  if (!check_header()) {
    $result['result'] = FALSE;
    $result['message']= "check_header()";
    return $result;
  }

  $param = json_decode(file_get_contents('php://input'), true);
  if (empty($param['post_id'])) {
    $result['result'] = FALSE;
    $result['message']  = "function : delete_post, parameter";
    return $result;
  }

  global $firebase;
  $post_id = $param['post_id'];

  /*
  $item_load = field_collection_item_load($post_id);

  $uid    = $item_load->hostEntity()->uid;
  $app_id = $item_load->hostEntity()->nid;

  $firebase->delete(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid . '/' . FIREBASE_MY_APPLIPATIONS_PATH . $app_id .'/'.FIREBASE_MY_APPLIPATIONS_POSTS_PATH .$post_id );
  */

  entity_delete_multiple('field_collection_item', array($post_id));

  $result['result'] = TRUE; 
  return $result;
}

function center_post_delete_comments(){
  if (!check_header()) {
    $result['result'] = FALSE;
    $result['message']= "check_header()";
    return $result;
  }

  $param = json_decode(file_get_contents('php://input'), true);
  if (empty($param['app_id']) || empty($param['post_id']) || empty($param['object_id'])) {
    $result['result']   = FALSE;
    $result['message']  = "function : center_post_delete_comments, parameter";
    $result['param']    = $param;
    return $result;
  }

  try {
    global $firebase;
    $app_id     = $param['app_id'];
    $post_id    = $param['post_id'];
    $object_id  = $param['object_id'];
    // $data       = $param['data'];

    $item_load = field_collection_item_load($post_id);
    $uid    = $item_load->hostEntity()->uid;

    $firebase->delete(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid . '/' . FIREBASE_MY_APPLIPATIONS_PATH . $app_id .'/'.FIREBASE_MY_APPLIPATIONS_POSTS_PATH .$post_id .'/'. FIREBASE_MY_APPLIPATIONS_POSTS_COMMENTS_PATH . $object_id);

    $query  = new EntityFieldQuery();
    $entities = $query->entityCondition('entity_type', 'field_collection_item')
                      ->entityCondition('bundle', 'field_my_app_update_comment')
                      ->fieldCondition('field_object_id', 'value', $object_id, '=')
                      ->execute();

    if (!empty($entities['field_collection_item'])) {
      // กรณีนี้อาจไม่เกิดขึ้นเลยก็ได้
      $item_id = array_keys($entities['field_collection_item'])[0];
      entity_delete_multiple('field_collection_item', array($item_id));
    }
  } catch (Exception $e) {
    echo 'Caught exception: ',  $e->getMessage(), "\n";
    $result['result'] = FALSE; 
    $result['message'] = $e->getMessage(); 
  }

  $result['result'] = TRUE; 
  return $result;
}

// https://www.drupal.org/node/2382811
function comment_post()
{
  $result = array();

  /*
  $result = array();
  if (empty($_REQUEST['uid']) || empty($_REQUEST['name']) || empty($_REQUEST['category']) || empty($_REQUEST['image'])) {
    $result['result'] = FALSE;
    $result['$_REQUEST'] = $_REQUEST;
    return $result;
  }
  */

  /*
  a_id : application id
  p_id : post id
  */

  if (empty($_REQUEST['uid']) || empty($_REQUEST['a_id']) || empty($_REQUEST['p_id']) || empty($_REQUEST['text'])) {
    $result['result'] = FALSE;
    $result['$_REQUEST'] = $_REQUEST;
    return $result;
  }

  /*
  // 1. Load All node by nid 
  $node = node_load($_POST['nid']);

  // 2. Get field_my_app_update 
  foreach ($node->field_my_app_update[LANGUAGE_NONE] as $key => $value) {
    $data = field_collection_item_load($value['value']);
    
    // 3. Check itme_id == nid_item ?
    if($data->item_id == $_POST['nid_item']){
      
      
      // 4. Create Comment  
      $values = array();
      $values['field_name'] = 'field_my_app_update_comment'; 
      $values['field_comment_message'][LANGUAGE_NONE][0]['value'] = $_POST['text'];

      $entity_data = $field_entity = entity_create('field_collection_item', $values);
      $field_entity->setHostEntity("field_my_app_update_comment", $data);
      $field_entity->save();  //  ยังมีปัญหาอยู่ ต้องแก้ใขเพราะว่าไม่ได้ return สถานะเอามาว่าสำเร็จหรือเปล่า แต่ save สำเร็จ      
      
      break;
    }
  }
  */

  $result['result'] = TRUE;
  
  return $result;
}

function update_new_password()
{
  $result = array();

  require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');

  $account = user_load($_POST['uid']);

  $check = user_check_password($_POST['old_password'], $account);

  if ($check) {
    # code...

    $account->pass = $_POST['new_password'];

    // save existing user
    user_save((object) array('uid' => $account->uid), (array) $account);
    

    $result['result'] = TRUE;
    $result['function'] = "update_new_password";
    $result["$_POST"]  = $_POST;
  }else{

    $result['result'] = FALSE;
    $result["message"]  = "Old password not match.";
  }

  
  return $result;
}

function idna_update_profile($data)
{
  $result = array();

  try {

    $user_fields = user_load($_POST['uid']);
    // เป็นการ โหลด profile เพือเราจะหา pid ของ user นั้นๆ
    $profile2_load_by_user = profile2_load_by_user($user_fields, NULL)['main'];

    if($_POST['image'] != ""){


      $image = $_POST['image'];

      // http://stackoverflow.com/questions/8241242/drupal-7-upload-image-programatically
      $binary = base64_decode($image);

      //Create the directory if it does not already exist, otherwise check the permissions
      $directory = 'public://services_image';
      file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

      $currentDate = date("Ymd");
      $name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
      
      //Saves a file to the specified destination and creates a database entry.
      $file = klovers_file_save_data($_POST['uid'], $binary, $directory. '/' . $name, FILE_EXISTS_RENAME);


      // save รูป profile
      $profile2_load_by_user->field_profile_image[LANGUAGE_NONE][0] = (array)$file;
    }

    if($_POST['imageBG'] != ""){


      $image = $_POST['imageBG'];

      // http://stackoverflow.com/questions/8241242/drupal-7-upload-image-programatically
      $binary = base64_decode($image);

      //Create the directory if it does not already exist, otherwise check the permissions
      $directory = 'public://services_image';
      file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

      $currentDate = date("Ymd");
      $name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
      
      //Saves a file to the specified destination and creates a database entry.
      $file = klovers_file_save_data($_POST['uid'], $binary, $directory. '/' . $name, FILE_EXISTS_RENAME);


      // save รูป profile
      $profile2_load_by_user->field_field_profile_bg[LANGUAGE_NONE][0] = (array)$file;
    }

    // &phone_number=%@&google_plus=%@&facebook=%@
    $profile2_load_by_user->field_profile_name[LANGUAGE_NONE][0]['value'] = $_POST['name'];
    $profile2_load_by_user->field_profile_phone[LANGUAGE_NONE][0]['value'] = $_POST['phone_number'];
    $profile2_load_by_user->field_profile_location[LANGUAGE_NONE][0]['value'] = $_POST['location'];
    $profile2_load_by_user->field_profile_google_plus[LANGUAGE_NONE][0]['value'] = $_POST['google_plus'];
    $profile2_load_by_user->field_profile_facebook[LANGUAGE_NONE][0]['value'] = $_POST['facebook'];

    profile2_save($profile2_load_by_user);

    
    $result['file'] = (array)$file ;
    $result['message'] = "klovers_update_profile";
    $result['data'] = $data;
    $result['uid'] = $_POST['uid'];
    $result['x'] =  $profile2_load_by_user;
    $result['profile2_load_by_user'] = $profile2_load_by_user;


    $result['result'] = TRUE;

  }catch (Exception $e) {
    $result['message'] = 'Caught exception: '.  $e->getMessage(). "\n";

    $result['result'] = FALSE;
    $result['message'] = 'Caught exception: '.  $e->getMessage(). "\n";
  }

  return $result;
}

function delete_user(){
  
  $uids = db_select('users', 'ur')
        ->fields('ur', array('uid'))
        // ->condition('ur.uid', $uid, '!=')
        // ->condition('ur.uid', 0, '!=')
        // ->condition('ur.uid', 1, '!=')
        ->condition('ur.uid', 0, '!=')
        ->condition('ur.uid', 1, '!=')
        ->execute()
        ->fetchCol();

  // $mul_users =  user_delete_multiple($uids);

  foreach ($uids as &$value) {
    // echo "--> " . $value . '<\br>';
    user_delete($value);
  }
  

  // global $firebase;
  // $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL, FIREBASE_BASIC_KEY);
  // dpm($firebase);

  return "Delete completion.";
}

function reset_heart()
{

  $uids = db_select('users', 'ur')
        ->fields('ur', array('uid'))
        // ->condition('ur.uid', $uid, '!=')
        // ->condition('ur.uid', 0, '!=')
        // ->condition('ur.uid', 1, '!=')
        ->condition('ur.uid', 0, '!=')
        ->condition('ur.uid', 1, '!=')
        ->execute()
        ->fetchCol();

  $mul_users =  user_load_multiple($uids);

  // $data = array();
  foreach ($mul_users as $account) {
    # code...
    
    // $tmp['uid'] = $account->uid;
    // $tmp['name'] = $account->name;
    // $tmp['mail'] = $account->mail;

    // // $path= file_create_url($uri)  uri
    // if(!is_null($account->picture)){
    //   $tmp['url_image'] = file_create_url($account->picture->uri); 
    // }else{
    //   $tmp['url_image'] = "";
    // }

    // เป้นการโหลดข้อมูลของ profile user ซึ่งจะได้รู้ว่า friend ของ user
    $user_fields = user_load($account->uid);

    if (!$user_fields->uid) {
      // User is not logged in
      //services_error(t('User is not logged in.'), 406);

      $result['result'] = FALSE;
      $result['output'] = "uid not match is user";

      return $result;
    }

    $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);

    // $profile2_load_by_user->field_profile_heart[LANGUAGE_NONE][0]['value'] = LIMIT_SEND_HEART;

    profile2_save($profile2_load_by_user);
  }

  // echo "<pre>";
  // var_dump($data);
  // echo "</pre>";

  // watchdog("Reset Heart", "1", WATCHDOG_ERROR);
  // watchdog("idna", 'Reset Heart = %uid', array('%uid' => '1'), WATCHDOG_ERROR);


  return "Reset Heart";
}

function create_group_chat(){
  $result = array();

  if (!check_header()) {
    $result['result'] = FALSE;
    $result['message']= "check_header()";
    return $result;
  }

  if (empty($_REQUEST['uid']) || empty($_REQUEST['name']) || empty($_REQUEST['image'])) {
    $result['result'] = FALSE;
    $result['message']  = "function : create_group_chat, parameter";
    return $result;
  }

  global $firebase;

  $uid    = $_REQUEST['uid'];
  $name   = $_REQUEST['name'];
  $image  = $_REQUEST['image'];

  // chat_id เป้น id ที่ไว้สำหรับอ้างอิงเป้น chat id  
  $chat_id = generateRandomString(LENGTH_CHAT_ID);

  $profile = profile2_by_uid_load($uid, 'main');

  $image_url = array();
  if($image != ""){

    // http://stackoverflow.com/questions/8241242/drupal-7-upload-image-programatically
    $binary = base64_decode($image);

    //Create the directory if it does not already exist, otherwise check the permissions
    $directory = 'public://';
    file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

    $currentDate = date("Ymd");
    $file_name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
    
    //Saves a file to the specified destination and creates a database entry.
    $file = klovers_file_save_data($uid, $binary, $directory. '/' . $file_name, FILE_EXISTS_RENAME);

    // save รูป profile
    // $profile->field_profile_image[LANGUAGE_NONE][0] = (array)$file;

    $image_url= (array)$file;
  }


  $values = array();
  $values['field_name'] = 'field_chat_group'; 

  // #1 chat_id
  $values['field_object_id'][LANGUAGE_NONE][0]['value'] = $chat_id;

  // #2 field_name_group
  $values['field_name_group'][LANGUAGE_NONE][0]['value'] = $name;

  // #3 fiele_picture_group
  $values['field_picture_group'][LANGUAGE_NONE][0] = $image_url;

  // #4 field_chat_group_owner_id
  $values['field_chat_group_owner_id'][LANGUAGE_NONE][0]['value'] = $uid;
  
  // #5 field_status_group
  $values['field_status_group'][LANGUAGE_NONE][0]['value'] = 'active';

  // Create the field collection entry and associate it with the profile
  $field_entity = entity_create('field_collection_item', $values);
  $field_entity->setHostEntity('profile2', $profile);
  $field_entity->save();
 
  // เป็น node id ของ group
  $group_id = $field_entity->item_id;

  // load field_profile_group by id ขึ้นมาเพือ insert  field_members_group ลงไป
  $data_profile_group = field_collection_item_load($group_id);

  $members = array();
  foreach ($_REQUEST['members'] as $key => $value){
    $values_profile_group = array();
    $values_profile_group['field_name'] = 'field_members_group'; 
    $values_profile_group['field_members_group_friend_id'][LANGUAGE_NONE][0]['value'] = $value;
    $values_profile_group['field_members_group_status'][LANGUAGE_NONE][0]['value'] = "pedding";

    $field_entity_members_group = entity_create('field_collection_item', $values_profile_group);
    $field_entity_members_group->setHostEntity("field_members_group", $data_profile_group);
    $field_entity_members_group->save(); 

    /*
    $field_entity_members_group->item_id : node id ของ member 
    $value  : เป็น friend id
    $status : สถานะ 3 status : accept, pedding, reject
    */
    $members[$field_entity_members_group->item_id] = array("friend_id"=>$value, "status"=>"pedding");
  }

  // $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);
  $value = array(
      "chat_id"  => $chat_id,               // เป็น chat_id ของ group           
      "name"     => $name,
      // เราจะไม่เอา path host เราจะเอาเฉพาะ ex. /sites/default/files/20171003_570645200.png
      "image_url"=> substr(file_create_url($image_url['uri']), strlen($GLOBALS['base_url'])),
      "members"  => $members,
      "owner_id" => $uid,
      "status"   => 'active'
  );

  $firebase->set(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid . '/' . PATH_GROUPS . '/' . $group_id . '/' , $value);

  $result['result']   = TRUE;
  $result['item_id']  = $group_id;
  $result['value']    = $value;

  return  $result;
}

/*
  สร้าง Class ของแต่ละ Account
*/
function create_class(){
  $result = array();

  if (!check_header()) {
    $result['result'] = FALSE;
    $result['message']= "check_header()";
    return $result;
  }

  if (empty($_REQUEST['uid']) || empty($_REQUEST['fction'])|| empty($_REQUEST['name']) || empty($_REQUEST['image'])) {
    $result['result'] = FALSE;
    $result['message']  = "function : create_class, parameter";
    $result['_REQUEST'] = $_REQUEST;
    return $result;
  }

  global $firebase;

  $uid    = $_REQUEST['uid'];
  $fction = $_REQUEST['fction'];
  $item_id= $_REQUEST['item_id'];
  $name   = $_REQUEST['name'];
  $image  = $_REQUEST['image'];

  switch ($fction) {
    case 'add':{
        $profile = profile2_by_uid_load($uid, 'main');

        $values = array();
        $values['field_name'] = 'field_field_my_class'; 

        $image_url = array();
        if($image != ""){

          // http://stackoverflow.com/questions/8241242/drupal-7-upload-image-programatically
          $binary = base64_decode($image);

          //Create the directory if it does not already exist, otherwise check the permissions
          $directory = 'public://';
          file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

          $currentDate = date("Ymd");
          $file_name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
          
          //Saves a file to the specified destination and creates a database entry.
          $file = klovers_file_save_data($uid, $binary, $directory. '/' . $file_name, FILE_EXISTS_RENAME);

          // save รูป profile
          // $profile->field_profile_image[LANGUAGE_NONE][0] = (array)$file;

          $image_url= (array)$file;
        }

        // #1 field_name_group
        $values['field_class_name'][LANGUAGE_NONE][0]['value'] = $name;

        // #2 field_class_image_profile
        $values['field_class_image_profile'][LANGUAGE_NONE][0] = $image_url;
        
    
        // Create the field collection entry and associate it with the profile
        $field_entity = entity_create('field_collection_item', $values);
        $field_entity->setHostEntity('profile2', $profile);
        $field_entity->save();
       
        // เป็น node id ของ group
        $item_id = $field_entity->item_id;

        $value = array(      
            "name"     => $name,
            "image_url"=> substr(file_create_url($image_url['uri']), strlen($GLOBALS['base_url']))
        );

        $firebase->set(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid . '/' . PATH_CLASSS . '/' . $item_id . '/' , $value);

        $result['result'] = TRUE;
        $result['item_id']= $item_id;
        $result['value']  = $value;
        $result['fction'] = $fction;

        return  $result;
      }
      break;

    case 'edit':{
        // field_field_my_class

        $item_load = field_collection_item_load($item_id);
        if ($item_load) {
          $wrapper = entity_metadata_wrapper('field_collection_item', $item_load);

          if(strcasecmp($item_load->field_class_name[LANGUAGE_NONE][0]['value'], $data['name']) != 0){
            $wrapper->field_class_name->set($data['name']);
          }   

          $value = array();

          $value["name"]    = $name;

          if($image != ""){
            // http://stackoverflow.com/questions/8241242/drupal-7-upload-image-programatically
            $binary = base64_decode($image);

            //Create the directory if it does not already exist, otherwise check the permissions
            $directory = 'public://';
            file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

            $currentDate = date("Ymd");
            $name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
            
            //Saves a file to the specified destination and creates a database entry.
            $file = klovers_file_save_data($uid, $binary, $directory. '/' . $name, FILE_EXISTS_RENAME);

            // save รูป profile
            // $profile->field_profile_image[LANGUAGE_NONE][0] = (array)$file;

            $image_url= (array)$file;

            $wrapper->field_class_image_profile->set((array)$file);
            $value['image_url'] =  substr(file_create_url($image_url['uri']), strlen($GLOBALS['base_url']));
          }

          $wrapper->save();

            
          $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid . '/' . PATH_CLASSS . '/' . $item_id .'/' , $value);

          $result['result'] = TRUE;
          $result['item_id']= $item_id;
          $result['value']  = $value;
          $result['fction'] = $fction;

          return  $result;
        }
      }
      break;
    
    default:
      # code...
      break;
  }

}


/**
 ถุกเรียกใช้ firebase เท่านั้น
*/
function update_group_chat(){
  $result = array();

  if (!check_header()) {
    $result['result'] = FALSE;
    $result['message']= "check_header()";
    return $result;
  }

  if (empty($_REQUEST['uid']) || empty($_REQUEST['group_id']) || empty($_REQUEST['data'])) {
    $result['result'] = FALSE;
    $result['message']  = "function : update_picture_group, parameter";
    return $result;
  }

  $uid      = $_REQUEST['uid'];
  $group_id = $_REQUEST['group_id'];
  $data     = $_REQUEST['data'];

  /*
  // ลบ group ออกตาม group id
  $data_item_load = field_collection_item_load($_REQUEST['group_id']);

  $wrapper = entity_metadata_wrapper('field_collection_item', $data_item_load);    
  entity_delete_multiple('field_collection_item', array($wrapper->getIdentifier()));
  */

  $data_group = field_collection_item_load($group_id);
  if ($data_group) {
      $wrapper = entity_metadata_wrapper('field_collection_item', $data_group);

      // เป็นการดึงข้อมูลออกมาเพือเช็ด
      // $result['name']  = $wrapper->field_name_group->value();

      /*
      chat_id: "05XsfLFYgkN3M3oOStE6"
       create: 1510998660
       image_url: "/sites/default/files/20171118_206903853.png"
       members
            6308
            6309
            6310
            6311
       name: "Yo!!!"
       owner_id: "653"
       status: "active"
      */

      if (array_key_exists('name', $data)) {
        if (strcmp($wrapper->field_name_group->value(), $data['name']) != 0) {
          $wrapper->field_name_group->set($data['name']);
          $wrapper->save();
        }
      }

      if (array_key_exists('status', $data)) {
        if (strcmp($wrapper->field_status_group->value(), $data['status']) != 0) {
          $wrapper->field_status_group->set($data['status']);
          $wrapper->save();
        }
      }

      if (array_key_exists('members', $data)) {

        // $result['members'] = $data['members'];
        // foreach ($data['members'] as $key => $value) {
        //   // $result[$key] = $value;
        //   // จะใช้กรณีที่ลบ members เท่านั้น
        // }

        // field_members_group
        // $result['x'] = $wrapper->field_members_group->value();
        // $result['count'] = count($wrapper->field_members_group->value());
        // $result['gettype'] = gettype($wrapper->field_members_group->value());

        $members_group = array();
        foreach ($wrapper->field_members_group->value() as $fc_field) {
          $members_group[] = $fc_field->item_id;
        }

        // $result['members']  = $data['members'];

        /*
        $result['$members_group'] = $members_group;
        $result['count($members_group)'] = count($members_group);

        $result['$members'] = $data['members'];
        $result['count($data[members])'] = count($data['members']);
        if (count($members_group) != count($data['members'])) {
          # code...

          // $result['U'] ='U';

          foreach ($members_group as &$value) {

              $flag = false;
              foreach ($data['members'] as &$mvalue) {

                $result[$value] = $mvalue;
                if (strcmp($value, $mvalue) == 0) {
                  $flag = true;
                }
              }

              if (!$flag) {
                $result['xx'] = $value;
                $data_item_load = field_collection_item_load($value);

                $wrapper = entity_metadata_wrapper('field_collection_item', $data_item_load);    
                entity_delete_multiple('field_collection_item', array($wrapper->getIdentifier()));
              }
          }
        }
        */
      }
  }


  $result['result'] = TRUE;
  return  $result;
}


/**
 ถุกเรียกใช้จาก firebase เท่านั้น
 แก้ไข, เพิ่มเติม field friend ของ user
*/
function user_for_friend_editupdate(){
  $result = array();

  if (!check_header()) {
    $result['result'] = FALSE;
    $result['message']= "check_header()";
    return $result;
  }

  if (empty($_REQUEST['uid']) || empty($_REQUEST['friend_id']) || empty($_REQUEST['data'])) {
    $result['result'] = FALSE;
    $result['message']  = "function : user_for_friend_editupdate, parameter";
    return $result;
  }

  global $firebase;

  $uid        = $_REQUEST['uid'];
  $friend_id  = $_REQUEST['friend_id'];
  $data     = $_REQUEST['data'];

  /*
  // ลบ group ออกตาม group id
  $data_item_load = field_collection_item_load($_REQUEST['group_id']);

  $wrapper = entity_metadata_wrapper('field_collection_item', $data_item_load);    
  entity_delete_multiple('field_collection_item', array($wrapper->getIdentifier()));
  */

  if (!array_key_exists("item_id", $data)) {
    # code...
    $result['result'] = FALSE;
    return $result;
  }

  $item_id = $data['item_id'];

  $data_item = field_collection_item_load($item_id);
  if ($data_item) {
      $wrapper = entity_metadata_wrapper('field_collection_item', $data_item);

      if (array_key_exists('block', $data)) {
        if (strcmp($wrapper->field_profile_friends_is_block->value(), $data['block']) != 0) {
          $wrapper->field_profile_friends_is_block->set($data['block']);
          $wrapper->save();
        }
      }else{
        $wrapper->field_profile_friends_is_block->set("0");
        $wrapper->save();
      }

      if (array_key_exists('change_friends_name', $data)) {
        if (strcmp($wrapper->field_change_friend_name->value(), $data['change_friends_name']) != 0) {
          $wrapper->field_change_friend_name->set($data['change_friends_name']);
          $wrapper->save();
        }
      }else{
        $wrapper->field_change_friend_name->set("");
        $wrapper->save();
      }

      if (array_key_exists('status', $data)) {

        // watchdog(TAG, '<< ||| >> : %account', array('%account'=> $wrapper->field_friend_status->value()->tid), WATCHDOG_INFO);

       if (strcmp($wrapper->field_friend_status->value()->tid, $data['status']) != 0) {
          $wrapper->field_friend_status->set($data['status']);
          $wrapper->save();


          /*
          เราต้องมาวิเคราะห์ status ด้วย

          มาถึงขั้นตอนนี้เรา ต้องการ update 2 จุด คือ update database ของเพือน และ firebase ของเพือน
               
          switch ($data['status']) {
            case FRIEND_STATUS_FRIEND:{

                  // load profile ของเพือนขึ้นมา
                  $profile_friend = profile2_by_uid_load($friend_id, 'main');

                  foreach ($profile_friend->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
                    // Build array of field collection values.

                    $val = field_collection_item_load($value['value']);

                    // จะดึงที่ field_friend_uid = $uid แก้ใข friend status
                    if($val->field_friend_uid[LANGUAGE_NONE][0]['value'] == $_POST['uid_friend']){
                      $wrapper = entity_metadata_wrapper('field_collection_item', $val);
                      $wrapper->field_friend_status->set($data['status']);
                      $wrapper->save();

                      $values = array(
                          "status" => FRIEND_STATUS_FRIEND,
                          "update" => time()
                        );
                      $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $friend_id . '/friends/', $values);
                    }
                  }
              }
              break;
            
            default:
              # code...
              break;
          }
          */

          
        }
      }

      if (array_key_exists('favorite', $data)) {
        if (strcmp($wrapper->field_profile_friends_favorite->value(), $data['favorite']) != 0) {
          $wrapper->field_profile_friends_favorite->set($data['favorite']);
          $wrapper->save();
        }
      }
  }

  $result['result'] = TRUE;
  return  $result;
}

/**
 ถุกเรียกใช้จาก firebase เท่านั้น
 ลบเพือน
*/
function user_for_friend_delete(){
  $result = array();

  if (!check_header()) {
    $result['result'] = FALSE;
    $result['message']= "check_header()";
    return $result;
  }

  // watchdog(TAG, 'user_for_friend_delete header: %header', array('%header'=> serialize($_REQUEST)), WATCHDOG_INFO);


  if (empty($_REQUEST['uid']) || empty($_REQUEST['friend_id'])) {
    $result['result'] = FALSE;
    $result['message']  = "function : user_for_friend_delete, parameter";
    return $result;
  }

  global $firebase;
  $uid        = $_REQUEST['uid'];
  $friend_id  = $_REQUEST['friend_id'];

  // # 1 -- เป็นการลบเพือนของเราที่ friend_id ตรงกัน
  $profile = profile2_by_uid_load($uid, 'main');
  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    // ดึงเพือนมาทั้งหมด
    $data_item_load = field_collection_item_load($value['value']);
    if (strcmp($data_item_load->field_friend_uid[LANGUAGE_NONE][0]['value'], $friend_id) == 0) {
      $wrapper = entity_metadata_wrapper('field_collection_item', $data_item_load);    
      entity_delete_multiple('field_collection_item', array($wrapper->getIdentifier()));
      break;
    }
  }
  // # 1 -- เป็นการลบเพือนของเราที่ friend_id ตรงกัน

  // # 2 -- เป็นการลบเพือนของเพือนที่ uid ตรงกัน
  $profile = profile2_by_uid_load($friend_id, 'main');
  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    // ดึงเพือนมาทั้งหมด
    $data_item_load = field_collection_item_load($value['value']);
    if (strcmp($data_item_load->field_friend_uid[LANGUAGE_NONE][0]['value'], $uid) == 0) {
      $wrapper = entity_metadata_wrapper('field_collection_item', $data_item_load);    
      entity_delete_multiple('field_collection_item', array($wrapper->getIdentifier()));
      break;
    }
  }

  // # 2 -- เป็นการลบเพือนของเพือนที่ uid ตรงกัน

  $result['result']   = TRUE;
  return $result;
}

/** 
 ถุกเรียกใช้ firebase เท่านั้น. delete_member_group_chat
*/
function delete_group_chat(){
  $result = array();

  if (!check_header()) {
    $result['result'] = FALSE;
    $result['message']= "check_header()";
    return $result;
  }

  if (empty($_REQUEST['uid']) || empty($_REQUEST['group_id'])) { // 
    $result['result'] = FALSE;
    $result['message']  = "function : delete_group_chat, parameter";
    return $result;
  }

  $uid = $_REQUEST['uid'];
  $group_id = $_REQUEST['group_id'];

  // ลบ group ออกตาม group id
  $data_item_load = field_collection_item_load($group_id);

  $wrapper = entity_metadata_wrapper('field_collection_item', $data_item_load);    
  entity_delete_multiple('field_collection_item', array($wrapper->getIdentifier()));

  $result['result'] = TRUE;
  
  return  $result;
}

/** 
 ถุกเรียกใช้ firebase เท่านั้น. delete_member_group_chat
*/
function delete_member_group_chat(){
  $result = array();

  if (!check_header()) {
    $result['result'] = FALSE;
    $result['message']= "check_header()";
    return $result;
  }

  if (empty($_REQUEST['uid']) || empty($_REQUEST['group_id']) || empty($_REQUEST['member_id'])) { // 
    $result['result'] = FALSE;
    $result['message']  = "function : delete_member_group_chat, parameter";
    return $result;
  }

  $uid = $_REQUEST['uid'];
  $group_id = $_REQUEST['group_id'];
  $member_id = $_REQUEST['member_id'];

  // ลบ group ออกตาม group id
  $data_item_load = field_collection_item_load($member_id);

  $wrapper = entity_metadata_wrapper('field_collection_item', $data_item_load);    
  entity_delete_multiple('field_collection_item', array($wrapper->getIdentifier()));

  $result['result'] = TRUE;
  
  return  $result;
}

function delete_classs(){
  $result = array();

  if (!check_header()) {
    $result['result'] = FALSE;
    $result['message']= "check_header()";
    return $result;
  }

  if (empty($_REQUEST['uid']) || empty($_REQUEST['item_id'])) { // 
    $result['result'] = FALSE;
    $result['message']  = "function : delete_classs, parameter";
    return $result;
  }

  $uid = $_REQUEST['uid'];
  $item_id = $_REQUEST['item_id'];

  // ลบ group ออกตาม group id
  $item_load = field_collection_item_load($item_id);
  if ($item_load) {
    # code...
    $wrapper = entity_metadata_wrapper('field_collection_item', $item_load);    
    entity_delete_multiple('field_collection_item', array($wrapper->getIdentifier()));
  }


  $result['result'] = TRUE;
  
  return  $result;
}

function update_picture_group(){ 
  $result = array();

  if (!check_header()) {
    $result['result'] = FALSE;
    $result['message']= "check_header()";
    return $result;
  }

  if (empty($_REQUEST['uid']) || empty($_REQUEST['group_id']) || empty($_REQUEST['image'])) {
    $result['result'] = FALSE;
    $result['message']  = "function : update_picture_group, parameter";
    return $result;
  }
  global $firebase;

  $uid      = $_REQUEST['uid'];
  $group_id = $_REQUEST['group_id'];
  $image    = $_REQUEST['image'];

  if($image != ""){

    // http://stackoverflow.com/questions/8241242/drupal-7-upload-image-programatically
    $binary = base64_decode($image);

    //Create the directory if it does not already exist, otherwise check the permissions
    $directory = 'public://';
    file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

    $currentDate = date("Ymd");
    $name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
    
    //Saves a file to the specified destination and creates a database entry.
    $file = klovers_file_save_data($uid, $binary, $directory. '/' . $name, FILE_EXISTS_RENAME);

    // save รูป profile
    // $profile->field_profile_image[LANGUAGE_NONE][0] = (array)$file;

    $image_url= (array)$file;


    $data = field_collection_item_load($group_id);

    if ($data) {
      $wrapper = entity_metadata_wrapper('field_collection_item', $data);
        
      // $wrapper->field_name_group->set($_REQUEST['name']);
      $wrapper->field_picture_group->set((array)$file);
      $wrapper->save();

      // // url image profile 
      // $url = substr(file_create_url($profile->field_profile_image[LANGUAGE_NONE][0]['uri']), strlen($GLOBALS['base_url']));

      $image_url = substr(file_create_url($image_url['uri']), strlen($GLOBALS['base_url']));

      $value = array(
        "update"   => time(),
        "image_url"=> $image_url
      );
      $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid . '/' . PATH_GROUPS . '/' . $group_id .'/' , $value);
    }else{
      $result['result'] = FALSE;
      $result['message'] = 'Empty : field_collection_item_load = false';
      return $result;
    }
  }

  $result['result'] = TRUE;  
  $result['image_url'] = $image_url;

  return $result;
}


function group_invite_new_members(){
  $result = array();

  if (!check_header()) {
    $result['result'] = FALSE;
    $result['message']= "check_header()";
    return $result;
  }

  if (empty($_REQUEST['uid']) || empty($_REQUEST['group_id']) || empty($_REQUEST['members'])) {
    $result['result'] = FALSE;
    $result['message']  = "function : group_invite_new_members, parameter";
    return $result;
  }

  global $firebase;

  $uid      = $_REQUEST['uid'];
  $group_id = $_REQUEST['group_id'];
  $members  = $_REQUEST['members'];

  // load field_profile_group by id ขึ้นมาเพือ insert  field_members_group ลงไป
  $data_group = field_collection_item_load($group_id);

  $item_members = array();

  foreach ($members as $key => $value){
    $values_members_group = array();
    $values_members_group['field_name'] = 'field_members_group'; 
    $values_members_group['field_members_group_friend_id'][LANGUAGE_NONE][0]['value'] = $value;
    $values_members_group['field_members_group_status'][LANGUAGE_NONE][0]['value'] = "pedding";

    $field_entity_members_group = entity_create('field_collection_item', $values_members_group);
    $field_entity_members_group->setHostEntity("field_members_group", $data_group);
    $field_entity_members_group->save(); 

    /*
    $field_entity_members_group->item_id : node id ของ member 
    $value  : เป็น friend id
    $status : สถานะ 3 status : accept, pedding, reject
    */
    // $members[$field_entity_members_group->item_id] = array("friend_id"=>$value, "status"=>"pedding");

    // $members[$field_entity_members_group->item_id] = array("friend_id"=>$value, "status"=>"pedding");

    /*
      เราต้อง เพิ่ม /groups/{group_id}/members/ ของ firebase
    */ 

    $item =  array("friend_id"=>$value, "status"=>"pedding");
    $firebase->set(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid . '/' . PATH_GROUPS . '/' . $group_id . '/members/' . $field_entity_members_group->item_id . '/' , $item);

    $item_members[$field_entity_members_group->item_id] = $item;
  }

  $result['result']   = TRUE;
  $result['members']  = $item_members;

  return  $result;
}

/*
  สร้าง QRCode &  profile ที่ firebase ให้แต่ละ user โดยแต่ละ application (heart, dna)

  $account : user account
  $bundleidentifier : heart.idna or heart.dna
  $url     : url app store[heart, dna](ios), play store[heart, dna](android)
*/
function generatorQRCode($account, $platform, $bundleidentifier){
  try {
    $file = array();
        
    // Gen QRCode
    //set it to writable location, a place for temp generated PNG files
    $PNG_TEMP_DIR = PATH_FOLDER_QRCODE;//config_pages_get(CONFIG_PAGES_TYPE, 'field_path_folder_qrcode'); 

    //Create the directory if it does not already exist, otherwise check the permissions
    file_prepare_directory($PNG_TEMP_DIR, FILE_CREATE_DIRECTORY);

    $text     = dec_enc('encrypt', $account->uid);
    $errorCorrectionLevel = "M";
    $matrixPointSize = 8;

    // Create Profile2
    // Where 'main' is your profile2 type machine name.
    $profile = profile2_create(array('type' => 'main', 'uid' => $account->uid));

    // add field name
    $profile->field_profile_name[LANGUAGE_NONE][0]['value'] = $account->name;

    // Display name
    $profile->field_profile_display_name[LANGUAGE_NONE][0]['value'] = $account->name;

    // จำนวน heart
    // $profile->field_profile_heart[LANGUAGE_NONE][0]['value'] = DEFUALT_NUMBER_HEART;

    // status message
    $profile->field_profile_status_message[LANGUAGE_NONE][0]['value'] = 'status message';

    /*
    เราจะแยกออกกัน ระหว่าง heart, dna เพราะว่าต้อง scan qrcode มันต้องวิ่งไปเปด store ถูกเพราะว่าเราแยก app กัน
    */
    switch ($bundleidentifier) {
      // iDNA
      case BUNDLE_IDENTIFIER:
      {
        // ios
        $filename = $PNG_TEMP_DIR.'/'.md5($text.'|'.$errorCorrectionLevel.'|'.$matrixPointSize).'.png';
        QRcode::png(URL_SERVER() . "/qe?&bi=" . dec_enc('encrypt', BUNDLE_IDENTIFIER)  . "&bii=" . $text, $filename, $errorCorrectionLevel, $matrixPointSize, 2);  

        $currentDate = date("Ymd");
        $name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
        $image = file_get_contents($filename); 
        //Saves a file to the specified destination and creates a database entry.
        $file = klovers_file_save_data($account->uid, $image, 'public://qrcode/' . $name, FILE_EXISTS_RENAME);
        
        // Delete file ที่  QRCode  สร้างขึ้นมาเพราะว่าเราเก็บเข้าระบบแล้ว
        unlink($filename);
        // Gen QRCode

        $profile->field_profile_my_qrcode[LANGUAGE_NONE][0] = (array)$file;


        /*
        // android 
        $filename = $PNG_TEMP_DIR.'/'.md5($text.'|'.$errorCorrectionLevel.'|'.$matrixPointSize).'.png';
        QRcode::png(URL_SERVER() . "/qe?&bi=" . dec_enc('encrypt',BI_ANDROID_IDNA) . "&bii=" . $text, $filename, $errorCorrectionLevel, $matrixPointSize, 2);  

        $currentDate = date("Ymd");
        $name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
        $image = file_get_contents($filename); 
        //Saves a file to the specified destination and creates a database entry.
        $file = klovers_file_save_data($account->uid, $image, 'public://qrcode/' . $name, FILE_EXISTS_RENAME);
        
        // Delete file ที่  QRCode  สร้างขึ้นมาเพราะว่าเราเก็บเข้าระบบแล้ว
        unlink($filename);
        // Gen QRCode
        */

        // $profile->field_profile_my_qrcode_dna_andr[LANGUAGE_NONE][0] = (array)$file;
        
        break;
      }
      
      default:
        # code...
        break;
    }

    $value['field_name'] = 'field_profile_multi_email'; // field collection name
    $value['field_email_text'][LANGUAGE_NONE][0]['value'] = $account->mail;

    // Create the field collection entry and associate it with the profile
    $field_entity = entity_create('field_collection_item', $value);
    $field_entity->setHostEntity('profile2', $profile);
    $field_entity->save();

    // Save the profile2 to the user account.
    profile2_save($profile); 
  } catch (Exception $e) {
    watchdog("idna", 'Erorr = %message', array('%message' => $e->getMessage()), WATCHDOG_ERROR);
  }
}

/*
 เป็นการ redirect url store
*/ 
function qe(){
  $detect = mobile_detect_get_object();
  switch (dec_enc('decrypt', $_REQUEST['bi'])) {
      case BUNDLE_IDENTIFIER:{  // 
        if($detect->is('iPod') || $detect->is('iPhone') || $detect->is('iPad')){
          header('Location: ' . DEFUALT_IOS_URL_STORE_IDNA); // <-apple store link here
        }else if($detect->is('Android')){ 
          header('Location: ' . DEFUALT_ANDROID_URL_STORE_IDNA); // <-play store link here
        }
        break;
      }
      
      default:{
        header('Location: ' . $GLOBALS['base_url']); 
      }
        break;
  }
}

// การกำหนด my id
function setDefualtMyID($profile, $my_id){
  $value = array();
  $value['field_name'] = 'field_profile_my_id'; // field collection name

  $value['field_profile_my_id_value'][LANGUAGE_NONE][0]['value'] = $my_id;
  $value['field_profile_my_id_is_edit'][LANGUAGE_NONE][0]['value'] = "1";

  // Create the field collection entry and associate it with the profile
  $field_entity = entity_create('field_collection_item', $value);
  $field_entity->setHostEntity('profile2', $profile);
  $field_entity->save();

  return $field_entity->item_id;
}

// sound_call_waiting
function setDefualtSoundCallWaiting($profile){
  $value = array();
  $value['field_name'] = 'field_sound_call_waiting';
  $value['field_sound_call_waiting_item_id'][LANGUAGE_NONE][0]['value'] = '396';
  $value['field_sound_call_waiting_title'][LANGUAGE_NONE][0]['value']    = "Default Sound Call waiting";
  $value['field_sound_call_waiting_uri'][LANGUAGE_NONE][0]['value']     = "/sites/default/files/sound_call_waiting/sexiest_romantic_mp3.mp3";

  $field_entity = entity_create('field_collection_item', $value);
  $field_entity->setHostEntity('profile2', $profile);
  $field_entity->save();

  return $field_entity->item_id;
}

/* 
 การสร้าง defualt classs ให้แต่ละ user โดยจะดึงมาจาก node content_type == 'defualt_classs', status == 1
*/
function setDefualtClasss($profile){
  global $firebase;

  $content_type = "defualt_classs";

  $query  = new EntityFieldQuery;
  $result = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', $content_type)
    ->propertyCondition('status', 1)
    ->execute();

  if (!empty($result['node'])) {
    $nids = array_keys($result['node']);
    foreach ($nids as $key => $nid) {
      $node = node_load($nid);

      $image_arr = (array)file_load($node->field_class_image_profile[LANGUAGE_NONE][0]['fid']);

      $uri = substr(file_create_url(image_style_url('thumbnail', $image_arr['uri'])), strlen($GLOBALS['base_url']));

      $values = array();
      $values['field_name'] = 'field_field_my_class'; 
      $values['field_class_name'][LANGUAGE_NONE][0]['value'] = $node->title;
      $values['field_class_image_profile'][LANGUAGE_NONE][0] = $image_arr;

      // Create the field collection entry and associate it with the profile
      $field_entity = entity_create('field_collection_item', $values);
      $field_entity->setHostEntity('profile2', $profile);
      $field_entity->save();
     
      // เป็น node id ของ group
      $item_id = $field_entity->item_id;

      // 
      $value_classs = array(      
          "nid"      => $nid,
          "name"     => $node->title,
          "image_url"=> $uri
      );

      $firebase->set(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $profile->uid . '/' . PATH_CLASSS . '/' . $item_id . '/' , $value_classs);

      // watchdog(TAG, '2. DefualtClasss header : %profile', array('%profile'=>serialize($profile)), WATCHDOG_INFO);

    }
  }
}

/*
  $tid เราจะ fix ลงไป
  34 : รูป family class
  33 : รูป friend class
  32 : รูปแอพพลิเคชั่น
  30 : รูปโปรไฟล์
  31 : รูปพื้นหลังของนามบัตร
*/
function get_defualt_picture($tid){
  watchdog(TAG, 'get_defualt_picture ', array(), WATCHDOG_INFO);
  $tree = taxonomy_get_tree(taxonomy_vocabulary_machine_name_load('defualt_picture')->vid);
  foreach ($tree as $term) {
    if ($term->tid == $tid) {
      $term = taxonomy_term_load($term->tid);
      return file_load($term->field_image[LANGUAGE_NONE][0]['fid']);
    }
  }
  return;
}
